{"version":3,"file":"ngx-tour-core.umd.min.js","sources":["~/ngx-tour-core/src/tour.service.ts","~/ngx-tour-core/src/tour-hotkey-listener.component.ts","~/ngx-tour-core/src/tour.module.ts"],"sourcesContent":["import'rxjs/add/operator/filter';\nimport'rxjs/add/operator/first';\n\nimport { Injectable } from '@angular/core';\nimport { NavigationStart, Router, UrlSegment } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operator/map';\nimport { mergeStatic } from 'rxjs/operator/merge';\nimport { Subject } from 'rxjs/Subject';\n\nimport { TourAnchorDirective } from './tour-anchor.directive';\n\nexport interface IStepOption {\n  stepId?: string;\n  anchorId?: string;\n  title?: string;\n  content?: string;\n  route?: string | UrlSegment[];\n  nextStep?: number | string;\n  prevStep?: number | string;\n  placement?: any;\n  preventScrolling?: boolean;\n  prevBtnTitle?: string;\n  nextBtnTitle?: string;\n  endBtnTitle?: string;\n}\nexport type TourState = number;\nexport let TourState: any = {};\nTourState.OFF = 0;\nTourState.ON = 1;\nTourState.PAUSED = 2;\nTourState[TourState.OFF] = \"OFF\";\nTourState[TourState.ON] = \"ON\";\nTourState[TourState.PAUSED] = \"PAUSED\";\n\nexport class TourService<T extends IStepOption = IStepOption> {\npublic stepShow$: Subject<T> = new Subject();\npublic stepHide$: Subject<T> = new Subject();\npublic initialize$: Subject<T[]> = new Subject();\npublic start$: Subject<T> = new Subject();\npublic end$: Subject<any> = new Subject();\npublic pause$: Subject<T> = new Subject();\npublic resume$: Subject<T> = new Subject();\npublic anchorRegister$: Subject<string> = new Subject();\npublic anchorUnregister$: Subject<string> = new Subject();\npublic events$: Observable<{ name: string, value: any }> = mergeStatic(\n    map.bind(this.stepShow$)(value => ({ name: 'stepShow', value })),\n    map.bind(this.stepHide$)(value => ({ name: 'stepHide', value })),\n    map.bind(this.initialize$)(value => ({ name: 'initialize', value })),\n    map.bind(this.start$)(value => ({ name: 'start', value })),\n    map.bind(this.end$)(value => ({ name: 'end', value })),\n    map.bind(this.pause$)(value => ({ name: 'pause', value })),\n    map.bind(this.resume$)(value => ({ name: 'resume', value })),\n    map.bind(this.anchorRegister$)(value => ({ name: 'anchorRegister', value })),\n    map.bind(this.anchorUnregister$)(value => ({ name: 'anchorUnregister', value })),\n  );\npublic steps: T[] = [];\npublic currentStep: T;\npublic anchors: { [anchorId: string]: TourAnchorDirective } = {};\nprivate status: TourState = TourState.OFF;\nprivate isHotKeysEnabled = true;\n/**\n * @param {?} router\n */\nconstructor(private router: Router) { }\n/**\n * @param {?} steps\n * @param {?=} stepDefaults\n * @return {?}\n */\npublic initialize(steps: T[], stepDefaults?: T): void {\n    if (steps && steps.length > 0) {\n      this.status = TourState.OFF;\n      this.steps = steps.map(step => Object.assign({}, stepDefaults, step));\n      this.initialize$.next(this.steps);\n    }\n  }\n/**\n * @return {?}\n */\npublic disableHotkeys(): void {\n    this.isHotKeysEnabled = false;\n  }\n/**\n * @return {?}\n */\npublic enableHotkeys(): void {\n    this.isHotKeysEnabled = true;\n  }\n/**\n * @return {?}\n */\npublic start(): void {\n    this.startAt(0);\n  }\n/**\n * @param {?} stepId\n * @return {?}\n */\npublic startAt(stepId: number | string): void {\n    this.status = TourState.ON;\n    this.goToStep(this.loadStep(stepId));\n    this.start$.next();\n    this.router.events.filter(event => event instanceof NavigationStart).first().subscribe(() => {\n      if (this.currentStep) {\n        this.hideStep(this.currentStep);\n      }\n    });\n  }\n/**\n * @return {?}\n */\npublic end(): void {\n    this.status = TourState.OFF;\n    this.hideStep(this.currentStep);\n    this.currentStep = undefined;\n    this.end$.next();\n  }\n/**\n * @return {?}\n */\npublic pause(): void {\n    this.status = TourState.PAUSED;\n    this.hideStep(this.currentStep);\n    this.pause$.next();\n  }\n/**\n * @return {?}\n */\npublic resume(): void {\n    this.status = TourState.ON;\n    this.showStep(this.currentStep);\n    this.resume$.next();\n  }\n/**\n * @param {?=} pause\n * @return {?}\n */\npublic toggle(pause?: boolean): void {\n    if (pause) {\n      if (this.currentStep) {\n        this.pause();\n      } else {\n        this.resume();\n      }\n    } else {\n      if (this.currentStep) {\n        this.end();\n      } else {\n        this.start();\n      }\n    }\n  }\n/**\n * @return {?}\n */\npublic next(): void {\n    if (this.hasNext(this.currentStep)) {\n      this.goToStep(this.loadStep(this.currentStep.nextStep || this.steps.indexOf(this.currentStep) + 1));\n    }\n  }\n/**\n * @param {?} step\n * @return {?}\n */\npublic hasNext(step: T): boolean {\n    if (!step) {\n      console.warn('Can\\'t get next step. No currentStep.');\n      return false;\n    }\n    return step.nextStep !== undefined || this.steps.indexOf(step) < this.steps.length - 1;\n  }\n/**\n * @return {?}\n */\npublic prev(): void {\n    if (this.hasPrev(this.currentStep)) {\n      this.goToStep(this.loadStep(this.currentStep.prevStep || this.steps.indexOf(this.currentStep) - 1));\n    }\n  }\n/**\n * @param {?} step\n * @return {?}\n */\npublic hasPrev(step: T): boolean {\n    if (!step) {\n      console.warn('Can\\'t get previous step. No currentStep.');\n      return false;\n    }\n    return step.prevStep !== undefined || this.steps.indexOf(step) > 0;\n  }\n/**\n * @param {?} stepId\n * @return {?}\n */\npublic goto(stepId: number | string): void {\n    this.goToStep(this.loadStep(stepId));\n  }\n/**\n * @param {?} anchorId\n * @param {?} anchor\n * @return {?}\n */\npublic register(anchorId: string, anchor: TourAnchorDirective): void {\n    if (this.anchors[anchorId]) {\n      throw new Error('anchorId ' + anchorId + ' already registered!');\n    }\n    this.anchors[anchorId] = anchor;\n    this.anchorRegister$.next(anchorId);\n  }\n/**\n * @param {?} anchorId\n * @return {?}\n */\npublic unregister(anchorId: string): void {\n    delete this.anchors[anchorId];\n    this.anchorUnregister$.next(anchorId);\n  }\n/**\n * @return {?}\n */\npublic getStatus(): TourState {\n    return this.status;\n  }\n/**\n * @return {?}\n */\npublic isHotkeysEnabled(): boolean {\n    return this.isHotKeysEnabled;\n  }\n/**\n * @param {?} step\n * @return {?}\n */\nprivate goToStep(step: T): void {\n    if (!step) {\n      console.warn('Can\\'t go to non-existent step');\n      this.end();\n      return;\n    }\n    let /** @type {?} */ navigatePromise: Promise<boolean> = new Promise(resolve => resolve(true));\n    if (step.route !== undefined && typeof (step.route) === 'string') {\n      navigatePromise = this.router.navigateByUrl(step.route);\n    } else if (step.route && Array.isArray(step.route)) {\n      navigatePromise = this.router.navigate(step.route);\n    }\n    navigatePromise.then(navigated => {\n      if (navigated !== false) {\n        setTimeout(() => this.setCurrentStep(step));\n      }\n    });\n  }\n/**\n * @param {?} stepId\n * @return {?}\n */\nprivate loadStep(stepId: number | string): T {\n    if (typeof (stepId) === 'number') {\n      return this.steps[stepId];\n    } else {\n      return this.steps.find(step => step.stepId === stepId);\n    }\n  }\n/**\n * @param {?} step\n * @return {?}\n */\nprivate setCurrentStep(step: T): void {\n    if (this.currentStep) {\n      this.hideStep(this.currentStep);\n    }\n    this.currentStep = step;\n    this.showStep(this.currentStep);\n    this.router.events.filter(event => event instanceof NavigationStart).first().subscribe(() => {\n      if (this.currentStep) {\n        this.hideStep(this.currentStep);\n      }\n    });\n  }\n/**\n * @param {?} step\n * @return {?}\n */\nprivate showStep(step: T): void {\n    const /** @type {?} */ anchor = this.anchors[step && step.anchorId];\n    if (!anchor) {\n      console.warn('Can\\'t attach to unregistered anchor with id ' + step.anchorId);\n      this.end();\n      return;\n    }\n    anchor.showTourStep(step);\n    this.stepShow$.next(step);\n  }\n/**\n * @param {?} step\n * @return {?}\n */\nprivate hideStep(step: T): void {\n    const /** @type {?} */ anchor = this.anchors[step && step.anchorId];\n    if (!anchor) {\n      return;\n    }\n    anchor.hideTourStep();\n    this.stepHide$.next(step);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n];\n}\n\nfunction TourService_tsickle_Closure_declarations() {\n/** @type {?} */\nTourService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTourService.ctorParameters;\n/** @type {?} */\nTourService.prototype.stepShow$;\n/** @type {?} */\nTourService.prototype.stepHide$;\n/** @type {?} */\nTourService.prototype.initialize$;\n/** @type {?} */\nTourService.prototype.start$;\n/** @type {?} */\nTourService.prototype.end$;\n/** @type {?} */\nTourService.prototype.pause$;\n/** @type {?} */\nTourService.prototype.resume$;\n/** @type {?} */\nTourService.prototype.anchorRegister$;\n/** @type {?} */\nTourService.prototype.anchorUnregister$;\n/** @type {?} */\nTourService.prototype.events$;\n/** @type {?} */\nTourService.prototype.steps;\n/** @type {?} */\nTourService.prototype.currentStep;\n/** @type {?} */\nTourService.prototype.anchors;\n/** @type {?} */\nTourService.prototype.status;\n/** @type {?} */\nTourService.prototype.isHotKeysEnabled;\n/** @type {?} */\nTourService.prototype.router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, HostListener } from '@angular/core';\n\nimport { TourService, TourState } from './tour.service';\nexport class TourHotkeyListenerComponent {\n/**\n * @param {?} tourService\n */\nconstructor(public tourService: TourService) { }\n/**\n * Configures hot keys for controlling the tour with the keyboard\n * @param {?} event\n * @return {?}\n */\npublic onEscapeKey(event: KeyboardEvent): void {\n    if (this.tourService.getStatus() === TourState.ON\n      && this.tourService.isHotkeysEnabled()) {\n      this.tourService.end();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\npublic onArrowRightKey(event: KeyboardEvent): void {\n    if (this.tourService.getStatus() === TourState.ON\n      && this.tourService.hasNext(this.tourService.currentStep)\n      && this.tourService.isHotkeysEnabled()) {\n      this.tourService.next();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\npublic onArrowLeftKey(event: KeyboardEvent): void {\n    if (this.tourService.getStatus() === TourState.ON\n      && this.tourService.hasPrev(this.tourService.currentStep)\n      && this.tourService.isHotkeysEnabled()) {\n      this.tourService.prev();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tour-hotkey-listener',\n  template: ` `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TourService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onEscapeKey': [{ type: HostListener, args: ['window:keydown.Escape', ] },],\n'onArrowRightKey': [{ type: HostListener, args: ['window:keydown.ArrowRight', ] },],\n'onArrowLeftKey': [{ type: HostListener, args: ['window:keydown.ArrowLeft', ] },],\n};\n}\n\nfunction TourHotkeyListenerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTourHotkeyListenerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTourHotkeyListenerComponent.ctorParameters;\n/** @type {?} */\nTourHotkeyListenerComponent.propDecorators;\n/** @type {?} */\nTourHotkeyListenerComponent.prototype.tourService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { TourHotkeyListenerComponent } from './tour-hotkey-listener.component';\nimport { TourService } from './tour.service';\nexport class TourModule {\n/**\n * @return {?}\n */\npublic static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: TourModule,\n            providers: [\n                TourService,\n            ],\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [TourHotkeyListenerComponent],\n    exports: [TourHotkeyListenerComponent],\n    imports: [CommonModule, RouterModule],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TourModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTourModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTourModule.ctorParameters;\n}\n;\n\nexport { TourService };\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["TourState","OFF","ON","PAUSED","TourService","router","this","stepShow$","Subject","stepHide$","initialize$","start$","end$","pause$","resume$","anchorRegister$","anchorUnregister$","events$","mergeStatic","map","bind","value","name","steps","anchors","status","isHotKeysEnabled","prototype","initialize","stepDefaults","length","step","Object","assign","next","disableHotkeys","enableHotkeys","start","startAt","stepId","_this","goToStep","loadStep","events","filter","event","NavigationStart","first","subscribe","currentStep","hideStep","end","undefined","pause","resume","showStep","toggle","hasNext","nextStep","indexOf","console","warn","prev","hasPrev","prevStep","goto","register","anchorId","anchor","Error","unregister","getStatus","isHotkeysEnabled","navigatePromise","Promise","resolve","route","navigateByUrl","Array","isArray","navigate","then","navigated","setTimeout","setCurrentStep","find","showTourStep","hideTourStep","decorators","type","Injectable","ctorParameters","Router","TourHotkeyListenerComponent","tourService","onEscapeKey","onArrowRightKey","onArrowLeftKey","Component","args","selector","template","propDecorators","HostListener","TourModule","forRoot","ngModule","providers","NgModule","declarations","exports","imports","CommonModule","RouterModule"],"mappings":"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"}

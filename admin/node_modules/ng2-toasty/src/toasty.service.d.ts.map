{"version":3,"file":"toasty.service.d.ts","sources":["toasty.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable } from 'rxjs/Observable';\n/**\n * Options to configure specific Toast\n */\nexport declare class ToastOptions {\n    title: string;\n    msg?: string;\n    showClose?: boolean;\n    theme?: string;\n    timeout?: number;\n    onAdd?: Function;\n    onRemove?: Function;\n}\n/**\n * Structrure of Toast\n */\nexport declare class ToastData {\n    id: number;\n    title: string;\n    msg: string;\n    showClose: boolean;\n    type: string;\n    theme: string;\n    timeout: number;\n    onAdd: Function;\n    onRemove: Function;\n    onClick: Function;\n}\n/**\n * Default configuration foa all toats and toasty container\n */\nexport declare class ToastyConfig {\n    limit: number;\n    showClose: boolean;\n    position: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left' | 'top-center' | 'bottom-center' | 'center-center';\n    timeout: number;\n    theme: 'default' | 'material' | 'bootstrap';\n}\nexport declare enum ToastyEventType {\n    ADD = 0,\n    CLEAR = 1,\n    CLEAR_ALL = 2,\n}\nexport declare class ToastyEvent {\n    type: ToastyEventType;\n    value: any;\n    constructor(type: ToastyEventType, value?: any);\n}\nexport declare function toastyServiceFactory(config: ToastyConfig): ToastyService;\n/**\n * Toasty service helps create different kinds of Toasts\n */\nexport declare class ToastyService {\n    private config;\n    static THEMES: Array<string>;\n    uniqueCounter: number;\n    private eventSource;\n    events: Observable<ToastyEvent>;\n    constructor(config: ToastyConfig);\n    /**\n     * Get list of toats\n     */\n    /**\n     * Create Toast of a default type\n     */\n    default(options: ToastOptions | string | number): void;\n    /**\n     * Create Toast of info type\n     * @param  {object} options Individual toasty config overrides\n     */\n    info(options: ToastOptions | string | number): void;\n    /**\n     * Create Toast of success type\n     * @param  {object} options Individual toasty config overrides\n     */\n    success(options: ToastOptions | string | number): void;\n    /**\n     * Create Toast of wait type\n     * @param  {object} options Individual toasty config overrides\n     */\n    wait(options: ToastOptions | string | number): void;\n    /**\n     * Create Toast of error type\n     * @param  {object} options Individual toasty config overrides\n     */\n    error(options: ToastOptions | string | number): void;\n    /**\n     * Create Toast of warning type\n     * @param  {object} options Individual toasty config overrides\n     */\n    warning(options: ToastOptions | string | number): void;\n    private add(options, type);\n    clearAll(): void;\n    clear(id: number): void;\n    private _checkConfigItem(config, options, property);\n    private emitEvent(event);\n}\n"]}
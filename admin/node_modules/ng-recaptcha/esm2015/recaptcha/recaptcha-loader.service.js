import * as tslib_1 from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, Optional, PLATFORM_ID, } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { loadScript } from './load-script';
import { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_V3_SITE_KEY, } from './tokens';
let RecaptchaLoaderService = RecaptchaLoaderService_1 = class RecaptchaLoaderService {
    constructor(
    // tslint:disable-next-line:no-any
    platformId, language, baseUrl, nonce, v3SiteKey) {
        this.platformId = platformId;
        this.language = language;
        this.baseUrl = baseUrl;
        this.nonce = nonce;
        this.v3SiteKey = v3SiteKey;
        this.init();
        this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService_1.ready.asObservable() : of();
    }
    /** @internal */
    init() {
        if (RecaptchaLoaderService_1.ready) {
            return;
        }
        if (isPlatformBrowser(this.platformId)) {
            const subject = new BehaviorSubject(null);
            RecaptchaLoaderService_1.ready = subject;
            const langParam = this.language ? '&hl=' + this.language : '';
            const renderMode = this.v3SiteKey || 'explicit';
            loadScript(renderMode, (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);
        }
    }
};
/**
 * @internal
 * @nocollapse
 */
RecaptchaLoaderService.ready = null;
RecaptchaLoaderService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_LANGUAGE,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_BASE_URL,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_NONCE,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [RECAPTCHA_V3_SITE_KEY,] }] }
];
RecaptchaLoaderService = RecaptchaLoaderService_1 = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, Inject(PLATFORM_ID)),
    tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(RECAPTCHA_LANGUAGE)),
    tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(RECAPTCHA_BASE_URL)),
    tslib_1.__param(3, Optional()), tslib_1.__param(3, Inject(RECAPTCHA_NONCE)),
    tslib_1.__param(4, Optional()), tslib_1.__param(4, Inject(RECAPTCHA_V3_SITE_KEY))
], RecaptchaLoaderService);
export { RecaptchaLoaderService };
var RecaptchaLoaderService_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhLWxvYWRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctcmVjYXB0Y2hhLyIsInNvdXJjZXMiOlsicmVjYXB0Y2hhL3JlY2FwdGNoYS1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUNMLE1BQU0sRUFDTixVQUFVLEVBQ1YsUUFBUSxFQUNSLFdBQVcsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZUFBZSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGVBQWUsRUFDZixxQkFBcUIsR0FDdEIsTUFBTSxVQUFVLENBQUM7QUFHbEIsSUFBYSxzQkFBc0IsOEJBQW5DO0lBa0JFO0lBQ0Usa0NBQWtDO0lBQ0ksVUFBZSxFQUNiLFFBQWlCLEVBQ2pCLE9BQWdCLEVBQ25CLEtBQWMsRUFDUixTQUFrQjtRQUp2QixlQUFVLEdBQVYsVUFBVSxDQUFLO1FBTXJELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLElBQUksQ0FBQyxLQUFLLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBc0IsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ3ZHLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixJQUFJO1FBQ1YsRUFBRSxDQUFDLENBQUMsd0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLENBQUM7UUFDVCxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLGVBQWUsQ0FBd0IsSUFBSSxDQUFDLENBQUM7WUFDakUsd0JBQXNCLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztZQUN2QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBRTlELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksVUFBVSxDQUFDO1lBQ2hELFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hHLENBQUM7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQS9DQzs7O0dBR0c7QUFDWSw0QkFBSyxHQUEyQyxJQUFJLENBQUM7OzRDQWVqRSxNQUFNLFNBQUMsV0FBVzt5Q0FDbEIsUUFBUSxZQUFJLE1BQU0sU0FBQyxrQkFBa0I7eUNBQ3JDLFFBQVEsWUFBSSxNQUFNLFNBQUMsa0JBQWtCO3lDQUNyQyxRQUFRLFlBQUksTUFBTSxTQUFDLGVBQWU7eUNBQ2xDLFFBQVEsWUFBSSxNQUFNLFNBQUMscUJBQXFCOztBQXhCaEMsc0JBQXNCO0lBRGxDLFVBQVUsRUFBRTtJQXFCUixtQkFBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDbkIsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxtQkFBQSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUN0QyxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0lBQ3RDLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBQ25DLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUE7R0F4QmpDLHNCQUFzQixDQWdEbEM7U0FoRFksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgSW5qZWN0LFxuICBJbmplY3RhYmxlLFxuICBPcHRpb25hbCxcbiAgUExBVEZPUk1fSUQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBsb2FkU2NyaXB0IH0gZnJvbSAnLi9sb2FkLXNjcmlwdCc7XG5pbXBvcnQge1xuICBSRUNBUFRDSEFfQkFTRV9VUkwsXG4gIFJFQ0FQVENIQV9MQU5HVUFHRSxcbiAgUkVDQVBUQ0hBX05PTkNFLFxuICBSRUNBUFRDSEFfVjNfU0lURV9LRVksXG59IGZyb20gJy4vdG9rZW5zJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlY2FwdGNoYUxvYWRlclNlcnZpY2Uge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyByZWFkeTogQmVoYXZpb3JTdWJqZWN0PFJlQ2FwdGNoYVYyLlJlQ2FwdGNoYT4gPSBudWxsO1xuXG4gIHB1YmxpYyByZWFkeTogT2JzZXJ2YWJsZTxSZUNhcHRjaGFWMi5SZUNhcHRjaGE+O1xuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJpdmF0ZSBsYW5ndWFnZTogc3RyaW5nO1xuICAvKiogQGludGVybmFsICovXG4gIHByaXZhdGUgYmFzZVVybDogc3RyaW5nO1xuICAvKiogQGludGVybmFsICovXG4gIHByaXZhdGUgbm9uY2U6IHN0cmluZztcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcml2YXRlIHYzU2l0ZUtleTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHJlYWRvbmx5IHBsYXRmb3JtSWQ6IGFueSxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KFJFQ0FQVENIQV9MQU5HVUFHRSkgbGFuZ3VhZ2U/OiBzdHJpbmcsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChSRUNBUFRDSEFfQkFTRV9VUkwpIGJhc2VVcmw/OiBzdHJpbmcsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChSRUNBUFRDSEFfTk9OQ0UpIG5vbmNlPzogc3RyaW5nLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoUkVDQVBUQ0hBX1YzX1NJVEVfS0VZKSB2M1NpdGVLZXk/OiBzdHJpbmcsXG4gICkge1xuICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZTtcbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICAgIHRoaXMubm9uY2UgPSBub25jZTtcbiAgICB0aGlzLnYzU2l0ZUtleSA9IHYzU2l0ZUtleTtcbiAgICB0aGlzLmluaXQoKTtcbiAgICB0aGlzLnJlYWR5ID0gaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSA/IFJlY2FwdGNoYUxvYWRlclNlcnZpY2UucmVhZHkuYXNPYnNlcnZhYmxlKCkgOiBvZigpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcml2YXRlIGluaXQoKSB7XG4gICAgaWYgKFJlY2FwdGNoYUxvYWRlclNlcnZpY2UucmVhZHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFJlQ2FwdGNoYVYyLlJlQ2FwdGNoYT4obnVsbCk7XG4gICAgICBSZWNhcHRjaGFMb2FkZXJTZXJ2aWNlLnJlYWR5ID0gc3ViamVjdDtcbiAgICAgIGNvbnN0IGxhbmdQYXJhbSA9IHRoaXMubGFuZ3VhZ2UgPyAnJmhsPScgKyB0aGlzLmxhbmd1YWdlIDogJyc7XG5cbiAgICAgIGNvbnN0IHJlbmRlck1vZGUgPSB0aGlzLnYzU2l0ZUtleSB8fCAnZXhwbGljaXQnO1xuICAgICAgbG9hZFNjcmlwdChyZW5kZXJNb2RlLCAoZ3JlY2FwdGNoYSkgPT4gc3ViamVjdC5uZXh0KGdyZWNhcHRjaGEpLCBsYW5nUGFyYW0sIHRoaXMuYmFzZVVybCwgdGhpcy5ub25jZSk7XG4gICAgfVxuICB9XG59XG4iXX0=
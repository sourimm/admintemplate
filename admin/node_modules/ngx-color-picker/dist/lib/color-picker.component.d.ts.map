{"version":3,"file":"color-picker.component.d.ts","sources":["color-picker.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, OnDestroy, AfterViewInit, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { Rgba, Hsla } from './formats';\nimport { SliderPosition } from './helpers';\nimport { ColorPickerService } from './color-picker.service';\nexport declare class ColorPickerComponent implements OnInit, OnDestroy, AfterViewInit {\n    private elRef;\n    private cdRef;\n    private service;\n    private isIE10;\n    private hsva;\n    private width;\n    private height;\n    private outputColor;\n    private initialColor;\n    private fallbackColor;\n    private listenerResize;\n    private listenerMouseDown;\n    private directiveInstance;\n    private sliderH;\n    private sliderDimMax;\n    private directiveElementRef;\n    private dialogArrowSize;\n    private dialogArrowOffset;\n    private useRootViewContainer;\n    show: boolean;\n    hidden: boolean;\n    top: number;\n    left: number;\n    position: string;\n    format: number;\n    slider: SliderPosition;\n    hexText: string;\n    hslaText: Hsla;\n    rgbaText: Rgba;\n    arrowTop: number;\n    selectedColor: string;\n    hueSliderColor: string;\n    alphaSliderColor: string;\n    cpWidth: number;\n    cpHeight: number;\n    cpAlphaChannel: string;\n    cpOutputFormat: string;\n    cpDisableInput: boolean;\n    cpDialogDisplay: string;\n    cpIgnoredElements: any;\n    cpSaveClickOutside: boolean;\n    cpPosition: string;\n    cpPositionOffset: number;\n    cpOKButton: boolean;\n    cpOKButtonText: string;\n    cpOKButtonClass: string;\n    cpCancelButton: boolean;\n    cpCancelButtonText: string;\n    cpCancelButtonClass: string;\n    cpPresetLabel: string;\n    cpPresetColors: string[];\n    cpMaxPresetColorsLength: number;\n    cpPresetEmptyMessage: string;\n    cpPresetEmptyMessageClass: string;\n    cpAddColorButton: boolean;\n    cpAddColorButtonText: string;\n    cpAddColorButtonClass: string;\n    cpRemoveColorButtonClass: string;\n    hueSlider: ElementRef;\n    alphaSlider: ElementRef;\n    dialogElement: ElementRef;\n    constructor(elRef: ElementRef, cdRef: ChangeDetectorRef, service: ColorPickerService);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngAfterViewInit(): void;\n    openDialog(color: any, emit?: boolean): void;\n    closeDialog(): void;\n    setupDialog(instance: any, elementRef: ElementRef, color: any, cpWidth: string, cpHeight: string, cpDialogDisplay: string, cpFallbackColor: string, cpAlphaChannel: string, cpOutputFormat: string, cpDisableInput: boolean, cpIgnoredElements: any, cpSaveClickOutside: boolean, cpUseRootViewContainer: boolean, cpPosition: string, cpPositionOffset: string, cpPositionRelativeToArrow: boolean, cpPresetLabel: string, cpPresetColors: string[], cpMaxPresetColorsLength: number, cpPresetEmptyMessage: string, cpPresetEmptyMessageClass: string, cpOKButton: boolean, cpOKButtonClass: string, cpOKButtonText: string, cpCancelButton: boolean, cpCancelButtonClass: string, cpCancelButtonText: string, cpAddColorButton: boolean, cpAddColorButtonClass: string, cpAddColorButtonText: string, cpRemoveColorButtonClass: string): void;\n    setInitialColor(color: any): void;\n    setPresetConfig(cpPresetLabel: string, cpPresetColors: string[]): void;\n    setColorFromString(value: string, emit?: boolean, update?: boolean): void;\n    onResize(): void;\n    onDragEnd(slider: string): void;\n    onDragStart(slider: string): void;\n    onMouseDown(event: MouseEvent): void;\n    onAcceptColor(event: Event): void;\n    onCancelColor(event: Event): void;\n    onFormatToggle(): void;\n    onColorChange(value: {\n        s: number;\n        v: number;\n        rgX: number;\n        rgY: number;\n    }): void;\n    onHueChange(value: {\n        v: number;\n        rgX: number;\n    }): void;\n    onAlphaChange(value: {\n        v: number;\n        rgX: number;\n    }): void;\n    onHexInput(value: string): void;\n    onRedInput(value: {\n        v: number;\n        rg: number;\n    }): void;\n    onBlueInput(value: {\n        v: number;\n        rg: number;\n    }): void;\n    onGreenInput(value: {\n        v: number;\n        rg: number;\n    }): void;\n    onAlphaInput(value: {\n        v: number;\n        rg: number;\n    }): void;\n    onHueInput(value: {\n        v: number;\n        rg: number;\n    }): void;\n    onLightnessInput(value: {\n        v: number;\n        rg: number;\n    }): void;\n    onSaturationInput(value: {\n        v: number;\n        rg: number;\n    }): void;\n    onAddPresetColor(event: any, value: string): void;\n    onRemovePresetColor(event: any, value: string): void;\n    private openColorPicker();\n    private closeColorPicker();\n    private updateColorPicker(emit?, update?);\n    private setDialogPosition();\n    private createBox(element, offset);\n    private isDescendant(parent, child);\n}\n"]}
import { OnChanges, OnDestroy, EventEmitter, ApplicationRef, ElementRef, ViewContainerRef, Injector, ComponentFactoryResolver } from '@angular/core';
import { ColorPickerService } from './color-picker.service';
import * as ɵngcc0 from '@angular/core';
export declare class ColorPickerDirective implements OnChanges, OnDestroy {
    private injector;
    private cfr;
    private appRef;
    private vcRef;
    private elRef;
    private _service;
    private dialog;
    private dialogCreated;
    private ignoreChanges;
    private cmpRef;
    disabled: boolean;
    colorPicker: string;
    cpWidth: string;
    cpHeight: string;
    cpToggle: boolean;
    cpIgnoredElements: any;
    cpDisableInput: boolean;
    cpAlphaChannel: string;
    cpOutputFormat: string;
    cpFallbackColor: string;
    cpDialogDisplay: string;
    cpSaveClickOutside: boolean;
    cpUseRootViewContainer: boolean;
    cpPosition: string;
    cpPositionOffset: string;
    cpPositionRelativeToArrow: boolean;
    cpOKButton: boolean;
    cpOKButtonText: string;
    cpOKButtonClass: string;
    cpCancelButton: boolean;
    cpCancelButtonText: string;
    cpCancelButtonClass: string;
    cpPresetLabel: string;
    cpPresetColors: string[];
    cpMaxPresetColorsLength: number;
    cpPresetEmptyMessage: string;
    cpPresetEmptyMessageClass: string;
    cpAddColorButton: boolean;
    cpAddColorButtonText: string;
    cpAddColorButtonClass: string;
    cpRemoveColorButtonClass: string;
    cpInputChange: EventEmitter<any>;
    cpToggleChange: EventEmitter<boolean>;
    cpSliderChange: EventEmitter<any>;
    cpSliderDragEnd: EventEmitter<string>;
    cpSliderDragStart: EventEmitter<string>;
    colorPickerOpen: EventEmitter<string>;
    colorPickerClose: EventEmitter<string>;
    colorPickerCancel: EventEmitter<string>;
    colorPickerSelect: EventEmitter<string>;
    colorPickerChange: EventEmitter<string>;
    cpPresetColorsChange: EventEmitter<any>;
    handleClick(event: any): void;
    handleFocus(event: any): void;
    handleInput(event: any): void;
    constructor(injector: Injector, cfr: ComponentFactoryResolver, appRef: ApplicationRef, vcRef: ViewContainerRef, elRef: ElementRef, _service: ColorPickerService);
    ngOnDestroy(): void;
    ngOnChanges(changes: any): void;
    openDialog(): void;
    toggle(value: boolean): void;
    colorChanged(value: string, ignore?: boolean): void;
    colorCanceled(): void;
    colorSelected(value: string): void;
    inputFocus(): void;
    inputChange(value: string): void;
    inputChanged(event: any): void;
    sliderChanged(event: any): void;
    sliderDragEnd(event: any): void;
    sliderDragStart(event: any): void;
    presetColorsChanged(value: any[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColorPickerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ColorPickerDirective, "[colorPicker]", never, { "cpWidth": "cpWidth"; "cpHeight": "cpHeight"; "cpToggle": "cpToggle"; "cpIgnoredElements": "cpIgnoredElements"; "cpDisableInput": "cpDisableInput"; "cpAlphaChannel": "cpAlphaChannel"; "cpOutputFormat": "cpOutputFormat"; "cpFallbackColor": "cpFallbackColor"; "cpDialogDisplay": "cpDialogDisplay"; "cpSaveClickOutside": "cpSaveClickOutside"; "cpUseRootViewContainer": "cpUseRootViewContainer"; "cpPosition": "cpPosition"; "cpPositionOffset": "cpPositionOffset"; "cpPositionRelativeToArrow": "cpPositionRelativeToArrow"; "cpOKButton": "cpOKButton"; "cpOKButtonText": "cpOKButtonText"; "cpOKButtonClass": "cpOKButtonClass"; "cpCancelButton": "cpCancelButton"; "cpCancelButtonText": "cpCancelButtonText"; "cpCancelButtonClass": "cpCancelButtonClass"; "cpPresetLabel": "cpPresetLabel"; "cpMaxPresetColorsLength": "cpMaxPresetColorsLength"; "cpPresetEmptyMessage": "cpPresetEmptyMessage"; "cpPresetEmptyMessageClass": "cpPresetEmptyMessageClass"; "cpAddColorButton": "cpAddColorButton"; "cpAddColorButtonText": "cpAddColorButtonText"; "cpAddColorButtonClass": "cpAddColorButtonClass"; "cpRemoveColorButtonClass": "cpRemoveColorButtonClass"; "colorPicker": "colorPicker"; "disabled": "disabled"; "cpPresetColors": "cpPresetColors"; }, { "cpInputChange": "cpInputChange"; "cpToggleChange": "cpToggleChange"; "cpSliderChange": "cpSliderChange"; "cpSliderDragEnd": "cpSliderDragEnd"; "cpSliderDragStart": "cpSliderDragStart"; "colorPickerOpen": "colorPickerOpen"; "colorPickerClose": "colorPickerClose"; "colorPickerCancel": "colorPickerCancel"; "colorPickerSelect": "colorPickerSelect"; "colorPickerChange": "colorPickerChange"; "cpPresetColorsChange": "cpPresetColorsChange"; }, never>;
}

//# sourceMappingURL=color-picker.directive.d.ts.map
{"ast":null,"code":"import { ReplaySubject } from '../ReplaySubject';\n/**\n * @method shareReplay\n * @owner Observable\n */\n\nexport function shareReplay(bufferSize, windowTime, scheduler) {\n  return function (source) {\n    return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n  };\n}\n\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next: function next(value) {\n          subject.next(value);\n        },\n        error: function error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function complete() {\n          isComplete = true;\n          subject.complete();\n        }\n      });\n    }\n\n    var innerSub = subject.subscribe(this);\n    return function () {\n      refCount--;\n      innerSub.unsubscribe();\n\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/shareReplay.ts"],"names":[],"mappings":"AACA,SAAS,aAAT,QAA8B,kBAA9B;AAKA;;;;;AAIA,OAAM,SAAA,WAAA,CAAyB,UAAzB,EAA8C,UAA9C,EAAmE,SAAnE,EAA4F;AAChG,SAAO,UAAC,MAAD;AAAA,WAA2B,MAAM,CAAC,IAAP,CAAY,mBAAmB,CAAC,UAAD,EAAa,UAAb,EAAyB,SAAzB,CAA/B,CAA3B;AAAA,GAAP;AACD;;AAED,SAAA,mBAAA,CAAgC,UAAhC,EAAqD,UAArD,EAA0E,SAA1E,EAAmG;AACjG,MAAI,OAAJ;AACA,MAAI,QAAQ,GAAG,CAAf;AACA,MAAI,YAAJ;AACA,MAAI,QAAQ,GAAG,KAAf;AACA,MAAI,UAAU,GAAG,KAAjB;AAEA,SAAO,SAAA,oBAAA,CAAmD,MAAnD,EAAwE;AAC7E,IAAA,QAAQ;;AACR,QAAI,CAAC,OAAD,IAAY,QAAhB,EAA0B;AACxB,MAAA,QAAQ,GAAG,KAAX;AACA,MAAA,OAAO,GAAG,IAAI,aAAJ,CAAqB,UAArB,EAAiC,UAAjC,EAA6C,SAA7C,CAAV;AACA,MAAA,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB;AAC9B,QAAA,IAD8B,gBACzB,KADyB,EACpB;AAAI,UAAA,OAAO,CAAC,IAAR,CAAa,KAAb;AAAsB,SADN;AAE9B,QAAA,KAF8B,iBAExB,GAFwB,EAErB;AACP,UAAA,QAAQ,GAAG,IAAX;AACA,UAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACD,SAL6B;AAM9B,QAAA,QAN8B,sBAMtB;AACN,UAAA,UAAU,GAAG,IAAb;AACA,UAAA,OAAO,CAAC,QAAR;AACD;AAT6B,OAAjB,CAAf;AAWD;;AAED,QAAM,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,IAAlB,CAAjB;AAEA,WAAO,YAAK;AACV,MAAA,QAAQ;AACR,MAAA,QAAQ,CAAC,WAAT;;AACA,UAAI,YAAY,IAAI,QAAQ,KAAK,CAA7B,IAAkC,UAAtC,EAAkD;AAChD,QAAA,YAAY,CAAC,WAAb;AACD;AACF,KAND;AAOD,GA3BD;AA4BD","sourcesContent":["import { ReplaySubject } from '../ReplaySubject';\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay(bufferSize, windowTime, scheduler) {\n    return (source) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n    let subject;\n    let refCount = 0;\n    let subscription;\n    let hasError = false;\n    let isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next(value) { subject.next(value); },\n                error(err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete() {\n                    isComplete = true;\n                    subject.complete();\n                },\n            });\n        }\n        const innerSub = subject.subscribe(this);\n        return () => {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && refCount === 0 && isComplete) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n}\n//# sourceMappingURL=shareReplay.js.map"]},"metadata":{},"sourceType":"module"}
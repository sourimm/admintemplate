{"ast":null,"code":"import _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, Input, Output, NgZone, EventEmitter, forwardRef, ElementRef, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Basic typings for the CKEditor5 elements.\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction CKEditorComponent_ng_template_0_Template(rf, ctx) {}\n\nvar CKEditor5;\n\n(function (CKEditor5) {\n  /**\n   * The CKEditor5 editor constructor.\n   * @record\n   */\n  function EditorConstructor() {}\n\n  CKEditor5.EditorConstructor = EditorConstructor;\n  /**\n   * The CKEditor5 editor config.\n   * @record\n   */\n\n  function Config() {}\n\n  CKEditor5.Config = Config;\n  /**\n   * The event object passed to CKEditor5 event callbacks.\n   *\n   * See https://ckeditor.com/docs/ckeditor5/latest/api/module_utils_eventinfo-EventInfo.html\n   * @record\n   * @template EventName\n   */\n\n  function EventInfo() {}\n\n  CKEditor5.EventInfo = EventInfo;\n  /**\n   * The base Editor class.\n   *\n   * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html\n   * @record\n   */\n\n  function BaseEditor() {}\n\n  CKEditor5.BaseEditor = BaseEditor;\n  /**\n   * The CKEditor5 DataApi interface.\n   *\n   * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html.\n   * @record\n   */\n\n  function DataApi() {}\n\n  CKEditor5.DataApi = DataApi;\n  /**\n   * A CKEditor5 editor that implements the\n   * [DataApi interface](https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html).\n   * E.g. the `ClassicEditor`, `InlineEditor`, etc.\n   * @record\n   */\n\n  function Editor() {}\n\n  CKEditor5.Editor = Editor;\n})(CKEditor5 || (CKEditor5 = {}));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar CKEditorComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} elementRef\n   * @param {?} ngZone\n   */\n  function CKEditorComponent(elementRef, ngZone) {\n    _classCallCheck(this, CKEditorComponent);\n\n    /**\n     * The configuration of the editor.\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n     * to learn more.\n     */\n    this.config = {};\n    /**\n     * The initial data of the editor. Useful when not using the ngModel.\n     * See https://angular.io/api/forms/NgModel to learn more.\n     */\n\n    this.data = '';\n    /**\n     * Tag name of the editor component.\n     *\n     * The default tag is 'div'.\n     */\n\n    this.tagName = 'div';\n    /**\n     * Fires when the editor is ready. It corresponds with the `editor#ready`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n     * event.\n     */\n\n    this.ready = new EventEmitter();\n    /**\n     * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n     * event.\n     */\n\n    this.change = new EventEmitter();\n    /**\n     * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n     * event.\n     */\n\n    this.blur = new EventEmitter();\n    /**\n     * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n     * event.\n     */\n\n    this.focus = new EventEmitter();\n    /**\n     * The instance of the editor created by this component.\n     */\n\n    this.editorInstance = null;\n    /**\n     * If the component is read–only before the editor instance is created, it remembers that state,\n     * so the editor can become read–only once it is ready.\n     */\n\n    this.initialIsDisabled = false;\n    /**\n     * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.\n     */\n\n    this.isEditorSettingData = false;\n    this.ngZone = ngZone;\n    this.elementRef = elementRef;\n  }\n  /**\n   * When set `true`, the editor becomes read-only.\n   * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n   * to learn more.\n   * @param {?} isDisabled\n   * @return {?}\n   */\n\n\n  _createClass(CKEditorComponent, [{\n    key: \"ngAfterViewInit\",\n    // Implementing the AfterViewInit interface.\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterViewInit() {\n      var _this = this;\n\n      this.ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this.createEditor();\n      });\n    } // Implementing the OnDestroy interface.\n\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.editorInstance) {\n        this.editorInstance.destroy();\n        this.editorInstance = null;\n      }\n    } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      // This method is called with the `null` value when the form resets.\n      // A component's responsibility is to restore to the initial state.\n      if (value === null) {\n        value = '';\n      } // If already initialized.\n\n\n      if (this.editorInstance) {\n        // The lock mechanism prevents from calling `cvaOnChange()` during changing\n        // the editor state. See #139\n        this.isEditorSettingData = true;\n        this.editorInstance.setData(value);\n        this.isEditorSettingData = false;\n      } // If not, wait for it to be ready; store the data.\n      else {\n          this.data = value; // If the editor element is already available, then update its content.\n          // If the ngModel is used then the editor element should be updated directly here.\n\n          if (this.editorElement) {\n            this.editorElement.innerHTML = this.data;\n          }\n        }\n    } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(callback) {\n      this.cvaOnChange = callback;\n    } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(callback) {\n      this.cvaOnTouched = callback;\n    } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      // If already initialized\n      if (this.editorInstance) {\n        this.editorInstance.isReadOnly = isDisabled;\n      } // If not, wait for it to be ready; store the state.\n      else {\n          this.initialIsDisabled = isDisabled;\n        }\n    }\n    /**\n     * Creates the editor instance, sets initial editor data, then integrates\n     * the editor with the Angular component. This method does not use the `editor.setData()`\n     * because of the issue in the collaboration mode (#6).\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"createEditor\",\n    value: function createEditor() {\n      var _this2 = this;\n\n      /** @type {?} */\n      var element = document.createElement(this.tagName);\n      this.editorElement = element;\n\n      if (this.data && this.config.initialData) {\n        throw new Error('Editor data should be provided either using `config.initialData` or `data` properties.');\n      } // Merge two possible ways of providing data into the `config.initialData` field.\n\n      /** @type {?} */\n\n\n      var config = Object.assign({}, this.config, {\n        initialData: this.config.initialData || this.data || ''\n      });\n      this.elementRef.nativeElement.appendChild(element);\n      return (\n        /** @type {?} */\n        this.editor.create(element, config).then(\n        /**\n        * @param {?} editor\n        * @return {?}\n        */\n        function (editor) {\n          _this2.editorInstance = editor;\n\n          if (_this2.initialIsDisabled) {\n            editor.isReadOnly = _this2.initialIsDisabled;\n          }\n\n          _this2.ngZone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            _this2.ready.emit(editor);\n          });\n\n          _this2.setUpEditorEvents(editor);\n        }).catch(\n        /**\n        * @param {?} err\n        * @return {?}\n        */\n        function (err) {\n          console.error(err.stack);\n        })\n      );\n    }\n    /**\n     * Integrates the editor with the component by attaching related event listeners.\n     * @private\n     * @param {?} editor\n     * @return {?}\n     */\n\n  }, {\n    key: \"setUpEditorEvents\",\n    value: function setUpEditorEvents(editor) {\n      var _this3 = this;\n\n      /** @type {?} */\n      var modelDocument = editor.model.document;\n      /** @type {?} */\n\n      var viewDocument = editor.editing.view.document;\n      modelDocument.on('change:data',\n      /**\n      * @param {?} evt\n      * @return {?}\n      */\n      function (evt) {\n        _this3.ngZone.run(\n        /**\n        * @return {?}\n        */\n        function () {\n          if (_this3.cvaOnChange && !_this3.isEditorSettingData) {\n            /** @type {?} */\n            var data = editor.getData();\n\n            _this3.cvaOnChange(data);\n          }\n\n          _this3.change.emit({\n            event: evt,\n            editor: editor\n          });\n        });\n      });\n      viewDocument.on('focus',\n      /**\n      * @param {?} evt\n      * @return {?}\n      */\n      function (evt) {\n        _this3.ngZone.run(\n        /**\n        * @return {?}\n        */\n        function () {\n          _this3.focus.emit({\n            event: evt,\n            editor: editor\n          });\n        });\n      });\n      viewDocument.on('blur',\n      /**\n      * @param {?} evt\n      * @return {?}\n      */\n      function (evt) {\n        _this3.ngZone.run(\n        /**\n        * @return {?}\n        */\n        function () {\n          if (_this3.cvaOnTouched) {\n            _this3.cvaOnTouched();\n          }\n\n          _this3.blur.emit({\n            event: evt,\n            editor: editor\n          });\n        });\n      });\n    }\n  }, {\n    key: \"disabled\",\n    set: function set(isDisabled) {\n      this.setDisabledState(isDisabled);\n    }\n    /**\n     * @return {?}\n     */\n    ,\n    get: function get() {\n      if (this.editorInstance) {\n        return this.editorInstance.isReadOnly;\n      }\n\n      return this.initialIsDisabled;\n    }\n  }]);\n\n  return CKEditorComponent;\n}();\n\nCKEditorComponent.ɵfac = function CKEditorComponent_Factory(t) {\n  return new (t || CKEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCKEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CKEditorComponent,\n  selectors: [[\"ckeditor\"]],\n  inputs: {\n    config: \"config\",\n    data: \"data\",\n    tagName: \"tagName\",\n    disabled: \"disabled\",\n    editor: \"editor\"\n  },\n  outputs: {\n    ready: \"ready\",\n    change: \"change\",\n    blur: \"blur\",\n    focus: \"focus\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    useExisting: forwardRef(\n    /**\n    * @return {?}\n    */\n    function () {\n      return CKEditorComponent;\n    }),\n    multi: true\n  }])],\n  decls: 1,\n  vars: 0,\n  template: function CKEditorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, CKEditorComponent_ng_template_0_Template, 0, 0, \"ng-template\");\n    }\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nCKEditorComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nCKEditorComponent.propDecorators = {\n  editor: [{\n    type: Input\n  }],\n  config: [{\n    type: Input\n  }],\n  data: [{\n    type: Input\n  }],\n  tagName: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  ready: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CKEditorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ckeditor',\n      template: '<ng-template></ng-template>',\n      // Integration with @angular/forms.\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        useExisting: forwardRef(\n        /**\n        * @return {?}\n        */\n        function () {\n          return CKEditorComponent;\n        }),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    config: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    tagName: [{\n      type: Input\n    }],\n    ready: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    disabled: [{\n      type: Input\n    }],\n    editor: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar CKEditorModule = function CKEditorModule() {\n  _classCallCheck(this, CKEditorModule);\n};\n\nCKEditorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CKEditorModule\n});\nCKEditorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CKEditorModule_Factory(t) {\n    return new (t || CKEditorModule)();\n  },\n  imports: [[FormsModule, CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CKEditorModule, {\n    declarations: function declarations() {\n      return [CKEditorComponent];\n    },\n    imports: function imports() {\n      return [FormsModule, CommonModule];\n    },\n    exports: function exports() {\n      return [CKEditorComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CKEditorModule, [{\n    type: NgModule,\n    args: [{\n      imports: [FormsModule, CommonModule],\n      declarations: [CKEditorComponent],\n      exports: [CKEditorComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { CKEditorComponent, CKEditorModule };","map":{"version":3,"sources":["@ckeditor/ckeditor5-angular/ckeditor.ts","@ckeditor/ckeditor5-angular/ckeditor.component.ts","@ckeditor/ckeditor5-angular/ckeditor.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Basic typings for the CKEditor5 elements.\n */\nexport namespace CKEditor5 {\n\n\t/**\n\t * The CKEditor5 editor constructor.\n\t */\n\texport interface EditorConstructor {\n\t\tcreate( sourceElementOrData: HTMLElement | string, config?: Config ): Promise<Editor>;\n\t}\n\n\t/**\n\t * The CKEditor5 editor config.\n\t */\n\texport interface Config {\n\t\t[ key: string ]: any;\n\t}\n\n\t/**\n\t * The event object passed to CKEditor5 event callbacks.\n\t *\n\t * See https://ckeditor.com/docs/ckeditor5/latest/api/module_utils_eventinfo-EventInfo.html\n\t */\n\texport interface EventInfo<EventName extends string> {\n\t\treadonly name: EventName;\n\t\treadonly path: any[];\n\t\treadonly source: any;\n\t\treturn?: any;\n\n\t\toff(): void;\n\t\tstop(): void;\n\t}\n\n\t/**\n\t * The base Editor class.\n\t *\n\t * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html\n\t */\n\texport interface BaseEditor {\n\t\treadonly commands: any;\n\t\treadonly config: any;\n\t\treadonly conversion: any;\n\t\treadonly data: any;\n\t\treadonly editing: any;\n\t\treadonly keystrokes: any;\n\t\treadonly locale: any;\n\t\treadonly model: any;\n\t\treadonly plugins: any;\n\t\treadonly state: 'initializing' | 'ready' | 'destroyed';\n\n\t\tisReadOnly: boolean;\n\n\t\tdelegate( events: string[] ): any;\n\t\tdestroy(): Promise<void>;\n\t\texecute( commandName: string, ...params: any[] ): any;\n\t\tfire( eventName: string, args?: any ): any;\n\t\tlistenTo( emitter: any, eventName: string, callback: Function, options?: any ): void;\n\t\toff( eventName: string, callback: Function ): void;\n\t\ton( eventName: string, callback: Function, options?: any ): void;\n\t\tonce( eventName: string, callback: Function, options?: any ): void;\n\t\tstopListening( emitter: any, eventName: string, callback: Function ): void;\n\t\tt( ...args: any[] ): void;\n\n\t\t[ property: string ]: any;\n\t}\n\n\t/**\n\t * The CKEditor5 DataApi interface.\n\t *\n\t * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html.\n\t */\n\texport interface DataApi {\n\t\tgetData(): string;\n\t\tsetData( data: string ): void;\n\t}\n\n\t/**\n\t * A CKEditor5 editor that implements the\n\t * [DataApi interface](https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html).\n\t * E.g. the `ClassicEditor`, `InlineEditor`, etc.\n\t */\n\texport interface Editor extends BaseEditor, DataApi {}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport {\n\tComponent,\n\tInput,\n\tOutput,\n\tNgZone,\n\tEventEmitter,\n\tforwardRef,\n\tAfterViewInit, OnDestroy,\n\tElementRef\n} from '@angular/core';\n\nimport {\n\tControlValueAccessor,\n\tNG_VALUE_ACCESSOR\n} from '@angular/forms';\n\nimport { CKEditor5 } from './ckeditor';\n\n@Component( {\n\tselector: 'ckeditor',\n\ttemplate: '<ng-template></ng-template>',\n\n\t// Integration with @angular/forms.\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\t\t\tuseExisting: forwardRef( () => CKEditorComponent ),\n\t\t\tmulti: true,\n\t\t}\n\t]\n} )\nexport class CKEditorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {\n\t/**\n\t * The reference to the DOM element created by the component.\n\t */\n\tprivate elementRef!: ElementRef<HTMLElement>;\n\n\t/**\n\t * The constructor of the editor to be used for the instance of the component.\n\t * It can be e.g. the `ClassicEditorBuild`, `InlineEditorBuild` or some custom editor.\n\t */\n\t@Input() public editor?: CKEditor5.EditorConstructor;\n\n\t/**\n\t * The configuration of the editor.\n\t * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n\t * to learn more.\n\t */\n\t@Input() public config: CKEditor5.Config = {};\n\n\t/**\n\t * The initial data of the editor. Useful when not using the ngModel.\n\t * See https://angular.io/api/forms/NgModel to learn more.\n\t */\n\t@Input() public data = '';\n\n\t/**\n\t * Tag name of the editor component.\n\t *\n\t * The default tag is 'div'.\n\t */\n\t@Input() public tagName = 'div';\n\n\t/**\n\t * When set `true`, the editor becomes read-only.\n\t * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n\t * to learn more.\n\t */\n\t@Input() public set disabled( isDisabled: boolean ) {\n\t\tthis.setDisabledState( isDisabled );\n\t}\n\n\tpublic get disabled() {\n\t\tif ( this.editorInstance ) {\n\t\t\treturn this.editorInstance.isReadOnly;\n\t\t}\n\n\t\treturn this.initialIsDisabled;\n\t}\n\n\t/**\n\t * Fires when the editor is ready. It corresponds with the `editor#ready`\n\t * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n\t * event.\n\t */\n\t@Output() public ready = new EventEmitter<CKEditor5.Editor>();\n\n\t/**\n\t * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n\t * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n\t * event.\n\t */\n\t@Output() public change: EventEmitter<ChangeEvent> = new EventEmitter<ChangeEvent>();\n\n\t/**\n\t * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n\t * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n\t * event.\n\t */\n\t@Output() public blur: EventEmitter<BlurEvent> = new EventEmitter<BlurEvent>();\n\n\t/**\n\t * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n\t * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n\t * event.\n\t */\n\t@Output() public focus: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n\n\t/**\n\t * The instance of the editor created by this component.\n\t */\n\tpublic editorInstance: CKEditor5.Editor | null = null;\n\n\t/**\n\t * If the component is readâonly before the editor instance is created, it remembers that state,\n\t * so the editor can become readâonly once it is ready.\n\t */\n\tprivate initialIsDisabled = false;\n\n\t/**\n\t * An instance of https://angular.io/api/core/NgZone to allow the interaction with the editor\n\t * withing the Angular event loop.\n\t */\n\tprivate ngZone: NgZone;\n\n\t/**\n\t * A callback executed when the content of the editor changes. Part of the\n\t * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n\t *\n\t * Note: Unset unless the component uses the `ngModel`.\n\t */\n\tprivate cvaOnChange?: ( data: string ) => void;\n\n\t/**\n\t * A callback executed when the editor has been blurred. Part of the\n\t * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n\t *\n\t * Note: Unset unless the component uses the `ngModel`.\n\t */\n\tprivate cvaOnTouched?: () => void;\n\n\t/**\n\t * Reference to the source element used by the editor.\n\t */\n\tprivate editorElement?: HTMLElement;\n\n\t/**\n\t * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.\n\t */\n\tprivate isEditorSettingData = false;\n\n\tpublic constructor( elementRef: ElementRef, ngZone: NgZone ) {\n\t\tthis.ngZone = ngZone;\n\t\tthis.elementRef = elementRef;\n\t}\n\n\t// Implementing the AfterViewInit interface.\n\tpublic ngAfterViewInit() {\n\t\tthis.ngZone.runOutsideAngular( () => {\n\t\t\tthis.createEditor();\n\t\t} );\n\t}\n\n\t// Implementing the OnDestroy interface.\n\tpublic ngOnDestroy() {\n\t\tif ( this.editorInstance ) {\n\t\t\tthis.editorInstance.destroy();\n\t\t\tthis.editorInstance = null;\n\t\t}\n\t}\n\n\t// Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\tpublic writeValue( value: string | null ): void {\n\t\t// This method is called with the `null` value when the form resets.\n\t\t// A component's responsibility is to restore to the initial state.\n\t\tif ( value === null ) {\n\t\t\tvalue = '';\n\t\t}\n\n\t\t// If already initialized.\n\t\tif ( this.editorInstance ) {\n\t\t\t// The lock mechanism prevents from calling `cvaOnChange()` during changing\n\t\t\t// the editor state. See #139\n\t\t\tthis.isEditorSettingData = true;\n\t\t\tthis.editorInstance.setData( value );\n\t\t\tthis.isEditorSettingData = false;\n\t\t}\n\t\t// If not, wait for it to be ready; store the data.\n\t\telse {\n\t\t\tthis.data = value;\n\n\t\t\t// If the editor element is already available, then update its content.\n\t\t\t// If the ngModel is used then the editor element should be updated directly here.\n\t\t\tif ( this.editorElement ) {\n\t\t\t\tthis.editorElement.innerHTML = this.data;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\tpublic registerOnChange( callback: ( data: string ) => void ): void {\n\t\tthis.cvaOnChange = callback;\n\t}\n\n\t// Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\tpublic registerOnTouched( callback: () => void ): void {\n\t\tthis.cvaOnTouched = callback;\n\t}\n\n\t// Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\tpublic setDisabledState( isDisabled: boolean ): void {\n\t\t// If already initialized\n\t\tif ( this.editorInstance ) {\n\t\t\tthis.editorInstance.isReadOnly = isDisabled;\n\t\t}\n\t\t// If not, wait for it to be ready; store the state.\n\t\telse {\n\t\t\tthis.initialIsDisabled = isDisabled;\n\t\t}\n\t}\n\n\t/**\n\t * Creates the editor instance, sets initial editor data, then integrates\n\t * the editor with the Angular component. This method does not use the `editor.setData()`\n\t * because of the issue in the collaboration mode (#6).\n\t */\n\tprivate createEditor(): Promise<void> {\n\t\tconst element = document.createElement( this.tagName );\n\t\tthis.editorElement = element;\n\n\t\tif ( this.data && this.config.initialData ) {\n\t\t\tthrow new Error( 'Editor data should be provided either using `config.initialData` or `data` properties.' );\n\t\t}\n\n\t\t// Merge two possible ways of providing data into the `config.initialData` field.\n\t\tconst config = {\n\t\t\t...this.config,\n\t\t\tinitialData: this.config.initialData || this.data || ''\n\t\t};\n\n\t\tthis.elementRef.nativeElement.appendChild( element );\n\n\t\treturn this.editor!.create( element, config )\n\t\t\t.then( editor => {\n\t\t\t\tthis.editorInstance = editor;\n\n\t\t\t\tif ( this.initialIsDisabled ) {\n\t\t\t\t\teditor.isReadOnly = this.initialIsDisabled;\n\t\t\t\t}\n\n\t\t\t\tthis.ngZone.run( () => {\n\t\t\t\t\tthis.ready.emit( editor );\n\t\t\t\t} );\n\n\t\t\t\tthis.setUpEditorEvents( editor );\n\t\t\t} )\n\t\t\t.catch( ( err: Error ) => {\n\t\t\t\tconsole.error( err.stack );\n\t\t\t} );\n\t}\n\n\t/**\n\t * Integrates the editor with the component by attaching related event listeners.\n\t */\n\tprivate setUpEditorEvents( editor: CKEditor5.Editor ): void {\n\t\tconst modelDocument = editor.model.document;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tmodelDocument.on( 'change:data', ( evt: CKEditor5.EventInfo<'change:data'> ) => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tif ( this.cvaOnChange && !this.isEditorSettingData ) {\n\t\t\t\t\tconst data = editor.getData();\n\n\t\t\t\t\tthis.cvaOnChange( data );\n\t\t\t\t}\n\n\t\t\t\tthis.change.emit( { event: evt, editor } );\n\t\t\t} );\n\t\t} );\n\n\t\tviewDocument.on( 'focus', ( evt: CKEditor5.EventInfo<'focus'> ) => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.focus.emit( { event: evt, editor } );\n\t\t\t} );\n\t\t} );\n\n\t\tviewDocument.on( 'blur', ( evt: CKEditor5.EventInfo<'blur'> ) => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tif ( this.cvaOnTouched ) {\n\t\t\t\t\tthis.cvaOnTouched();\n\t\t\t\t}\n\n\t\t\t\tthis.blur.emit( { event: evt, editor } );\n\t\t\t} );\n\t\t} );\n\t}\n}\n\nexport interface BlurEvent {\n\tevent: CKEditor5.EventInfo<'blur'>;\n\teditor: CKEditor5.Editor;\n}\n\nexport interface FocusEvent {\n\tevent: CKEditor5.EventInfo<'focus'>;\n\teditor: CKEditor5.Editor;\n}\n\nexport interface ChangeEvent {\n\tevent: CKEditor5.EventInfo<'change:data'>;\n\teditor: CKEditor5.Editor;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CKEditorComponent } from './ckeditor.component';\n\n@NgModule( {\n\timports: [ FormsModule, CommonModule ],\n\tdeclarations: [ CKEditorComponent ],\n\texports: [ CKEditorComponent ]\n} )\nexport class CKEditorModule {}\n"]},"metadata":{},"sourceType":"module"}
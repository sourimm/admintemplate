{"ast":null,"code":"import _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, Input, Output, NgZone, EventEmitter, forwardRef, ElementRef, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Basic typings for the CKEditor5 elements.\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction CKEditorComponent_ng_template_0_Template(rf, ctx) {}\n\nvar CKEditor5;\n\n(function (CKEditor5) {\n  /**\n   * The CKEditor5 editor constructor.\n   * @record\n   */\n  function EditorConstructor() {}\n\n  CKEditor5.EditorConstructor = EditorConstructor;\n  /**\n   * The CKEditor5 editor config.\n   * @record\n   */\n\n  function Config() {}\n\n  CKEditor5.Config = Config;\n  /**\n   * The event object passed to CKEditor5 event callbacks.\n   *\n   * See https://ckeditor.com/docs/ckeditor5/latest/api/module_utils_eventinfo-EventInfo.html\n   * @record\n   * @template EventName\n   */\n\n  function EventInfo() {}\n\n  CKEditor5.EventInfo = EventInfo;\n  /**\n   * The base Editor class.\n   *\n   * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html\n   * @record\n   */\n\n  function BaseEditor() {}\n\n  CKEditor5.BaseEditor = BaseEditor;\n  /**\n   * The CKEditor5 DataApi interface.\n   *\n   * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html.\n   * @record\n   */\n\n  function DataApi() {}\n\n  CKEditor5.DataApi = DataApi;\n  /**\n   * A CKEditor5 editor that implements the\n   * [DataApi interface](https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html).\n   * E.g. the `ClassicEditor`, `InlineEditor`, etc.\n   * @record\n   */\n\n  function Editor() {}\n\n  CKEditor5.Editor = Editor;\n})(CKEditor5 || (CKEditor5 = {}));\n\nvar CKEditorComponent = /*@__PURE__*/function () {\n  var CKEditorComponent = /*#__PURE__*/function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     */\n    function CKEditorComponent(elementRef, ngZone) {\n      _classCallCheck(this, CKEditorComponent);\n\n      /**\n       * The configuration of the editor.\n       * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n       * to learn more.\n       */\n      this.config = {};\n      /**\n       * The initial data of the editor. Useful when not using the ngModel.\n       * See https://angular.io/api/forms/NgModel to learn more.\n       */\n\n      this.data = '';\n      /**\n       * Tag name of the editor component.\n       *\n       * The default tag is 'div'.\n       */\n\n      this.tagName = 'div';\n      /**\n       * Fires when the editor is ready. It corresponds with the `editor#ready`\n       * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n       * event.\n       */\n\n      this.ready = new EventEmitter();\n      /**\n       * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n       * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n       * event.\n       */\n\n      this.change = new EventEmitter();\n      /**\n       * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n       * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n       * event.\n       */\n\n      this.blur = new EventEmitter();\n      /**\n       * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n       * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n       * event.\n       */\n\n      this.focus = new EventEmitter();\n      /**\n       * The instance of the editor created by this component.\n       */\n\n      this.editorInstance = null;\n      /**\n       * If the component is read–only before the editor instance is created, it remembers that state,\n       * so the editor can become read–only once it is ready.\n       */\n\n      this.initialIsDisabled = false;\n      /**\n       * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.\n       */\n\n      this.isEditorSettingData = false;\n      this.ngZone = ngZone;\n      this.elementRef = elementRef;\n    }\n    /**\n     * When set `true`, the editor becomes read-only.\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n     * to learn more.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n\n    _createClass(CKEditorComponent, [{\n      key: \"ngAfterViewInit\",\n      // Implementing the AfterViewInit interface.\n\n      /**\n       * @return {?}\n       */\n      value: function ngAfterViewInit() {\n        var _this = this;\n\n        this.ngZone.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        function () {\n          _this.createEditor();\n        });\n      } // Implementing the OnDestroy interface.\n\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.editorInstance) {\n          this.editorInstance.destroy();\n          this.editorInstance = null;\n        }\n      } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        // This method is called with the `null` value when the form resets.\n        // A component's responsibility is to restore to the initial state.\n        if (value === null) {\n          value = '';\n        } // If already initialized.\n\n\n        if (this.editorInstance) {\n          // The lock mechanism prevents from calling `cvaOnChange()` during changing\n          // the editor state. See #139\n          this.isEditorSettingData = true;\n          this.editorInstance.setData(value);\n          this.isEditorSettingData = false;\n        } // If not, wait for it to be ready; store the data.\n        else {\n            this.data = value; // If the editor element is already available, then update its content.\n            // If the ngModel is used then the editor element should be updated directly here.\n\n            if (this.editorElement) {\n              this.editorElement.innerHTML = this.data;\n            }\n          }\n      } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n      /**\n       * @param {?} callback\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(callback) {\n        this.cvaOnChange = callback;\n      } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n      /**\n       * @param {?} callback\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(callback) {\n        this.cvaOnTouched = callback;\n      } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n      /**\n       * @param {?} isDisabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        // If already initialized\n        if (this.editorInstance) {\n          this.editorInstance.isReadOnly = isDisabled;\n        } // If not, wait for it to be ready; store the state.\n        else {\n            this.initialIsDisabled = isDisabled;\n          }\n      }\n      /**\n       * Creates the editor instance, sets initial editor data, then integrates\n       * the editor with the Angular component. This method does not use the `editor.setData()`\n       * because of the issue in the collaboration mode (#6).\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"createEditor\",\n      value: function createEditor() {\n        var _this2 = this;\n\n        /** @type {?} */\n        var element = document.createElement(this.tagName);\n        this.editorElement = element;\n\n        if (this.data && this.config.initialData) {\n          throw new Error('Editor data should be provided either using `config.initialData` or `data` properties.');\n        } // Merge two possible ways of providing data into the `config.initialData` field.\n\n        /** @type {?} */\n\n\n        var config = Object.assign({}, this.config, {\n          initialData: this.config.initialData || this.data || ''\n        });\n        this.elementRef.nativeElement.appendChild(element);\n        return (\n          /** @type {?} */\n          this.editor.create(element, config).then(\n          /**\n          * @param {?} editor\n          * @return {?}\n          */\n\n          /**\n          * @param {?} editor\n          * @return {?}\n          */\n          function (editor) {\n            _this2.editorInstance = editor;\n\n            if (_this2.initialIsDisabled) {\n              editor.isReadOnly = _this2.initialIsDisabled;\n            }\n\n            _this2.ngZone.run(\n            /**\n            * @return {?}\n            */\n            function () {\n              _this2.ready.emit(editor);\n            });\n\n            _this2.setUpEditorEvents(editor);\n          }).catch(\n          /**\n          * @param {?} err\n          * @return {?}\n          */\n          function (err) {\n            console.error(err.stack);\n          })\n        );\n      }\n      /**\n       * Integrates the editor with the component by attaching related event listeners.\n       * @private\n       * @param {?} editor\n       * @return {?}\n       */\n\n    }, {\n      key: \"setUpEditorEvents\",\n      value: function setUpEditorEvents(editor) {\n        var _this3 = this;\n\n        /** @type {?} */\n        var modelDocument = editor.model.document;\n        /** @type {?} */\n\n        var viewDocument = editor.editing.view.document;\n        modelDocument.on('change:data',\n        /**\n        * @param {?} evt\n        * @return {?}\n        */\n        function (evt) {\n          _this3.ngZone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            if (_this3.cvaOnChange && !_this3.isEditorSettingData) {\n              /** @type {?} */\n              var data = editor.getData();\n\n              _this3.cvaOnChange(data);\n            }\n\n            _this3.change.emit({\n              event: evt,\n              editor: editor\n            });\n          });\n        });\n        viewDocument.on('focus',\n        /**\n        * @param {?} evt\n        * @return {?}\n        */\n        function (evt) {\n          _this3.ngZone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            _this3.focus.emit({\n              event: evt,\n              editor: editor\n            });\n          });\n        });\n        viewDocument.on('blur',\n        /**\n        * @param {?} evt\n        * @return {?}\n        */\n        function (evt) {\n          _this3.ngZone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            if (_this3.cvaOnTouched) {\n              _this3.cvaOnTouched();\n            }\n\n            _this3.blur.emit({\n              event: evt,\n              editor: editor\n            });\n          });\n        });\n      }\n    }, {\n      key: \"disabled\",\n      set: function set(isDisabled) {\n        this.setDisabledState(isDisabled);\n      }\n      /**\n       * @return {?}\n       */\n      ,\n      get: function get() {\n        if (this.editorInstance) {\n          return this.editorInstance.isReadOnly;\n        }\n\n        return this.initialIsDisabled;\n      }\n    }]);\n\n    return CKEditorComponent;\n  }();\n\n  CKEditorComponent.ɵfac = function CKEditorComponent_Factory(t) {\n    return new (t || CKEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CKEditorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CKEditorComponent,\n    selectors: [[\"ckeditor\"]],\n    inputs: {\n      config: \"config\",\n      data: \"data\",\n      tagName: \"tagName\",\n      disabled: \"disabled\",\n      editor: \"editor\"\n    },\n    outputs: {\n      ready: \"ready\",\n      change: \"change\",\n      blur: \"blur\",\n      focus: \"focus\"\n    },\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      useExisting: /*@__PURE__*/forwardRef(\n      /**\n      * @return {?}\n      */\n      function () {\n        return CKEditorComponent;\n      }),\n      multi: true\n    }])],\n    decls: 1,\n    vars: 0,\n    template: function CKEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, CKEditorComponent_ng_template_0_Template, 0, 0, \"ng-template\");\n      }\n    },\n    encapsulation: 2\n  });\n  return CKEditorComponent;\n}();\n\nvar CKEditorModule = /*@__PURE__*/function () {\n  var CKEditorModule = function CKEditorModule() {\n    _classCallCheck(this, CKEditorModule);\n  };\n\n  CKEditorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CKEditorModule\n  });\n  CKEditorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function CKEditorModule_Factory(t) {\n      return new (t || CKEditorModule)();\n    },\n    imports: [[FormsModule, CommonModule]]\n  });\n  return CKEditorModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CKEditorModule, {\n    declarations: function declarations() {\n      return [CKEditorComponent];\n    },\n    imports: function imports() {\n      return [FormsModule, CommonModule];\n    },\n    exports: function exports() {\n      return [CKEditorComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { CKEditorComponent, CKEditorModule };","map":null,"metadata":{},"sourceType":"module"}
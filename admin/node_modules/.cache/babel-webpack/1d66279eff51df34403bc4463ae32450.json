{"ast":null,"code":"import _assertThisInitialized from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\n\nexport function distinct(keySelector, flushes) {\n  return function (source) {\n    return source.lift(new DistinctOperator(keySelector, flushes));\n  };\n}\n\nvar DistinctOperator = /*#__PURE__*/function () {\n  function DistinctOperator(keySelector, flushes) {\n    _classCallCheck(this, DistinctOperator);\n\n    this.keySelector = keySelector;\n    this.flushes = flushes;\n  }\n\n  _createClass(DistinctOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    }\n  }]);\n\n  return DistinctOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nexport var DistinctSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(DistinctSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(DistinctSubscriber);\n\n  function DistinctSubscriber(destination, keySelector, flushes) {\n    var _this;\n\n    _classCallCheck(this, DistinctSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.keySelector = keySelector;\n    _this.values = new Set();\n\n    if (flushes) {\n      _this.add(subscribeToResult(_assertThisInitialized(_this), flushes));\n    }\n\n    return _this;\n  }\n\n  _createClass(DistinctSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      this.values.clear();\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(error, innerSub) {\n      this._error(error);\n    }\n  }, {\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.keySelector) {\n        this._useKeySelector(value);\n      } else {\n        this._finalizeNext(value, value);\n      }\n    }\n  }, {\n    key: \"_useKeySelector\",\n    value: function _useKeySelector(value) {\n      var key;\n      var destination = this.destination;\n\n      try {\n        key = this.keySelector(value);\n      } catch (err) {\n        destination.error(err);\n        return;\n      }\n\n      this._finalizeNext(key, value);\n    }\n  }, {\n    key: \"_finalizeNext\",\n    value: function _finalizeNext(key, value) {\n      var values = this.values;\n\n      if (!values.has(key)) {\n        values.add(key);\n        this.destination.next(value);\n      }\n    }\n  }]);\n\n  return DistinctSubscriber;\n}(OuterSubscriber);","map":null,"metadata":{},"sourceType":"module"}
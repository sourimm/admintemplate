{"ast":null,"code":"import _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport var UnsubscriptionError = /*#__PURE__*/function (_Error) {\n  _inherits(UnsubscriptionError, _Error);\n\n  var _super = _createSuper(UnsubscriptionError);\n\n  function UnsubscriptionError(errors) {\n    var _this;\n\n    _classCallCheck(this, UnsubscriptionError);\n\n    _this = _super.call(this, errors ? \"\".concat(errors.length, \" errors occurred during unsubscription:\\n  \").concat(errors.map(function (err, i) {\n      return \"\".concat(i + 1, \") \").concat(err.toString());\n    }).join('\\n  ')) : '');\n    _this.errors = errors;\n    _this.name = 'UnsubscriptionError';\n    Object.setPrototypeOf(_assertThisInitialized(_this), UnsubscriptionError.prototype);\n    return _this;\n  }\n\n  return UnsubscriptionError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));","map":{"version":3,"sources":["../../../src/internal/util/UnsubscriptionError.ts"],"names":[],"mappings":";;;;;;AAAA;;;;AAIA,WAAM,mBAAN;AAAA;;AAAA;;AACE,+BAAmB,MAAnB,EAAgC;AAAA;;AAAA;;AAC9B,8BAAM,MAAM,aACP,MAAM,CAAC,MADA,wDAEZ,MAAM,CAAC,GAAP,CAAW,UAAC,GAAD,EAAM,CAAN;AAAA,uBAAe,CAAC,GAAG,CAAnB,eAAyB,GAAG,CAAC,QAAJ,EAAzB;AAAA,KAAX,EAAsD,IAAtD,CAA2D,MAA3D,CAFY,IAE2D,EAFvE;AADiB,UAAA,MAAA,GAAA,MAAA;AAIjB,UAAK,IAAL,GAAY,qBAAZ;AACC,IAAA,MAAc,CAAC,cAAf,gCAAoC,mBAAmB,CAAC,SAAxD;AAL6B;AAM/B;;AAPH;AAAA,iCAAyC,KAAzC","sourcesContent":["/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n    constructor(errors) {\n        super(errors ?\n            `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n        this.errors = errors;\n        this.name = 'UnsubscriptionError';\n        Object.setPrototypeOf(this, UnsubscriptionError.prototype);\n    }\n}\n//# sourceMappingURL=UnsubscriptionError.js.map"]},"metadata":{},"sourceType":"module"}
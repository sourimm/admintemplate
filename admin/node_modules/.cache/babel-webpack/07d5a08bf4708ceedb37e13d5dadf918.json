{"ast":null,"code":"// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n/**\n * A Toast component shows message with title and close button.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from './shared';\n\nfunction ToastComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵlistener(\"click\", function ToastComponent_div_1_Template_div_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.close($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ToastComponent_div_2_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 8);\n    ɵngcc0.ɵɵpipe(1, \"safeHtml\");\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r4.toast.title), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ToastComponent_div_2_br_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"br\");\n  }\n}\n\nfunction ToastComponent_div_2_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 9);\n    ɵngcc0.ɵɵpipe(1, \"safeHtml\");\n  }\n\n  if (rf & 2) {\n    var ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"innerHtml\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r6.toast.msg), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ToastComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵtemplate(1, ToastComponent_div_2_span_1_Template, 2, 3, \"span\", 5);\n    ɵngcc0.ɵɵtemplate(2, ToastComponent_div_2_br_2_Template, 1, 0, \"br\", 6);\n    ɵngcc0.ɵɵtemplate(3, ToastComponent_div_2_span_3_Template, 2, 3, \"span\", 7);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.toast.title);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.toast.title && ctx_r1.toast.msg);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.toast.msg);\n  }\n}\n\nvar _c0 = function _c0(a0, a1) {\n  return [a0, a1];\n};\n\nvar ToastComponent = function () {\n  function ToastComponent() {\n    this.closeToastEvent = new EventEmitter();\n  }\n  /**\n   * Event handler invokes when user clicks on close button.\n   * This method emit new event into ToastyContainer to close it.\n   */\n\n\n  ToastComponent.prototype.close = function ($event) {\n    $event.preventDefault();\n    this.closeToastEvent.next(this.toast);\n  };\n  /** @nocollapse */\n\n\n  ToastComponent.ctorParameters = function () {\n    return [];\n  };\n\n  ToastComponent.propDecorators = {\n    'toast': [{\n      type: Input\n    }],\n    'closeToastEvent': [{\n      type: Output,\n      args: ['closeToast']\n    }]\n  };\n\n  ToastComponent.ɵfac = function ToastComponent_Factory(t) {\n    return new (t || ToastComponent)();\n  };\n\n  ToastComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: ToastComponent,\n    selectors: [[\"ng2-toast\"]],\n    inputs: {\n      toast: \"toast\"\n    },\n    outputs: {\n      closeToastEvent: \"closeToast\"\n    },\n    decls: 3,\n    vars: 6,\n    consts: [[1, \"toast\", 3, \"ngClass\"], [\"class\", \"close-button\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"toast-text\", 4, \"ngIf\"], [1, \"close-button\", 3, \"click\"], [1, \"toast-text\"], [\"class\", \"toast-title\", 3, \"innerHTML\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"toast-msg\", 3, \"innerHtml\", 4, \"ngIf\"], [1, \"toast-title\", 3, \"innerHTML\"], [1, \"toast-msg\", 3, \"innerHtml\"]],\n    template: function ToastComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, ToastComponent_div_1_Template, 1, 0, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, ToastComponent_div_2_Template, 4, 3, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(3, _c0, ctx.toast.type, ctx.toast.theme));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.toast.showClose);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.toast.title || ctx.toast.msg);\n      }\n    },\n    directives: [ɵngcc1.NgClass, ɵngcc1.NgIf],\n    pipes: [ɵngcc2.SafeHtmlPipe],\n    encapsulation: 2\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(ToastComponent, [{\n      type: Component,\n      args: [{\n        selector: 'ng2-toast',\n        template: \"\\n        <div class=\\\"toast\\\" [ngClass]=\\\"[toast.type, toast.theme]\\\">\\n            <div *ngIf=\\\"toast.showClose\\\" class=\\\"close-button\\\" (click)=\\\"close($event)\\\"></div>\\n            <div *ngIf=\\\"toast.title || toast.msg\\\" class=\\\"toast-text\\\">\\n                <span *ngIf=\\\"toast.title\\\" class=\\\"toast-title\\\" [innerHTML]=\\\"toast.title | safeHtml\\\"></span>\\n                <br *ngIf=\\\"toast.title && toast.msg\\\" />\\n                <span *ngIf=\\\"toast.msg\\\" class=\\\"toast-msg\\\" [innerHtml]=\\\"toast.msg | safeHtml\\\"></span>\\n            </div>\\n        </div>\"\n      }]\n    }], function () {\n      return [];\n    }, {\n      closeToastEvent: [{\n        type: Output,\n        args: ['closeToast']\n      }],\n      toast: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return ToastComponent;\n}();\n\nexport { ToastComponent };","map":{"version":3,"sources":["toast.component.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA,SAAA,SAAA,EAAA,KAAA,EAAA,MAAA,EAAA,YAAA,QAAA,eAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAA,cAAA,GAAA,YAAA;AACA,WAAA,cAAA,GAAA;AACA,SAAA,eAAA,GAAA,IAAA,YAAA,EAAA;AACA;AACA;;;;;;AAIA,EAAA,cAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAA,MAAA,EAAA;AACA,IAAA,MAAA,CAAA,cAAA;AACA,SAAA,eAAA,CAAA,IAAA,CAAA,KAAA,KAAA;AACA,GAHA;AAUA;;;AACA,EAAA,cAAA,CAAA,cAAA,GAAA,YAAA;AAAA,WAAA,EAAA;AAAA,GAAA;;AACA,EAAA,cAAA,CAAA,cAAA,GAAA;AACA,aAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA,CADA;AAEA,uBAAA,CAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,IAAA,EAAA,CAAA,YAAA;AAAA,KAAA;AAFA,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGM,G;;AACN,SAAA,cAAA;AACA,CAzBA,EAAA;;AA0BA,SAAA,cAAA","sourcesContent":["// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n/**\n * A Toast component shows message with title and close button.\n */\nvar ToastComponent = (function () {\n    function ToastComponent() {\n        this.closeToastEvent = new EventEmitter();\n    }\n    /**\n     * Event handler invokes when user clicks on close button.\n     * This method emit new event into ToastyContainer to close it.\n     */\n    ToastComponent.prototype.close = function ($event) {\n        $event.preventDefault();\n        this.closeToastEvent.next(this.toast);\n    };\n    ToastComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'ng2-toast',\n                    template: \"\\n        <div class=\\\"toast\\\" [ngClass]=\\\"[toast.type, toast.theme]\\\">\\n            <div *ngIf=\\\"toast.showClose\\\" class=\\\"close-button\\\" (click)=\\\"close($event)\\\"></div>\\n            <div *ngIf=\\\"toast.title || toast.msg\\\" class=\\\"toast-text\\\">\\n                <span *ngIf=\\\"toast.title\\\" class=\\\"toast-title\\\" [innerHTML]=\\\"toast.title | safeHtml\\\"></span>\\n                <br *ngIf=\\\"toast.title && toast.msg\\\" />\\n                <span *ngIf=\\\"toast.msg\\\" class=\\\"toast-msg\\\" [innerHtml]=\\\"toast.msg | safeHtml\\\"></span>\\n            </div>\\n        </div>\"\n                },] },\n    ];\n    /** @nocollapse */\n    ToastComponent.ctorParameters = function () { return []; };\n    ToastComponent.propDecorators = {\n        'toast': [{ type: Input },],\n        'closeToastEvent': [{ type: Output, args: ['closeToast',] },],\n    };\n    return ToastComponent;\n}());\nexport { ToastComponent };\n"]},"metadata":{},"sourceType":"module"}
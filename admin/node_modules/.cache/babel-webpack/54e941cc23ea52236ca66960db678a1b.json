{"ast":null,"code":"// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\nimport { Component, Input } from '@angular/core';\nimport { isFunction } from './toasty.utils';\nimport { ToastyService, ToastyConfig, ToastyEventType } from './toasty.service';\n/**\n * Toasty is container for Toast components\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './toasty.service';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from './toast.component';\n\nfunction ToastyComponent_ng2_toast_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"ng2-toast\", 2);\n    ɵngcc0.ɵɵlistener(\"closeToast\", function ToastyComponent_ng2_toast_1_Template_ng2_toast_closeToast_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var toast_r1 = ctx.$implicit;\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.closeToast(toast_r1);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var toast_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"toast\", toast_r1);\n  }\n}\n\nvar _c0 = function _c0(a0) {\n  return [a0];\n};\n\nvar ToastyComponent = function () {\n  function ToastyComponent(config, toastyService) {\n    this.config = config;\n    this.toastyService = toastyService;\n    this._position = ''; // The storage for toasts.\n\n    this.toasts = []; // Initialise position\n\n    this.position = '';\n  }\n\n  Object.defineProperty(ToastyComponent.prototype, \"position\", {\n    get: function get() {\n      return this._position;\n    },\n    // The window position where the toast pops up. Possible values:\n    // - bottom-right (default value from ToastConfig)\n    // - bottom-left\n    // - top-right\n    // - top-left\n    // - top-center\n    // - bottom-center\n    // - center-center\n    set: function set(value) {\n      if (value) {\n        var notFound = true;\n\n        for (var i = 0; i < ToastyComponent.POSITIONS.length; i++) {\n          if (ToastyComponent.POSITIONS[i] === value) {\n            notFound = false;\n            break;\n          }\n        }\n\n        if (notFound) {\n          // Position was wrong - clear it here to use the one from config.\n          value = this.config.position;\n        }\n      } else {\n        value = this.config.position;\n      }\n\n      this._position = 'toasty-position-' + value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\n   * first time, and before any of its children have been checked. It is invoked only once when the\n   * directive is instantiated.\n   */\n\n  ToastyComponent.prototype.ngOnInit = function () {\n    var _this = this; // We listen events from our service\n\n\n    this.toastyService.events.subscribe(function (event) {\n      if (event.type === ToastyEventType.ADD) {\n        // Add the new one\n        var toast = event.value;\n\n        _this.add(toast);\n      } else if (event.type === ToastyEventType.CLEAR) {\n        // Clear the one by number\n        var id = event.value;\n\n        _this.clear(id);\n      } else if (event.type === ToastyEventType.CLEAR_ALL) {\n        // Lets clear all toasts\n        _this.clearAll();\n      }\n    });\n  };\n  /**\n   * Event listener of 'closeToast' event comes from ToastyComponent.\n   * This method removes ToastComponent assosiated with this Toast.\n   */\n\n\n  ToastyComponent.prototype.closeToast = function (toast) {\n    this.clear(toast.id);\n  };\n  /**\n   * Add new Toast\n   */\n\n\n  ToastyComponent.prototype.add = function (toast) {\n    // If we've gone over our limit, remove the earliest\n    // one from the array\n    if (this.toasts.length >= this.config.limit) {\n      this.toasts.shift();\n    } // Add toasty to array\n\n\n    this.toasts.push(toast); //\n    // If there's a timeout individually or globally,\n    // set the toast to timeout\n\n    if (toast.timeout) {\n      this._setTimeout(toast);\n    }\n  };\n  /**\n   * Clear individual toast by id\n   * @param id is unique identifier of Toast\n   */\n\n\n  ToastyComponent.prototype.clear = function (id) {\n    var _this = this;\n\n    if (id) {\n      this.toasts.forEach(function (value, key) {\n        if (value.id === id) {\n          if (value.onRemove && isFunction(value.onRemove)) {\n            value.onRemove.call(_this, value);\n          }\n\n          _this.toasts.splice(key, 1);\n        }\n      });\n    } else {\n      throw new Error('Please provide id of Toast to close');\n    }\n  };\n  /**\n   * Clear all toasts\n   */\n\n\n  ToastyComponent.prototype.clearAll = function () {\n    var _this = this;\n\n    this.toasts.forEach(function (value, key) {\n      if (value.onRemove && isFunction(value.onRemove)) {\n        value.onRemove.call(_this, value);\n      }\n    });\n    this.toasts = [];\n  };\n  /**\n   * Custom setTimeout function for specific setTimeouts on individual toasts.\n   */\n\n\n  ToastyComponent.prototype._setTimeout = function (toast) {\n    var _this = this;\n\n    window.setTimeout(function () {\n      _this.clear(toast.id);\n    }, toast.timeout);\n  };\n  /**\n   * Set of constants defins position of Toasty on the page.\n   */\n\n\n  ToastyComponent.POSITIONS = ['bottom-right', 'bottom-left', 'top-right', 'top-left', 'top-center', 'bottom-center', 'center-center'];\n  /** @nocollapse */\n\n  ToastyComponent.ctorParameters = function () {\n    return [{\n      type: ToastyConfig\n    }, {\n      type: ToastyService\n    }];\n  };\n\n  ToastyComponent.propDecorators = {\n    'position': [{\n      type: Input\n    }]\n  };\n\n  ToastyComponent.ɵfac = function ToastyComponent_Factory(t) {\n    return new (t || ToastyComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ToastyConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ToastyService));\n  };\n\n  ToastyComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: ToastyComponent,\n    selectors: [[\"ng2-toasty\"]],\n    inputs: {\n      position: \"position\"\n    },\n    decls: 2,\n    vars: 4,\n    consts: [[\"id\", \"toasty\", 3, \"ngClass\"], [3, \"toast\", \"closeToast\", 4, \"ngFor\", \"ngForOf\"], [3, \"toast\", \"closeToast\"]],\n    template: function ToastyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, ToastyComponent_ng2_toast_1_Template, 1, 1, \"ng2-toast\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx.position));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.toasts);\n      }\n    },\n    directives: [ɵngcc2.NgClass, ɵngcc2.NgForOf, ɵngcc3.ToastComponent],\n    encapsulation: 2\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(ToastyComponent, [{\n      type: Component,\n      args: [{\n        selector: 'ng2-toasty',\n        template: \"\\n    <div id=\\\"toasty\\\" [ngClass]=\\\"[position]\\\">\\n        <ng2-toast *ngFor=\\\"let toast of toasts\\\" [toast]=\\\"toast\\\" (closeToast)=\\\"closeToast(toast)\\\"></ng2-toast>\\n    </div>\"\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc1.ToastyConfig\n      }, {\n        type: ɵngcc1.ToastyService\n      }];\n    }, {\n      position: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return ToastyComponent;\n}();\n\nexport { ToastyComponent };","map":{"version":3,"sources":["toasty.component.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\nimport { Component, Input } from '@angular/core';\nimport { isFunction } from './toasty.utils';\nimport { ToastyService, ToastyConfig, ToastyEventType } from './toasty.service';\n/**\n * Toasty is container for Toast components\n */\nvar ToastyComponent = (function () {\n    function ToastyComponent(config, toastyService) {\n        this.config = config;\n        this.toastyService = toastyService;\n        this._position = '';\n        // The storage for toasts.\n        this.toasts = [];\n        // Initialise position\n        this.position = '';\n    }\n    Object.defineProperty(ToastyComponent.prototype, \"position\", {\n        get: function () {\n            return this._position;\n        },\n        // The window position where the toast pops up. Possible values:\n        // - bottom-right (default value from ToastConfig)\n        // - bottom-left\n        // - top-right\n        // - top-left\n        // - top-center\n        // - bottom-center\n        // - center-center\n        set: function (value) {\n            if (value) {\n                var notFound = true;\n                for (var i = 0; i < ToastyComponent.POSITIONS.length; i++) {\n                    if (ToastyComponent.POSITIONS[i] === value) {\n                        notFound = false;\n                        break;\n                    }\n                }\n                if (notFound) {\n                    // Position was wrong - clear it here to use the one from config.\n                    value = this.config.position;\n                }\n            }\n            else {\n                value = this.config.position;\n            }\n            this._position = 'toasty-position-' + value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\n     * first time, and before any of its children have been checked. It is invoked only once when the\n     * directive is instantiated.\n     */\n    ToastyComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        // We listen events from our service\n        this.toastyService.events.subscribe(function (event) {\n            if (event.type === ToastyEventType.ADD) {\n                // Add the new one\n                var toast = event.value;\n                _this.add(toast);\n            }\n            else if (event.type === ToastyEventType.CLEAR) {\n                // Clear the one by number\n                var id = event.value;\n                _this.clear(id);\n            }\n            else if (event.type === ToastyEventType.CLEAR_ALL) {\n                // Lets clear all toasts\n                _this.clearAll();\n            }\n        });\n    };\n    /**\n     * Event listener of 'closeToast' event comes from ToastyComponent.\n     * This method removes ToastComponent assosiated with this Toast.\n     */\n    ToastyComponent.prototype.closeToast = function (toast) {\n        this.clear(toast.id);\n    };\n    /**\n     * Add new Toast\n     */\n    ToastyComponent.prototype.add = function (toast) {\n        // If we've gone over our limit, remove the earliest\n        // one from the array\n        if (this.toasts.length >= this.config.limit) {\n            this.toasts.shift();\n        }\n        // Add toasty to array\n        this.toasts.push(toast);\n        //\n        // If there's a timeout individually or globally,\n        // set the toast to timeout\n        if (toast.timeout) {\n            this._setTimeout(toast);\n        }\n    };\n    /**\n     * Clear individual toast by id\n     * @param id is unique identifier of Toast\n     */\n    ToastyComponent.prototype.clear = function (id) {\n        var _this = this;\n        if (id) {\n            this.toasts.forEach(function (value, key) {\n                if (value.id === id) {\n                    if (value.onRemove && isFunction(value.onRemove)) {\n                        value.onRemove.call(_this, value);\n                    }\n                    _this.toasts.splice(key, 1);\n                }\n            });\n        }\n        else {\n            throw new Error('Please provide id of Toast to close');\n        }\n    };\n    /**\n     * Clear all toasts\n     */\n    ToastyComponent.prototype.clearAll = function () {\n        var _this = this;\n        this.toasts.forEach(function (value, key) {\n            if (value.onRemove && isFunction(value.onRemove)) {\n                value.onRemove.call(_this, value);\n            }\n        });\n        this.toasts = [];\n    };\n    /**\n     * Custom setTimeout function for specific setTimeouts on individual toasts.\n     */\n    ToastyComponent.prototype._setTimeout = function (toast) {\n        var _this = this;\n        window.setTimeout(function () {\n            _this.clear(toast.id);\n        }, toast.timeout);\n    };\n    /**\n     * Set of constants defins position of Toasty on the page.\n     */\n    ToastyComponent.POSITIONS = ['bottom-right', 'bottom-left', 'top-right', 'top-left', 'top-center', 'bottom-center', 'center-center'];\n    ToastyComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'ng2-toasty',\n                    template: \"\\n    <div id=\\\"toasty\\\" [ngClass]=\\\"[position]\\\">\\n        <ng2-toast *ngFor=\\\"let toast of toasts\\\" [toast]=\\\"toast\\\" (closeToast)=\\\"closeToast(toast)\\\"></ng2-toast>\\n    </div>\"\n                },] },\n    ];\n    /** @nocollapse */\n    ToastyComponent.ctorParameters = function () { return [\n        { type: ToastyConfig, },\n        { type: ToastyService, },\n    ]; };\n    ToastyComponent.propDecorators = {\n        'position': [{ type: Input },],\n    };\n    return ToastyComponent;\n}());\nexport { ToastyComponent };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext() {\n  for (var _len = arguments.length, nextSources = new Array(_len), _key = 0; _key < _len; _key++) {\n    nextSources[_key] = arguments[_key];\n  }\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = nextSources[0];\n  }\n\n  return function (source) {\n    return source.lift(new OnErrorResumeNextOperator(nextSources));\n  };\n}\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic() {\n  for (var _len2 = arguments.length, nextSources = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    nextSources[_key2] = arguments[_key2];\n  }\n\n  var source = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = nextSources[0];\n  }\n\n  source = nextSources.shift();\n  return from(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\n\nvar OnErrorResumeNextOperator = /*#__PURE__*/function () {\n  function OnErrorResumeNextOperator(nextSources) {\n    _classCallCheck(this, OnErrorResumeNextOperator);\n\n    this.nextSources = nextSources;\n  }\n\n  _createClass(OnErrorResumeNextOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    }\n  }]);\n\n  return OnErrorResumeNextOperator;\n}();\n\nvar OnErrorResumeNextSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(OnErrorResumeNextSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(OnErrorResumeNextSubscriber);\n\n  function OnErrorResumeNextSubscriber(destination, nextSources) {\n    var _this;\n\n    _classCallCheck(this, OnErrorResumeNextSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.destination = destination;\n    _this.nextSources = nextSources;\n    return _this;\n  }\n\n  _createClass(OnErrorResumeNextSubscriber, [{\n    key: \"notifyError\",\n    value: function notifyError(error, innerSub) {\n      this.subscribeToNextSource();\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(innerSub) {\n      this.subscribeToNextSource();\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.subscribeToNextSource();\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.subscribeToNextSource();\n    }\n  }, {\n    key: \"subscribeToNextSource\",\n    value: function subscribeToNextSource() {\n      var next = this.nextSources.shift();\n\n      if (next) {\n        this.add(subscribeToResult(this, next));\n      } else {\n        this.destination.complete();\n      }\n    }\n  }]);\n\n  return OnErrorResumeNextSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/onErrorResumeNext.ts"],"names":[],"mappings":";;;;AACA,SAAS,IAAT,QAAqB,oBAArB;AAGA,SAAS,OAAT,QAAwB,iBAAxB;AACA,SAAS,eAAT,QAAgC,oBAAhC;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;AAWA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,OAAM,SAAA,iBAAA,GAEgF;AAAA,oCAF3C,WAE2C;AAF3C,IAAA,WAE2C;AAAA;;AACpF,MAAI,WAAW,CAAC,MAAZ,KAAuB,CAAvB,IAA4B,OAAO,CAAC,WAAW,CAAC,CAAD,CAAZ,CAAvC,EAAyD;AACvD,IAAA,WAAW,GAA2B,WAAW,CAAC,CAAD,CAAjD;AACD;;AAED,SAAO,UAAC,MAAD;AAAA,WAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,yBAAJ,CAAoC,WAApC,CAAZ,CAA3B;AAAA,GAAP;AACD;AAWD;;AAEA,OAAM,SAAA,uBAAA,GAEuF;AAAA,qCAF5C,WAE4C;AAF5C,IAAA,WAE4C;AAAA;;AAC3F,MAAI,MAAM,GAAyB,IAAnC;;AAEA,MAAI,WAAW,CAAC,MAAZ,KAAuB,CAAvB,IAA4B,OAAO,CAAC,WAAW,CAAC,CAAD,CAAZ,CAAvC,EAAyD;AACvD,IAAA,WAAW,GAAgC,WAAW,CAAC,CAAD,CAAtD;AACD;;AACD,EAAA,MAAM,GAAG,WAAW,CAAC,KAAZ,EAAT;AAEA,SAAO,IAAI,CAAC,MAAD,EAAS,IAAT,CAAJ,CAAmB,IAAnB,CAAwB,IAAI,yBAAJ,CAAoC,WAApC,CAAxB,CAAP;AACD;;IAED,yB;AACE,qCAAoB,WAApB,EAA4D;AAAA;;AAAxC,SAAA,WAAA,GAAA,WAAA;AACnB;;;;yBAEI,U,EAA2B,M,EAAW;AACzC,aAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,2BAAJ,CAAgC,UAAhC,EAA4C,KAAK,WAAjD,CAAjB,CAAP;AACD;;;;;;IAGH,2B;;;;;AACE,uCAAsB,WAAtB,EACoB,WADpB,EAC4D;AAAA;;AAAA;;AAC1D,8BAAM,WAAN;AAFoB,UAAA,WAAA,GAAA,WAAA;AACF,UAAA,WAAA,GAAA,WAAA;AAAwC;AAE3D;;;;gCAEW,K,EAAY,Q,EAAiC;AACvD,WAAK,qBAAL;AACD;;;mCAEc,Q,EAAiC;AAC9C,WAAK,qBAAL;AACD;;;2BAEgB,G,EAAQ;AACvB,WAAK,qBAAL;AACD;;;gCAEkB;AACjB,WAAK,qBAAL;AACD;;;4CAE4B;AAC3B,UAAM,IAAI,GAAG,KAAK,WAAL,CAAiB,KAAjB,EAAb;;AACA,UAAI,IAAJ,EAAU;AACR,aAAK,GAAL,CAAS,iBAAiB,CAAC,IAAD,EAAO,IAAP,CAA1B;AACD,OAFD,MAEO;AACL,aAAK,WAAL,CAAiB,QAAjB;AACD;AACF;;;;EA7B6C,e","sourcesContent":["import { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nexport function onErrorResumeNext(...nextSources) {\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return (source) => source.lift(new OnErrorResumeNextOperator(nextSources));\n}\n/* tslint:enable:max-line-length */\nexport function onErrorResumeNextStatic(...nextSources) {\n    let source = null;\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return from(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nclass OnErrorResumeNextOperator {\n    constructor(nextSources) {\n        this.nextSources = nextSources;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    }\n}\nclass OnErrorResumeNextSubscriber extends OuterSubscriber {\n    constructor(destination, nextSources) {\n        super(destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    notifyError(error, innerSub) {\n        this.subscribeToNextSource();\n    }\n    notifyComplete(innerSub) {\n        this.subscribeToNextSource();\n    }\n    _error(err) {\n        this.subscribeToNextSource();\n    }\n    _complete() {\n        this.subscribeToNextSource();\n    }\n    subscribeToNextSource() {\n        const next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=onErrorResumeNext.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\nexport function fromIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  if (!scheduler) {\n    return new Observable(subscribeToIterable(input));\n  } else {\n    return new Observable(function (subscriber) {\n      var sub = new Subscription();\n      var iterator;\n      sub.add(function () {\n        // Finalize generators\n        if (iterator && typeof iterator.return === 'function') {\n          iterator.return();\n        }\n      });\n      sub.add(scheduler.schedule(function () {\n        iterator = input[Symbol_iterator]();\n        sub.add(scheduler.schedule(function () {\n          if (subscriber.closed) {\n            return;\n          }\n\n          var value;\n          var done;\n\n          try {\n            var result = iterator.next();\n            value = result.value;\n            done = result.done;\n          } catch (err) {\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(value);\n            this.schedule();\n          }\n        }));\n      }));\n      return sub;\n    });\n  }\n}","map":{"version":3,"sources":["../../../src/internal/observable/fromIterable.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,QAAQ,IAAI,eAArB,QAA4C,oBAA5C;AACA,SAAS,mBAAT,QAAoC,6BAApC;AAEA,OAAM,SAAA,YAAA,CAA0B,KAA1B,EAA8C,SAA9C,EAAsE;AAC1E,MAAI,CAAC,KAAL,EAAY;AACV,UAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,MAAI,CAAC,SAAL,EAAgB;AACd,WAAO,IAAI,UAAJ,CAAkB,mBAAmB,CAAC,KAAD,CAArC,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAI,UAAJ,CAAkB,UAAA,UAAU,EAAG;AACpC,UAAM,GAAG,GAAG,IAAI,YAAJ,EAAZ;AACA,UAAI,QAAJ;AACA,MAAA,GAAG,CAAC,GAAJ,CAAQ,YAAK;AACX;AACA,YAAI,QAAQ,IAAI,OAAO,QAAQ,CAAC,MAAhB,KAA2B,UAA3C,EAAuD;AACrD,UAAA,QAAQ,CAAC,MAAT;AACD;AACF,OALD;AAMA,MAAA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB,YAAK;AAC9B,QAAA,QAAQ,GAAG,KAAK,CAAC,eAAD,CAAL,EAAX;AACA,QAAA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB,YAAA;AACzB,cAAI,UAAU,CAAC,MAAf,EAAuB;AACrB;AACD;;AACD,cAAI,KAAJ;AACA,cAAI,IAAJ;;AACA,cAAI;AACF,gBAAM,MAAM,GAAG,QAAQ,CAAC,IAAT,EAAf;AACA,YAAA,KAAK,GAAG,MAAM,CAAC,KAAf;AACA,YAAA,IAAI,GAAG,MAAM,CAAC,IAAd;AACD,WAJD,CAIE,OAAO,GAAP,EAAY;AACZ,YAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACA;AACD;;AACD,cAAI,IAAJ,EAAU;AACR,YAAA,UAAU,CAAC,QAAX;AACD,WAFD,MAEO;AACL,YAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;AACA,iBAAK,QAAL;AACD;AACF,SApBO,CAAR;AAqBD,OAvBO,CAAR;AAwBA,aAAO,GAAP;AACD,KAlCM,CAAP;AAmCD;AACF","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\nexport function fromIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    if (!scheduler) {\n        return new Observable(subscribeToIterable(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            let iterator;\n            sub.add(() => {\n                // Finalize generators\n                if (iterator && typeof iterator.return === 'function') {\n                    iterator.return();\n                }\n            });\n            sub.add(scheduler.schedule(() => {\n                iterator = input[Symbol_iterator]();\n                sub.add(scheduler.schedule(function () {\n                    if (subscriber.closed) {\n                        return;\n                    }\n                    let value;\n                    let done;\n                    try {\n                        const result = iterator.next();\n                        value = result.value;\n                        done = result.done;\n                    }\n                    catch (err) {\n                        subscriber.error(err);\n                        return;\n                    }\n                    if (done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(value);\n                        this.schedule();\n                    }\n                }));\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromIterable.js.map"]},"metadata":{},"sourceType":"module"}
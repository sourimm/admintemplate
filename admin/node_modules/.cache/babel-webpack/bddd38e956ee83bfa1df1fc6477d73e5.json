{"ast":null,"code":"import _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\n\nexport function pairwise() {\n  return function (source) {\n    return source.lift(new PairwiseOperator());\n  };\n}\n\nvar PairwiseOperator = /*#__PURE__*/function () {\n  function PairwiseOperator() {\n    _classCallCheck(this, PairwiseOperator);\n  }\n\n  _createClass(PairwiseOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new PairwiseSubscriber(subscriber));\n    }\n  }]);\n\n  return PairwiseOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar PairwiseSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(PairwiseSubscriber, _Subscriber);\n\n  var _super = _createSuper(PairwiseSubscriber);\n\n  function PairwiseSubscriber(destination) {\n    var _this;\n\n    _classCallCheck(this, PairwiseSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.hasPrev = false;\n    return _this;\n  }\n\n  _createClass(PairwiseSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.hasPrev) {\n        this.destination.next([this.prev, value]);\n      } else {\n        this.hasPrev = true;\n      }\n\n      this.prev = value;\n    }\n  }]);\n\n  return PairwiseSubscriber;\n}(Subscriber);","map":null,"metadata":{},"sourceType":"module"}
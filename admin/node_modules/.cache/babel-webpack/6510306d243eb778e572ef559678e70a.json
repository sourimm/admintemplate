{"ast":null,"code":"import _toConsumableArray from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { isArray } from '../util/isArray';\nimport { race as raceStatic } from '../observable/race';\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\n\nexport function race() {\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n\n  return function raceOperatorFunction(source) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = observables[0];\n    }\n\n    return source.lift.call(raceStatic.apply(void 0, [source].concat(_toConsumableArray(observables))));\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/race.ts"],"names":[],"mappings":";AACA,SAAS,OAAT,QAAwB,iBAAxB;AAEA,SAAS,IAAI,IAAI,UAAjB,QAAmC,oBAAnC;AAOA;;AAEA;;;;;;;;;AAQA,OAAM,SAAA,IAAA,GAA6E;AAAA,oCAAxD,WAAwD;AAAxD,IAAA,WAAwD;AAAA;;AACjF,SAAO,SAAA,oBAAA,CAA8B,MAA9B,EAAmD;AACxD;AACA;AACA,QAAI,WAAW,CAAC,MAAZ,KAAuB,CAAvB,IAA4B,OAAO,CAAC,WAAW,CAAC,CAAD,CAAZ,CAAvC,EAAyD;AACvD,MAAA,WAAW,GAAyB,WAAW,CAAC,CAAD,CAA/C;AACD;;AAED,WAAO,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAiB,UAAU,MAAV,UAAc,MAAd,4BAAyB,WAAzB,GAAjB,CAAP;AACD,GARD;AASD","sourcesContent":["import { isArray } from '../util/isArray';\nimport { race as raceStatic } from '../observable/race';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race(...observables) {\n    return function raceOperatorFunction(source) {\n        // if the only argument is an array, it was most likely called with\n        // `pair([obs1, obs2, ...])`\n        if (observables.length === 1 && isArray(observables[0])) {\n            observables = observables[0];\n        }\n        return source.lift.call(raceStatic(source, ...observables));\n    };\n}\n//# sourceMappingURL=race.js.map"]},"metadata":{},"sourceType":"module"}
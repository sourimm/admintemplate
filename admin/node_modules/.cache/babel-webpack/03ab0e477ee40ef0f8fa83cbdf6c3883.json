{"ast":null,"code":"import _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ChangeDetectorRef, Component, EventEmitter, HostListener, Inject, InjectionToken, Input, NgModule, Optional, Output, forwardRef } from '@angular/core';\nimport { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport 'rxjs';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: ui-switch/ui-switch.token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction UiSwitchComponent_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"label\", 2);\n    ɵngcc0.ɵɵelementStart(1, \"span\", 3);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"span\", 4);\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"color\", ctx_r0.getColor(\"checkedTextColor\"));\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.checkedLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.checkedLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"color\", ctx_r0.getColor(\"uncheckedTextColor\"));\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.uncheckedLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.uncheckedLabel);\n  }\n}\n\nvar _c0 = [\"*\"];\nvar UI_SWITCH_OPTIONS = new InjectionToken('UI_SWITCH_OPTIONS');\n/**\n * @fileoverview added by tsickle\n * Generated from: ui-switch/ui-switch.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar UI_SWITCH_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return UiSwitchComponent;\n  }),\n  multi: true\n};\n\nvar UiSwitchComponent = /*@__PURE__*/function () {\n  var UiSwitchComponent = /*#__PURE__*/function () {\n    /**\n     * @param {?=} config\n     * @param {?=} cdr\n     */\n    function UiSwitchComponent() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var cdr = arguments.length > 1 ? arguments[1] : undefined;\n\n      _classCallCheck(this, UiSwitchComponent);\n\n      this.cdr = cdr;\n      /**\n       * Emits changed value\n       */\n\n      this.change = new EventEmitter();\n      /**\n       * Emits DOM event\n       */\n\n      this.changeEvent = new EventEmitter();\n      /**\n       * Emits changed value\n       */\n\n      this.valueChange = new EventEmitter();\n\n      this.onTouchedCallback =\n      /**\n      * @param {?} v\n      * @return {?}\n      */\n      function (v) {};\n\n      this.onChangeCallback =\n      /**\n      * @param {?} v\n      * @return {?}\n      */\n      function (v) {};\n\n      this.size = config && config.size || 'medium';\n      this.color = config && config.color;\n      this.switchOffColor = config && config.switchOffColor;\n      this.switchColor = config && config.switchColor;\n      this.defaultBgColor = config && config.defaultBgColor;\n      this.defaultBoColor = config && config.defaultBoColor;\n      this.checkedLabel = config && config.checkedLabel;\n      this.uncheckedLabel = config && config.uncheckedLabel;\n      this.checkedTextColor = config && config.checkedTextColor;\n      this.uncheckedTextColor = config && config.uncheckedTextColor;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    _createClass(UiSwitchComponent, [{\n      key: \"getColor\",\n\n      /**\n       * @param {?=} flag\n       * @return {?}\n       */\n      value: function getColor() {\n        var flag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n        if (flag === 'borderColor') {\n          return this.defaultBoColor;\n        }\n\n        if (flag === 'switchColor') {\n          if (this.reverse) {\n            return !this.checked ? this.switchColor : this.switchOffColor || this.switchColor;\n          }\n\n          return this.checked ? this.switchColor : this.switchOffColor || this.switchColor;\n        }\n\n        if (flag === 'checkedTextColor') {\n          return this.reverse ? this.uncheckedTextColor : this.checkedTextColor;\n        }\n\n        if (flag === 'uncheckedTextColor') {\n          return this.reverse ? this.checkedTextColor : this.uncheckedTextColor;\n        }\n\n        if (this.reverse) {\n          return !this.checked ? this.color : this.defaultBgColor;\n        }\n\n        return this.checked ? this.color : this.defaultBgColor;\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"onClick\",\n      value: function onClick(event) {\n        if (this.disabled) {\n          return;\n        }\n\n        this.checked = !this.checked; // Component events\n\n        this.change.emit(this.checked);\n        this.valueChange.emit(this.checked);\n        this.changeEvent.emit(event); // value accessor callbacks\n\n        this.onChangeCallback(this.checked);\n        this.onTouchedCallback(this.checked);\n        this.cdr.markForCheck();\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"onToggle\",\n      value: function onToggle(event) {\n        var _this = this;\n\n        if (this.disabled) {\n          return;\n        }\n\n        if (this.beforeChange) {\n          this._beforeChange = this.beforeChange.subscribe(\n          /**\n          * @param {?} confirm\n          * @return {?}\n          */\n          function (confirm) {\n            if (confirm) {\n              _this.onClick(event);\n            }\n          });\n        } else {\n          this.onClick(event);\n        }\n      }\n      /**\n       * @param {?} obj\n       * @return {?}\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(obj) {\n        if (obj !== this.checked) {\n          this.checked = !!obj;\n        }\n\n        this.onChangeCallback(this.checked);\n\n        if (this.cdr) {\n          this.cdr.markForCheck();\n        }\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChangeCallback = fn;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouchedCallback = fn;\n      }\n      /**\n       * @param {?} isDisabled\n       * @return {?}\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._beforeChange) {\n          this._beforeChange.unsubscribe();\n        }\n      }\n    }, {\n      key: \"checked\",\n      set: function set(v) {\n        this._checked = v !== false;\n      }\n      /**\n       * @return {?}\n       */\n      ,\n      get: function get() {\n        return this._checked;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n\n    }, {\n      key: \"disabled\",\n      set: function set(v) {\n        this._disabled = v !== false;\n      }\n      /**\n       * @return {?}\n       */\n      ,\n      get: function get() {\n        return this._disabled;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n\n    }, {\n      key: \"reverse\",\n      set: function set(v) {\n        this._reverse = v !== false;\n      }\n      /**\n       * @return {?}\n       */\n      ,\n      get: function get() {\n        return this._reverse;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n\n    }, {\n      key: \"loading\",\n      set: function set(v) {\n        this._loading = v !== false;\n      }\n      /**\n       * @return {?}\n       */\n      ,\n      get: function get() {\n        return this._loading;\n      }\n    }]);\n\n    return UiSwitchComponent;\n  }();\n\n  UiSwitchComponent.ɵfac = function UiSwitchComponent_Factory(t) {\n    return new (t || UiSwitchComponent)(ɵngcc0.ɵɵdirectiveInject(UI_SWITCH_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  UiSwitchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: UiSwitchComponent,\n    selectors: [[\"ui-switch\"]],\n    hostBindings: function UiSwitchComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function UiSwitchComponent_click_HostBindingHandler($event) {\n          return ctx.onToggle($event);\n        });\n      }\n    },\n    inputs: {\n      size: \"size\",\n      color: \"color\",\n      switchOffColor: \"switchOffColor\",\n      switchColor: \"switchColor\",\n      defaultBgColor: \"defaultBgColor\",\n      defaultBoColor: \"defaultBoColor\",\n      checkedLabel: \"checkedLabel\",\n      uncheckedLabel: \"uncheckedLabel\",\n      checkedTextColor: \"checkedTextColor\",\n      uncheckedTextColor: \"uncheckedTextColor\",\n      checked: \"checked\",\n      disabled: \"disabled\",\n      reverse: \"reverse\",\n      loading: \"loading\",\n      beforeChange: \"beforeChange\"\n    },\n    outputs: {\n      change: \"change\",\n      changeEvent: \"changeEvent\",\n      valueChange: \"valueChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([UI_SWITCH_CONTROL_VALUE_ACCESSOR])],\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 20,\n    consts: [[\"type\", \"button\", \"role\", \"switch\", 1, \"switch\"], [\"class\", \"switch-pane\", 4, \"ngIf\"], [1, \"switch-pane\"], [1, \"switch-label-checked\"], [1, \"switch-label-unchecked\"]],\n    template: function UiSwitchComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵtemplate(1, UiSwitchComponent_label_1_Template, 5, 8, \"label\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"small\");\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"background-color\", ctx.getColor())(\"border-color\", ctx.getColor(\"borderColor\"));\n        ɵngcc0.ɵɵclassProp(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"loading\", ctx.loading)(\"switch-large\", ctx.size === \"large\")(\"switch-medium\", ctx.size === \"medium\")(\"switch-small\", ctx.size === \"small\");\n        ɵngcc0.ɵɵattribute(\"aria-checked\", ctx.checked);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.checkedLabel || ctx.uncheckedLabel);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵstyleProp(\"background\", ctx.getColor(\"switchColor\"));\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    encapsulation: 2\n  });\n  return UiSwitchComponent;\n}();\n\nvar UiSwitchModule = /*@__PURE__*/function () {\n  var UiSwitchModule = /*#__PURE__*/function () {\n    function UiSwitchModule() {\n      _classCallCheck(this, UiSwitchModule);\n    }\n\n    _createClass(UiSwitchModule, null, [{\n      key: \"forRoot\",\n\n      /**\n       * @param {?} config\n       * @return {?}\n       */\n      value: function forRoot(config) {\n        return {\n          ngModule: UiSwitchModule,\n          providers: [{\n            provide: UI_SWITCH_OPTIONS,\n            useValue: config || {}\n          }]\n        };\n      }\n    }]);\n\n    return UiSwitchModule;\n  }();\n\n  UiSwitchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: UiSwitchModule\n  });\n  UiSwitchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function UiSwitchModule_Factory(t) {\n      return new (t || UiSwitchModule)();\n    },\n    imports: [[CommonModule, FormsModule], FormsModule]\n  });\n  return UiSwitchModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(UiSwitchModule, {\n    declarations: function declarations() {\n      return [UiSwitchComponent];\n    },\n    imports: function imports() {\n      return [CommonModule, FormsModule];\n    },\n    exports: function exports() {\n      return [FormsModule, UiSwitchComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { UiSwitchComponent, UiSwitchModule, UI_SWITCH_OPTIONS as ɵa };","map":null,"metadata":{},"sourceType":"module"}
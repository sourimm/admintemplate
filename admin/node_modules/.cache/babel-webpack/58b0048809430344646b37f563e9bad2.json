{"ast":null,"code":"import _toConsumableArray from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nvar none = {};\n/* tslint:enable:max-line-length */\n\n/**\n * @deprecated Deprecated in favor of static combineLatest.\n */\n\nexport function combineLatest() {\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n\n  var project = null;\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = observables.pop();\n  } // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n\n\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = observables[0].slice();\n  }\n\n  return function (source) {\n    return source.lift.call(from([source].concat(_toConsumableArray(observables))), new CombineLatestOperator(project));\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
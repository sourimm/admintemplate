{"ast":null,"code":"import _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * An execution context and a data structure to order tasks and schedule their\r\n * execution. Provides a notion of (potentially virtual) time, through the\r\n * `now()` getter method.\r\n *\r\n * Each unit of work in a Scheduler is called an {@link Action}.\r\n *\r\n * ```ts\r\n * class Scheduler {\r\n *   now(): number;\r\n *   schedule(work, delay?, state?): Subscription;\r\n * }\r\n * ```\r\n *\r\n * @class Scheduler\r\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\r\n * should not be used directly. Rather, create your own class and implement\r\n * {@link SchedulerLike}\r\n */\nexport var Scheduler = /*@__PURE__*/function () {\n  var Scheduler = /*#__PURE__*/function () {\n    function Scheduler(SchedulerAction) {\n      var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Scheduler.now;\n\n      _classCallCheck(this, Scheduler);\n\n      this.SchedulerAction = SchedulerAction;\n      this.now = now;\n    }\n    /**\r\n     * Schedules a function, `work`, for execution. May happen at some point in\r\n     * the future, according to the `delay` parameter, if specified. May be passed\r\n     * some context object, `state`, which will be passed to the `work` function.\r\n     *\r\n     * The given arguments will be processed an stored as an Action object in a\r\n     * queue of actions.\r\n     *\r\n     * @param {function(state: ?T): ?Subscription} work A function representing a\r\n     * task, or some unit of work to be executed by the Scheduler.\r\n     * @param {number} [delay] Time to wait before executing the work, where the\r\n     * time unit is implicit and defined by the Scheduler itself.\r\n     * @param {T} [state] Some contextual data that the `work` function uses when\r\n     * called by the Scheduler.\r\n     * @return {Subscription} A subscription in order to be able to unsubscribe\r\n     * the scheduled work.\r\n     */\n\n\n    _createClass(Scheduler, [{\n      key: \"schedule\",\n      value: function schedule(work) {\n        var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var state = arguments.length > 2 ? arguments[2] : undefined;\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n      }\n    }]);\n\n    return Scheduler;\n  }();\n  /** @nocollapse */\n\n\n  Scheduler.now = Date.now ? Date.now : function () {\n    return +new Date();\n  };\n  return Scheduler;\n}();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar ɵngcc0 = require('@angular/core');\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar dragula_class_1 = require(\"./dragula.class\");\n\nvar core_1 = require(\"@angular/core\");\n\nvar DragulaService = function () {\n  function DragulaService() {\n    this.cancel = new core_1.EventEmitter();\n    this.cloned = new core_1.EventEmitter();\n    this.drag = new core_1.EventEmitter();\n    this.dragend = new core_1.EventEmitter();\n    this.drop = new core_1.EventEmitter();\n    this.out = new core_1.EventEmitter();\n    this.over = new core_1.EventEmitter();\n    this.remove = new core_1.EventEmitter();\n    this.shadow = new core_1.EventEmitter();\n    this.dropModel = new core_1.EventEmitter();\n    this.removeModel = new core_1.EventEmitter();\n    this.events = ['cancel', 'cloned', 'drag', 'dragend', 'drop', 'out', 'over', 'remove', 'shadow', 'dropModel', 'removeModel'];\n    this.bags = [];\n  }\n\n  DragulaService.prototype.add = function (name, drake) {\n    var bag = this.find(name);\n\n    if (bag) {\n      throw new Error('Bag named: \"' + name + '\" already exists.');\n    }\n\n    bag = {\n      name: name,\n      drake: drake\n    };\n    this.bags.push(bag);\n\n    if (drake.models) {\n      this.handleModels(name, drake);\n    }\n\n    if (!bag.initEvents) {\n      this.setupEvents(bag);\n    }\n\n    return bag;\n  };\n\n  DragulaService.prototype.find = function (name) {\n    for (var _i = 0, _a = this.bags; _i < _a.length; _i++) {\n      var bag = _a[_i];\n\n      if (bag.name === name) {\n        return bag;\n      }\n    }\n  };\n\n  DragulaService.prototype.destroy = function (name) {\n    var bag = this.find(name);\n    var i = this.bags.indexOf(bag);\n    this.bags.splice(i, 1);\n    bag.drake.destroy();\n  };\n\n  DragulaService.prototype.setOptions = function (name, options) {\n    var bag = this.add(name, dragula_class_1.dragula(options));\n    this.handleModels(name, bag.drake);\n  };\n\n  DragulaService.prototype.handleModels = function (name, drake) {\n    var _this = this;\n\n    var dragElm;\n    var dragIndex;\n    var dropIndex;\n    var sourceModel;\n    drake.on('remove', function (el, source) {\n      if (!drake.models) {\n        return;\n      }\n\n      sourceModel = drake.models[drake.containers.indexOf(source)];\n      sourceModel.splice(dragIndex, 1); // console.log('REMOVE');\n      // console.log(sourceModel);\n\n      _this.removeModel.emit([name, el, source]);\n    });\n    drake.on('drag', function (el, source) {\n      dragElm = el;\n      dragIndex = _this.domIndexOf(el, source);\n    });\n    drake.on('drop', function (dropElm, target, source) {\n      if (!drake.models || !target) {\n        return;\n      }\n\n      dropIndex = _this.domIndexOf(dropElm, target);\n      sourceModel = drake.models[drake.containers.indexOf(source)]; // console.log('DROP');\n      // console.log(sourceModel);\n\n      if (target === source) {\n        sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);\n      } else {\n        var notCopy = dragElm === dropElm;\n        var targetModel = drake.models[drake.containers.indexOf(target)];\n        var dropElmModel = notCopy ? sourceModel[dragIndex] : JSON.parse(JSON.stringify(sourceModel[dragIndex]));\n\n        if (notCopy) {\n          sourceModel.splice(dragIndex, 1);\n        }\n\n        targetModel.splice(dropIndex, 0, dropElmModel);\n        target.removeChild(dropElm); // element must be removed for ngFor to apply correctly\n      }\n\n      _this.dropModel.emit([name, dropElm, target, source]);\n    });\n  };\n\n  DragulaService.prototype.setupEvents = function (bag) {\n    bag.initEvents = true;\n    var that = this;\n\n    var emitter = function emitter(type) {\n      function replicate() {\n        var args = Array.prototype.slice.call(arguments);\n        that[type].emit([bag.name].concat(args));\n      }\n\n      bag.drake.on(type, replicate);\n    };\n\n    this.events.forEach(emitter);\n  };\n\n  DragulaService.prototype.domIndexOf = function (child, parent) {\n    return Array.prototype.indexOf.call(parent.children, child);\n  };\n\n  DragulaService.ɵfac = function DragulaService_Factory(t) {\n    return new (t || DragulaService)();\n  };\n\n  DragulaService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: DragulaService,\n    factory: function factory(t) {\n      return DragulaService.ɵfac(t);\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DragulaService, [{\n      type: core_1.Injectable\n    }], function () {\n      return [];\n    }, null);\n  })();\n\n  return DragulaService;\n}();\n\nexports.DragulaService = DragulaService;","map":{"version":3,"sources":["dragula.provider.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar dragula_class_1 = require(\"./dragula.class\");\nvar core_1 = require(\"@angular/core\");\nvar DragulaService = (function () {\n    function DragulaService() {\n        this.cancel = new core_1.EventEmitter();\n        this.cloned = new core_1.EventEmitter();\n        this.drag = new core_1.EventEmitter();\n        this.dragend = new core_1.EventEmitter();\n        this.drop = new core_1.EventEmitter();\n        this.out = new core_1.EventEmitter();\n        this.over = new core_1.EventEmitter();\n        this.remove = new core_1.EventEmitter();\n        this.shadow = new core_1.EventEmitter();\n        this.dropModel = new core_1.EventEmitter();\n        this.removeModel = new core_1.EventEmitter();\n        this.events = [\n            'cancel', 'cloned', 'drag', 'dragend', 'drop', 'out', 'over',\n            'remove', 'shadow', 'dropModel', 'removeModel'\n        ];\n        this.bags = [];\n    }\n    DragulaService.prototype.add = function (name, drake) {\n        var bag = this.find(name);\n        if (bag) {\n            throw new Error('Bag named: \"' + name + '\" already exists.');\n        }\n        bag = { name: name, drake: drake };\n        this.bags.push(bag);\n        if (drake.models) {\n            this.handleModels(name, drake);\n        }\n        if (!bag.initEvents) {\n            this.setupEvents(bag);\n        }\n        return bag;\n    };\n    DragulaService.prototype.find = function (name) {\n        for (var _i = 0, _a = this.bags; _i < _a.length; _i++) {\n            var bag = _a[_i];\n            if (bag.name === name) {\n                return bag;\n            }\n        }\n    };\n    DragulaService.prototype.destroy = function (name) {\n        var bag = this.find(name);\n        var i = this.bags.indexOf(bag);\n        this.bags.splice(i, 1);\n        bag.drake.destroy();\n    };\n    DragulaService.prototype.setOptions = function (name, options) {\n        var bag = this.add(name, dragula_class_1.dragula(options));\n        this.handleModels(name, bag.drake);\n    };\n    DragulaService.prototype.handleModels = function (name, drake) {\n        var _this = this;\n        var dragElm;\n        var dragIndex;\n        var dropIndex;\n        var sourceModel;\n        drake.on('remove', function (el, source) {\n            if (!drake.models) {\n                return;\n            }\n            sourceModel = drake.models[drake.containers.indexOf(source)];\n            sourceModel.splice(dragIndex, 1);\n            // console.log('REMOVE');\n            // console.log(sourceModel);\n            _this.removeModel.emit([name, el, source]);\n        });\n        drake.on('drag', function (el, source) {\n            dragElm = el;\n            dragIndex = _this.domIndexOf(el, source);\n        });\n        drake.on('drop', function (dropElm, target, source) {\n            if (!drake.models || !target) {\n                return;\n            }\n            dropIndex = _this.domIndexOf(dropElm, target);\n            sourceModel = drake.models[drake.containers.indexOf(source)];\n            // console.log('DROP');\n            // console.log(sourceModel);\n            if (target === source) {\n                sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);\n            }\n            else {\n                var notCopy = dragElm === dropElm;\n                var targetModel = drake.models[drake.containers.indexOf(target)];\n                var dropElmModel = notCopy ? sourceModel[dragIndex] : JSON.parse(JSON.stringify(sourceModel[dragIndex]));\n                if (notCopy) {\n                    sourceModel.splice(dragIndex, 1);\n                }\n                targetModel.splice(dropIndex, 0, dropElmModel);\n                target.removeChild(dropElm); // element must be removed for ngFor to apply correctly\n            }\n            _this.dropModel.emit([name, dropElm, target, source]);\n        });\n    };\n    DragulaService.prototype.setupEvents = function (bag) {\n        bag.initEvents = true;\n        var that = this;\n        var emitter = function (type) {\n            function replicate() {\n                var args = Array.prototype.slice.call(arguments);\n                that[type].emit([bag.name].concat(args));\n            }\n            bag.drake.on(type, replicate);\n        };\n        this.events.forEach(emitter);\n    };\n    DragulaService.prototype.domIndexOf = function (child, parent) {\n        return Array.prototype.indexOf.call(parent.children, child);\n    };\n    return DragulaService;\n}());\nDragulaService = __decorate([\n    core_1.Injectable()\n], DragulaService);\nexports.DragulaService = DragulaService;\n"]},"metadata":{},"sourceType":"script"}
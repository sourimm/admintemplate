{"ast":null,"code":"import _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nexport var AnimationFrameAction = /*#__PURE__*/function (_AsyncAction) {\n  _inherits(AnimationFrameAction, _AsyncAction);\n\n  var _super = _createSuper(AnimationFrameAction);\n\n  function AnimationFrameAction(scheduler, work) {\n    var _this;\n\n    _classCallCheck(this, AnimationFrameAction);\n\n    _this = _super.call(this, scheduler, work);\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  _createClass(AnimationFrameAction, [{\n    key: \"requestAsyncId\",\n    value: function requestAsyncId(scheduler, id) {\n      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      // If delay is greater than 0, request as an async action.\n      if (delay !== null && delay > 0) {\n        return _get(_getPrototypeOf(AnimationFrameAction.prototype), \"requestAsyncId\", this).call(this, scheduler, id, delay);\n      } // Push the action to the end of the scheduler queue.\n\n\n      scheduler.actions.push(this); // If an animation frame has already been requested, don't request another\n      // one. If an animation frame hasn't been requested yet, request one. Return\n      // the current animation frame request id.\n\n      return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () {\n        return scheduler.flush(null);\n      }));\n    }\n  }, {\n    key: \"recycleAsyncId\",\n    value: function recycleAsyncId(scheduler, id) {\n      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      // If delay exists and is greater than 0, or if the delay is null (the\n      // action wasn't rescheduled) but was originally scheduled as an async\n      // action, then recycle as an async action.\n      if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n        return _get(_getPrototypeOf(AnimationFrameAction.prototype), \"recycleAsyncId\", this).call(this, scheduler, id, delay);\n      } // If the scheduler queue is empty, cancel the requested animation frame and\n      // set the scheduled flag to undefined so the next AnimationFrameAction will\n      // request its own.\n\n\n      if (scheduler.actions.length === 0) {\n        cancelAnimationFrame(id);\n        scheduler.scheduled = undefined;\n      } // Return undefined so the action knows to request a new async id if it's rescheduled.\n\n\n      return undefined;\n    }\n  }]);\n\n  return AnimationFrameAction;\n}(AsyncAction);","map":null,"metadata":{},"sourceType":"module"}
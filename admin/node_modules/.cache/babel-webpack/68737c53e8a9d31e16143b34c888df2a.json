{"ast":null,"code":"import _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\n\nexport function audit(durationSelector) {\n  return function auditOperatorFunction(source) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nvar AuditOperator = /*#__PURE__*/function () {\n  function AuditOperator(durationSelector) {\n    _classCallCheck(this, AuditOperator);\n\n    this.durationSelector = durationSelector;\n  }\n\n  _createClass(AuditOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    }\n  }]);\n\n  return AuditOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar AuditSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(AuditSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(AuditSubscriber);\n\n  function AuditSubscriber(destination, durationSelector) {\n    var _this;\n\n    _classCallCheck(this, AuditSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.durationSelector = durationSelector;\n    _this.hasValue = false;\n    return _this;\n  }\n\n  _createClass(AuditSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.value = value;\n      this.hasValue = true;\n\n      if (!this.throttled) {\n        var duration = tryCatch(this.durationSelector)(value);\n\n        if (duration === errorObject) {\n          this.destination.error(errorObject.e);\n        } else {\n          var innerSubscription = subscribeToResult(this, duration);\n\n          if (innerSubscription.closed) {\n            this.clearThrottle();\n          } else {\n            this.add(this.throttled = innerSubscription);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"clearThrottle\",\n    value: function clearThrottle() {\n      var value = this.value,\n          hasValue = this.hasValue,\n          throttled = this.throttled;\n\n      if (throttled) {\n        this.remove(throttled);\n        this.throttled = null;\n        throttled.unsubscribe();\n      }\n\n      if (hasValue) {\n        this.value = null;\n        this.hasValue = false;\n        this.destination.next(value);\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex) {\n      this.clearThrottle();\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      this.clearThrottle();\n    }\n  }]);\n\n  return AuditSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/audit.ts"],"names":[],"mappings":";;;;AAMA,SAAS,QAAT,QAAyB,kBAAzB;AACA,SAAS,WAAT,QAA4B,qBAA5B;AACA,SAAS,eAAT,QAAgC,oBAAhC;AACA,SAAS,iBAAT,QAAkC,2BAAlC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,OAAM,SAAA,KAAA,CAAmB,gBAAnB,EAA6E;AACjF,SAAO,SAAA,qBAAA,CAA+B,MAA/B,EAAoD;AACzD,WAAO,MAAM,CAAC,IAAP,CAAY,IAAI,aAAJ,CAAkB,gBAAlB,CAAZ,CAAP;AACD,GAFD;AAGD;;IAED,a;AACE,yBAAoB,gBAApB,EAA8E;AAAA;;AAA1D,SAAA,gBAAA,GAAA,gBAAA;AACnB;;;;yBAEI,U,EAA2B,M,EAAW;AACzC,aAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,eAAJ,CAA0B,UAA1B,EAAsC,KAAK,gBAA3C,CAAjB,CAAP;AACD;;;;;AAGH;;;;;;;IAKA,e;;;;;AAME,2BAAY,WAAZ,EACoB,gBADpB,EAC8E;AAAA;;AAAA;;AAC5E,8BAAM,WAAN;AADkB,UAAA,gBAAA,GAAA,gBAAA;AAJZ,UAAA,QAAA,GAAoB,KAApB;AAIsE;AAE7E;;;;0BAEe,K,EAAQ;AACtB,WAAK,KAAL,GAAa,KAAb;AACA,WAAK,QAAL,GAAgB,IAAhB;;AACA,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,gBAAN,CAAR,CAAgC,KAAhC,CAAjB;;AACA,YAAI,QAAQ,KAAK,WAAjB,EAA8B;AAC5B,eAAK,WAAL,CAAiB,KAAjB,CAAuB,WAAW,CAAC,CAAnC;AACD,SAFD,MAEO;AACL,cAAM,iBAAiB,GAAG,iBAAiB,CAAC,IAAD,EAAO,QAAP,CAA3C;;AACA,cAAI,iBAAiB,CAAC,MAAtB,EAA8B;AAC5B,iBAAK,aAAL;AACD,WAFD,MAEO;AACL,iBAAK,GAAL,CAAS,KAAK,SAAL,GAAiB,iBAA1B;AACD;AACF;AACF;AACF;;;oCAEY;AAAA,UACH,KADG,GAC4B,IAD5B,CACH,KADG;AAAA,UACI,QADJ,GAC4B,IAD5B,CACI,QADJ;AAAA,UACc,SADd,GAC4B,IAD5B,CACc,SADd;;AAEX,UAAI,SAAJ,EAAe;AACb,aAAK,MAAL,CAAY,SAAZ;AACA,aAAK,SAAL,GAAiB,IAAjB;AACA,QAAA,SAAS,CAAC,WAAV;AACD;;AACD,UAAI,QAAJ,EAAc;AACZ,aAAK,KAAL,GAAa,IAAb;AACA,aAAK,QAAL,GAAgB,KAAhB;AACA,aAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAtB;AACD;AACF;;;+BAEU,U,EAAe,U,EAAe,U,EAAoB,U,EAAkB;AAC7E,WAAK,aAAL;AACD;;;qCAEa;AACZ,WAAK,aAAL;AACD;;;;EAjDiC,e","sourcesContent":["import { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nclass AuditOperator {\n    constructor(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    }\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber extends OuterSubscriber {\n    constructor(destination, durationSelector) {\n        super(destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            const duration = tryCatch(this.durationSelector)(value);\n            if (duration === errorObject) {\n                this.destination.error(errorObject.e);\n            }\n            else {\n                const innerSubscription = subscribeToResult(this, duration);\n                if (innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    }\n    clearThrottle() {\n        const { value, hasValue, throttled } = this;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    }\n    notifyComplete() {\n        this.clearThrottle();\n    }\n}\n//# sourceMappingURL=audit.js.map"]},"metadata":{},"sourceType":"module"}
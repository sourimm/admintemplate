{"ast":null,"code":"import { tap } from './tap';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link ErrorEmpty}.\n *\n * @example\n *\n * const click$ = fromEvent(button, 'click');\n *\n * clicks$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(\n *     () => new Error('the button was not clicked within 1 second')\n *   ),\n * )\n * .subscribe({\n *   next() { console.log('The button was clicked'); },\n *   error(err) { console.error(err); },\n * });\n * @param {Function} [errorFactory] A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n */\n\nexport var throwIfEmpty = function throwIfEmpty() {\n  var errorFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultErrorFactory;\n  return tap({\n    hasValue: false,\n    next: function next() {\n      this.hasValue = true;\n    },\n    complete: function complete() {\n      if (!this.hasValue) {\n        throw errorFactory();\n      }\n    }\n  });\n};\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}","map":{"version":3,"sources":["../../../src/internal/operators/throwIfEmpty.ts"],"names":[],"mappings":"AAAA,SAAS,GAAT,QAAoB,OAApB;AACA,SAAS,UAAT,QAA2B,oBAA3B;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAM,YAAY,GACvB,SADW,YACX;AAAA,MAAI,YAAJ,uEAAgC,mBAAhC;AAAA,SAAwD,GAAG,CAAI;AAC7D,IAAA,QAAQ,EAAE,KADmD;AAE7D,IAAA,IAF6D,kBAEzD;AAAK,WAAK,QAAL,GAAgB,IAAhB;AAAuB,KAF6B;AAG7D,IAAA,QAH6D,sBAGrD;AACN,UAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,cAAM,YAAY,EAAlB;AACD;AACF;AAP4D,GAAJ,CAA3D;AAAA,CADK;;AAWP,SAAA,mBAAA,GAAA;AACE,SAAO,IAAI,UAAJ,EAAP;AACD","sourcesContent":["import { tap } from './tap';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link ErrorEmpty}.\n *\n * @example\n *\n * const click$ = fromEvent(button, 'click');\n *\n * clicks$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(\n *     () => new Error('the button was not clicked within 1 second')\n *   ),\n * )\n * .subscribe({\n *   next() { console.log('The button was clicked'); },\n *   error(err) { console.error(err); },\n * });\n * @param {Function} [errorFactory] A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n */\nexport const throwIfEmpty = (errorFactory = defaultErrorFactory) => tap({\n    hasValue: false,\n    next() { this.hasValue = true; },\n    complete() {\n        if (!this.hasValue) {\n            throw errorFactory();\n        }\n    }\n});\nfunction defaultErrorFactory() {\n    return new EmptyError();\n}\n//# sourceMappingURL=throwIfEmpty.js.map"]},"metadata":{},"sourceType":"module"}
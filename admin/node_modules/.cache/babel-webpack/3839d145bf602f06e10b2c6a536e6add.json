{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\nexport function fromPromise(input, scheduler) {\n  if (!scheduler) {\n    return new Observable(subscribeToPromise(input));\n  } else {\n    return new Observable(function (subscriber) {\n      var sub = new Subscription();\n      sub.add(scheduler.schedule(function () {\n        return input.then(function (value) {\n          sub.add(scheduler.schedule(function () {\n            subscriber.next(value);\n            sub.add(scheduler.schedule(function () {\n              return subscriber.complete();\n            }));\n          }));\n        }, function (err) {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.error(err);\n          }));\n        });\n      }));\n      return sub;\n    });\n  }\n}","map":{"version":3,"sources":["../../../src/internal/observable/fromPromise.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,kBAAT,QAAmC,4BAAnC;AAEA,OAAM,SAAA,WAAA,CAAyB,KAAzB,EAAgD,SAAhD,EAAyE;AAC7E,MAAI,CAAC,SAAL,EAAgB;AACd,WAAO,IAAI,UAAJ,CAAkB,kBAAkB,CAAC,KAAD,CAApC,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAI,UAAJ,CAAkB,UAAA,UAAU,EAAG;AACpC,UAAM,GAAG,GAAG,IAAI,YAAJ,EAAZ;AACA,MAAA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB;AAAA,eAAM,KAAK,CAAC,IAAN,CAC/B,UAAA,KAAK,EAAG;AACN,UAAA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB,YAAK;AAC9B,YAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;AACA,YAAA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB;AAAA,qBAAM,UAAU,CAAC,QAAX,EAAN;AAAA,aAAnB,CAAR;AACD,WAHO,CAAR;AAID,SAN8B,EAO/B,UAAA,GAAG,EAAG;AACJ,UAAA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,QAAV,CAAmB;AAAA,mBAAM,UAAU,CAAC,KAAX,CAAiB,GAAjB,CAAN;AAAA,WAAnB,CAAR;AACD,SAT8B,CAAN;AAAA,OAAnB,CAAR;AAWA,aAAO,GAAP;AACD,KAdM,CAAP;AAeD;AACF","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\nexport function fromPromise(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToPromise(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            sub.add(scheduler.schedule(() => input.then(value => {\n                sub.add(scheduler.schedule(() => {\n                    subscriber.next(value);\n                    sub.add(scheduler.schedule(() => subscriber.complete()));\n                }));\n            }, err => {\n                sub.add(scheduler.schedule(() => subscriber.error(err)));\n            })));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromPromise.js.map"]},"metadata":{},"sourceType":"module"}
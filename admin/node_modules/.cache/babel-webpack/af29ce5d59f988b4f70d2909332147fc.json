{"ast":null,"code":"import _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1â€¦, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\n\nexport function materialize() {\n  return function materializeOperatorFunction(source) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nvar MaterializeOperator = /*#__PURE__*/function () {\n  function MaterializeOperator() {\n    _classCallCheck(this, MaterializeOperator);\n  }\n\n  _createClass(MaterializeOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new MaterializeSubscriber(subscriber));\n    }\n  }]);\n\n  return MaterializeOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar MaterializeSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(MaterializeSubscriber, _Subscriber);\n\n  var _super = _createSuper(MaterializeSubscriber);\n\n  function MaterializeSubscriber(destination) {\n    _classCallCheck(this, MaterializeSubscriber);\n\n    return _super.call(this, destination);\n  }\n\n  _createClass(MaterializeSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.destination.next(Notification.createNext(value));\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      var destination = this.destination;\n      destination.next(Notification.createError(err));\n      destination.complete();\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var destination = this.destination;\n      destination.next(Notification.createComplete());\n      destination.complete();\n    }\n  }]);\n\n  return MaterializeSubscriber;\n}(Subscriber);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Subject } from '../Subject';\nimport { multicast } from './multicast';\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\n\nexport function publish(selector) {\n  return selector ? multicast(function () {\n    return new Subject();\n  }, selector) : multicast(new Subject());\n}","map":{"version":3,"sources":["../../../src/internal/operators/publish.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,SAAS,SAAT,QAA0B,aAA1B;AAQA;;AAEA;;;;;;;;;;;;;;AAaA,OAAM,SAAA,OAAA,CAAwB,QAAxB,EAAyD;AAC7D,SAAO,QAAQ,GACb,SAAS,CAAC;AAAA,WAAM,IAAI,OAAJ,EAAN;AAAA,GAAD,EAAyB,QAAzB,CADI,GAEb,SAAS,CAAC,IAAI,OAAJ,EAAD,CAFX;AAGD","sourcesContent":["import { Subject } from '../Subject';\nimport { multicast } from './multicast';\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish(selector) {\n    return selector ?\n        multicast(() => new Subject(), selector) :\n        multicast(new Subject());\n}\n//# sourceMappingURL=publish.js.map"]},"metadata":{},"sourceType":"module"}
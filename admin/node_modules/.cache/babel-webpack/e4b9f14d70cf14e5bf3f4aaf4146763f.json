{"ast":null,"code":"import _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\n\nexport function zip() {\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n\n  var resultSelector = observables[observables.length - 1];\n\n  if (typeof resultSelector === 'function') {\n    observables.pop();\n  }\n\n  return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nexport var ZipOperator = /*#__PURE__*/function () {\n  function ZipOperator(resultSelector) {\n    _classCallCheck(this, ZipOperator);\n\n    this.resultSelector = resultSelector;\n  }\n\n  _createClass(ZipOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    }\n  }]);\n\n  return ZipOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nexport var ZipSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(ZipSubscriber, _Subscriber);\n\n  var _super = _createSuper(ZipSubscriber);\n\n  function ZipSubscriber(destination, resultSelector) {\n    var _this;\n\n    var values = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.create(null);\n\n    _classCallCheck(this, ZipSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.iterators = [];\n    _this.active = 0;\n    _this.resultSelector = typeof resultSelector === 'function' ? resultSelector : null;\n    _this.values = values;\n    return _this;\n  }\n\n  _createClass(ZipSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var iterators = this.iterators;\n\n      if (isArray(value)) {\n        iterators.push(new StaticArrayIterator(value));\n      } else if (typeof value[Symbol_iterator] === 'function') {\n        iterators.push(new StaticIterator(value[Symbol_iterator]()));\n      } else {\n        iterators.push(new ZipBufferIterator(this.destination, this, value));\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var iterators = this.iterators;\n      var len = iterators.length;\n\n      if (len === 0) {\n        this.destination.complete();\n        return;\n      }\n\n      this.active = len;\n\n      for (var i = 0; i < len; i++) {\n        var iterator = iterators[i];\n\n        if (iterator.stillUnsubscribed) {\n          this.add(iterator.subscribe(iterator, i));\n        } else {\n          this.active--; // not an observable\n        }\n      }\n    }\n  }, {\n    key: \"notifyInactive\",\n    value: function notifyInactive() {\n      this.active--;\n\n      if (this.active === 0) {\n        this.destination.complete();\n      }\n    }\n  }, {\n    key: \"checkIterators\",\n    value: function checkIterators() {\n      var iterators = this.iterators;\n      var len = iterators.length;\n      var destination = this.destination; // abort if not all of them have values\n\n      for (var i = 0; i < len; i++) {\n        var iterator = iterators[i];\n\n        if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n          return;\n        }\n      }\n\n      var shouldComplete = false;\n      var args = [];\n\n      for (var _i = 0; _i < len; _i++) {\n        var _iterator = iterators[_i];\n\n        var result = _iterator.next(); // check to see if it's completed now that you've gotten\n        // the next value.\n\n\n        if (_iterator.hasCompleted()) {\n          shouldComplete = true;\n        }\n\n        if (result.done) {\n          destination.complete();\n          return;\n        }\n\n        args.push(result.value);\n      }\n\n      if (this.resultSelector) {\n        this._tryresultSelector(args);\n      } else {\n        destination.next(args);\n      }\n\n      if (shouldComplete) {\n        destination.complete();\n      }\n    }\n  }, {\n    key: \"_tryresultSelector\",\n    value: function _tryresultSelector(args) {\n      var result;\n\n      try {\n        result = this.resultSelector.apply(this, args);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.destination.next(result);\n    }\n  }]);\n\n  return ZipSubscriber;\n}(Subscriber);\n\nvar StaticIterator = /*#__PURE__*/function () {\n  function StaticIterator(iterator) {\n    _classCallCheck(this, StaticIterator);\n\n    this.iterator = iterator;\n    this.nextResult = iterator.next();\n  }\n\n  _createClass(StaticIterator, [{\n    key: \"hasValue\",\n    value: function hasValue() {\n      return true;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var result = this.nextResult;\n      this.nextResult = this.iterator.next();\n      return result;\n    }\n  }, {\n    key: \"hasCompleted\",\n    value: function hasCompleted() {\n      var nextResult = this.nextResult;\n      return nextResult && nextResult.done;\n    }\n  }]);\n\n  return StaticIterator;\n}();\n\nvar StaticArrayIterator = /*#__PURE__*/function () {\n  function StaticArrayIterator(array) {\n    _classCallCheck(this, StaticArrayIterator);\n\n    this.array = array;\n    this.index = 0;\n    this.length = 0;\n    this.length = array.length;\n  }\n\n  _createClass(StaticArrayIterator, [{\n    key: Symbol_iterator,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next(value) {\n      var i = this.index++;\n      var array = this.array;\n      return i < this.length ? {\n        value: array[i],\n        done: false\n      } : {\n        value: null,\n        done: true\n      };\n    }\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return this.array.length > this.index;\n    }\n  }, {\n    key: \"hasCompleted\",\n    value: function hasCompleted() {\n      return this.array.length === this.index;\n    }\n  }]);\n\n  return StaticArrayIterator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar ZipBufferIterator = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(ZipBufferIterator, _OuterSubscriber);\n\n  var _super2 = _createSuper(ZipBufferIterator);\n\n  function ZipBufferIterator(destination, parent, observable) {\n    var _this2;\n\n    _classCallCheck(this, ZipBufferIterator);\n\n    _this2 = _super2.call(this, destination);\n    _this2.parent = parent;\n    _this2.observable = observable;\n    _this2.stillUnsubscribed = true;\n    _this2.buffer = [];\n    _this2.isComplete = false;\n    return _this2;\n  }\n\n  _createClass(ZipBufferIterator, [{\n    key: Symbol_iterator,\n    value: function value() {\n      return this;\n    } // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      var buffer = this.buffer;\n\n      if (buffer.length === 0 && this.isComplete) {\n        return {\n          value: null,\n          done: true\n        };\n      } else {\n        return {\n          value: buffer.shift(),\n          done: false\n        };\n      }\n    }\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return this.buffer.length > 0;\n    }\n  }, {\n    key: \"hasCompleted\",\n    value: function hasCompleted() {\n      return this.buffer.length === 0 && this.isComplete;\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      if (this.buffer.length > 0) {\n        this.isComplete = true;\n        this.parent.notifyInactive();\n      } else {\n        this.destination.complete();\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      this.buffer.push(innerValue);\n      this.parent.checkIterators();\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(value, index) {\n      return subscribeToResult(this, this.observable, this, index);\n    }\n  }]);\n\n  return ZipBufferIterator;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/observable/zip.ts"],"names":[],"mappings":"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","sourcesContent":["import { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip(...observables) {\n    const resultSelector = observables[observables.length - 1];\n    if (typeof resultSelector === 'function') {\n        observables.pop();\n    }\n    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nexport class ZipOperator {\n    constructor(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    }\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber extends Subscriber {\n    constructor(destination, resultSelector, values = Object.create(null)) {\n        super(destination);\n        this.iterators = [];\n        this.active = 0;\n        this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n        this.values = values;\n    }\n    _next(value) {\n        const iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    }\n    _complete() {\n        const iterators = this.iterators;\n        const len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    }\n    notifyInactive() {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    }\n    checkIterators() {\n        const iterators = this.iterators;\n        const len = iterators.length;\n        const destination = this.destination;\n        // abort if not all of them have values\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        let shouldComplete = false;\n        const args = [];\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            let result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.resultSelector) {\n            this._tryresultSelector(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    }\n    _tryresultSelector(args) {\n        let result;\n        try {\n            result = this.resultSelector.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\nclass StaticIterator {\n    constructor(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    hasValue() {\n        return true;\n    }\n    next() {\n        const result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    }\n    hasCompleted() {\n        const nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    }\n}\nclass StaticArrayIterator {\n    constructor(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    [Symbol_iterator]() {\n        return this;\n    }\n    next(value) {\n        const i = this.index++;\n        const array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    }\n    hasValue() {\n        return this.array.length > this.index;\n    }\n    hasCompleted() {\n        return this.array.length === this.index;\n    }\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator extends OuterSubscriber {\n    constructor(destination, parent, observable) {\n        super(destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    [Symbol_iterator]() {\n        return this;\n    }\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    next() {\n        const buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    }\n    hasValue() {\n        return this.buffer.length > 0;\n    }\n    hasCompleted() {\n        return this.buffer.length === 0 && this.isComplete;\n    }\n    notifyComplete() {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    }\n    subscribe(value, index) {\n        return subscribeToResult(this, this.observable, this, index);\n    }\n}\n//# sourceMappingURL=zip.js.map"]},"metadata":{},"sourceType":"module"}
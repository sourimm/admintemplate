{"ast":null,"code":"import { merge as mergeStatic } from '../observable/merge';\n/* tslint:enable:max-line-length */\n\n/**\n * @deprecated Deprecated in favor of static merge.\n */\n\nexport function merge() {\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n\n  return function (source) {\n    return source.lift.call(mergeStatic.apply(void 0, [source].concat(observables)));\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/merge.ts"],"names":[],"mappings":"AAAA,SAAS,KAAK,IAAI,WAAlB,QAAqC,qBAArC;AAiCA;;AAEA;;;;AAGA,OAAM,SAAA,KAAA,GAA0F;AAAA,oCAAjE,WAAiE;AAAjE,IAAA,WAAiE;AAAA;;AAC9F,SAAO,UAAC,MAAD;AAAA,WAA2B,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAiB,WAAW,MAAX,UAAY,MAAZ,SAAuB,WAAvB,EAAjB,CAA3B;AAAA,GAAP;AACD","sourcesContent":["import { merge as mergeStatic } from '../observable/merge';\n/* tslint:enable:max-line-length */\n/**\n * @deprecated Deprecated in favor of static merge.\n */\nexport function merge(...observables) {\n    return (source) => source.lift.call(mergeStatic(source, ...observables));\n}\n//# sourceMappingURL=merge.js.map"]},"metadata":{},"sourceType":"module"}
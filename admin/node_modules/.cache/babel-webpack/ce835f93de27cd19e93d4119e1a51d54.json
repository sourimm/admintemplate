{"ast":null,"code":"\"use strict\";\n\nvar ɵngcc0 = require('@angular/core');\n\nvar ɵngcc1 = require('./dragula.provider');\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar core_1 = require(\"@angular/core\");\n\nvar dragula_provider_1 = require(\"./dragula.provider\");\n\nvar dragula_class_1 = require(\"./dragula.class\");\n\nvar DragulaDirective = /*@__PURE__*/function () {\n  function DragulaDirective(el, dragulaService) {\n    this.el = el;\n    this.dragulaService = dragulaService;\n    this.container = el.nativeElement;\n  }\n\n  DragulaDirective.prototype.ngOnInit = function () {\n    var _this = this; // console.log(this.bag);\n\n\n    var bag = this.dragulaService.find(this.dragula);\n\n    var checkModel = function checkModel() {\n      if (_this.dragulaModel) {\n        if (_this.drake.models) {\n          _this.drake.models.push(_this.dragulaModel);\n        } else {\n          _this.drake.models = [_this.dragulaModel];\n        }\n      }\n    };\n\n    if (bag) {\n      this.drake = bag.drake;\n      checkModel();\n      this.drake.containers.push(this.container);\n    } else {\n      this.drake = dragula_class_1.dragula([this.container], Object.assign({}, this.dragulaOptions));\n      checkModel();\n      this.dragulaService.add(this.dragula, this.drake);\n    }\n  };\n\n  DragulaDirective.prototype.ngOnChanges = function (changes) {\n    // console.log('dragula.directive: ngOnChanges');\n    // console.log(changes);\n    if (changes && changes.dragulaModel) {\n      if (this.drake) {\n        if (this.drake.models) {\n          var modelIndex = this.drake.models.indexOf(changes.dragulaModel.previousValue);\n          this.drake.models.splice(modelIndex, 1, changes.dragulaModel.currentValue);\n        } else {\n          this.drake.models = [changes.dragulaModel.currentValue];\n        }\n      }\n    }\n  };\n\n  DragulaDirective.ɵfac = function DragulaDirective_Factory(t) {\n    return new (t || DragulaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DragulaService));\n  };\n\n  DragulaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DragulaDirective,\n    selectors: [[\"\", \"dragula\", \"\"]],\n    inputs: {\n      dragula: \"dragula\",\n      dragulaModel: \"dragulaModel\",\n      dragulaOptions: \"dragulaOptions\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return DragulaDirective;\n}();\n\n__decorate([core_1.Input(), __metadata(\"design:type\", String)], DragulaDirective.prototype, \"dragula\", void 0);\n\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], DragulaDirective.prototype, \"dragulaModel\", void 0);\n\n__decorate([core_1.Input(), __metadata(\"design:type\", Object)], DragulaDirective.prototype, \"dragulaOptions\", void 0);\n\nexports.DragulaDirective = DragulaDirective;","map":null,"metadata":{},"sourceType":"script"}
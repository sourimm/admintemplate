{"ast":null,"code":"import _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\n\nexport function takeLast(count) {\n  return function takeLastOperatorFunction(source) {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nvar TakeLastOperator = /*#__PURE__*/function () {\n  function TakeLastOperator(total) {\n    _classCallCheck(this, TakeLastOperator);\n\n    this.total = total;\n\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n\n  _createClass(TakeLastOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    }\n  }]);\n\n  return TakeLastOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar TakeLastSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(TakeLastSubscriber, _Subscriber);\n\n  var _super = _createSuper(TakeLastSubscriber);\n\n  function TakeLastSubscriber(destination, total) {\n    var _this;\n\n    _classCallCheck(this, TakeLastSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.total = total;\n    _this.ring = new Array();\n    _this.count = 0;\n    return _this;\n  }\n\n  _createClass(TakeLastSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var ring = this.ring;\n      var total = this.total;\n      var count = this.count++;\n\n      if (ring.length < total) {\n        ring.push(value);\n      } else {\n        var index = count % total;\n        ring[index] = value;\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var destination = this.destination;\n      var count = this.count;\n\n      if (count > 0) {\n        var total = this.count >= this.total ? this.total : this.count;\n        var ring = this.ring;\n\n        for (var i = 0; i < total; i++) {\n          var idx = count++ % total;\n          destination.next(ring[idx]);\n        }\n      }\n\n      destination.complete();\n    }\n  }]);\n\n  return TakeLastSubscriber;\n}(Subscriber);","map":null,"metadata":{},"sourceType":"module"}
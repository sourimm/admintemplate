{"ast":null,"code":"import _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\n\nexport function exhaustMap(project, resultSelector) {\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return function (source) {\n      return source.pipe(exhaustMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }));\n    };\n  }\n\n  return function (source) {\n    return source.lift(new ExhauseMapOperator(project));\n  };\n}\n\nvar ExhauseMapOperator = /*#__PURE__*/function () {\n  function ExhauseMapOperator(project) {\n    _classCallCheck(this, ExhauseMapOperator);\n\n    this.project = project;\n  }\n\n  _createClass(ExhauseMapOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n    }\n  }]);\n\n  return ExhauseMapOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar ExhaustMapSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(ExhaustMapSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(ExhaustMapSubscriber);\n\n  function ExhaustMapSubscriber(destination, project) {\n    var _this;\n\n    _classCallCheck(this, ExhaustMapSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.project = project;\n    _this.hasSubscription = false;\n    _this.hasCompleted = false;\n    _this.index = 0;\n    return _this;\n  }\n\n  _createClass(ExhaustMapSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (!this.hasSubscription) {\n        this.tryNext(value);\n      }\n    }\n  }, {\n    key: \"tryNext\",\n    value: function tryNext(value) {\n      var index = this.index++;\n      var destination = this.destination;\n\n      try {\n        var result = this.project(value, index);\n        this.hasSubscription = true;\n        this.add(subscribeToResult(this, result, value, index));\n      } catch (err) {\n        destination.error(err);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n\n      if (!this.hasSubscription) {\n        this.destination.complete();\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      this.destination.next(innerValue);\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(err) {\n      this.destination.error(err);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(innerSub) {\n      this.remove(innerSub);\n      this.hasSubscription = false;\n\n      if (this.hasCompleted) {\n        this.destination.complete();\n      }\n    }\n  }]);\n\n  return ExhaustMapSubscriber;\n}(OuterSubscriber);","map":null,"metadata":{},"sourceType":"module"}
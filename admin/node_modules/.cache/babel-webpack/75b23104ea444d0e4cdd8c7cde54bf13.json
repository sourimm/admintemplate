{"ast":null,"code":"// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\nimport { Injectable } from '@angular/core';\nimport { isString, isNumber, isFunction } from './toasty.utils';\nimport { Subject } from 'rxjs/Subject';\n/**\n * Options to configure specific Toast\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar ToastOptions = function () {\n  function ToastOptions() {}\n  /** @nocollapse */\n\n\n  ToastOptions.ctorParameters = function () {\n    return [];\n  };\n\n  ToastOptions.ɵfac = function ToastOptions_Factory(t) {\n    return new (t || ToastOptions)();\n  };\n\n  ToastOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ToastOptions,\n    factory: function factory(t) {\n      return ToastOptions.ɵfac(t);\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(ToastOptions, [{\n      type: Injectable\n    }], function () {\n      return [];\n    }, null);\n  })();\n\n  return ToastOptions;\n}();\n\nexport { ToastOptions };\n/**\n * Structrure of Toast\n */\n\nvar ToastData = function () {\n  function ToastData() {}\n  /** @nocollapse */\n\n\n  ToastData.ctorParameters = function () {\n    return [];\n  };\n\n  ToastData.ɵfac = function ToastData_Factory(t) {\n    return new (t || ToastData)();\n  };\n\n  ToastData.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ToastData,\n    factory: function factory(t) {\n      return ToastData.ɵfac(t);\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(ToastData, [{\n      type: Injectable\n    }], function () {\n      return [];\n    }, null);\n  })();\n\n  return ToastData;\n}();\n\nexport { ToastData };\n/**\n * Default configuration foa all toats and toasty container\n */\n\nvar ToastyConfig = function () {\n  function ToastyConfig() {\n    // Maximum number of toasties to show at once\n    this.limit = 5; // Whether to show the 'X' icon to close the toast\n\n    this.showClose = true; // The window position where the toast pops up\n\n    this.position = 'bottom-right'; // How long (in miliseconds) the toasty shows before it's removed. Set to null/0 to turn off.\n\n    this.timeout = 5000; // What theme to use\n\n    this.theme = 'default';\n  }\n  /** @nocollapse */\n\n\n  ToastyConfig.ctorParameters = function () {\n    return [];\n  };\n\n  ToastyConfig.ɵfac = function ToastyConfig_Factory(t) {\n    return new (t || ToastyConfig)();\n  };\n\n  ToastyConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ToastyConfig,\n    factory: function factory(t) {\n      return ToastyConfig.ɵfac(t);\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(ToastyConfig, [{\n      type: Injectable\n    }], function () {\n      return [];\n    }, null);\n  })();\n\n  return ToastyConfig;\n}();\n\nexport { ToastyConfig };\nexport var ToastyEventType;\n\n(function (ToastyEventType) {\n  ToastyEventType[ToastyEventType[\"ADD\"] = 0] = \"ADD\";\n  ToastyEventType[ToastyEventType[\"CLEAR\"] = 1] = \"CLEAR\";\n  ToastyEventType[ToastyEventType[\"CLEAR_ALL\"] = 2] = \"CLEAR_ALL\";\n})(ToastyEventType || (ToastyEventType = {}));\n\nvar ToastyEvent = function () {\n  function ToastyEvent(type, value) {\n    this.type = type;\n    this.value = value;\n  }\n\n  return ToastyEvent;\n}();\n\nexport { ToastyEvent };\nexport function toastyServiceFactory(config) {\n  return new ToastyService(config);\n}\n/**\n * Toasty service helps create different kinds of Toasts\n */\n\nvar ToastyService = function () {\n  function ToastyService(config) {\n    this.config = config; // Init the counter\n\n    this.uniqueCounter = 0; // ToastData event emitter\n    // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();\n    // Clear event emitter\n    // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();\n\n    this.eventSource = new Subject();\n    this.events = this.eventSource.asObservable();\n  }\n  /**\n   * Get list of toats\n   */\n  // getToasts(): Observable<ToastData> {\n  //   return this.toastsEmitter.asObservable();\n  // }\n  // getClear(): Observable<number> {\n  //   return this.clearEmitter.asObservable();\n  // }\n\n  /**\n   * Create Toast of a default type\n   */\n\n\n  ToastyService.prototype.default = function (options) {\n    this.add(options, 'default');\n  };\n  /**\n   * Create Toast of info type\n   * @param  {object} options Individual toasty config overrides\n   */\n\n\n  ToastyService.prototype.info = function (options) {\n    this.add(options, 'info');\n  };\n  /**\n   * Create Toast of success type\n   * @param  {object} options Individual toasty config overrides\n   */\n\n\n  ToastyService.prototype.success = function (options) {\n    this.add(options, 'success');\n  };\n  /**\n   * Create Toast of wait type\n   * @param  {object} options Individual toasty config overrides\n   */\n\n\n  ToastyService.prototype.wait = function (options) {\n    this.add(options, 'wait');\n  };\n  /**\n   * Create Toast of error type\n   * @param  {object} options Individual toasty config overrides\n   */\n\n\n  ToastyService.prototype.error = function (options) {\n    this.add(options, 'error');\n  };\n  /**\n   * Create Toast of warning type\n   * @param  {object} options Individual toasty config overrides\n   */\n\n\n  ToastyService.prototype.warning = function (options) {\n    this.add(options, 'warning');\n  }; // Add a new toast item\n\n\n  ToastyService.prototype.add = function (options, type) {\n    var toastyOptions;\n\n    if (isString(options) && options !== '' || isNumber(options)) {\n      toastyOptions = {\n        title: options.toString()\n      };\n    } else {\n      toastyOptions = options;\n    }\n\n    if (!toastyOptions || !toastyOptions.title && !toastyOptions.msg) {\n      throw new Error('ng2-toasty: No toast title or message specified!');\n    }\n\n    type = type || 'default'; // Set a unique counter for an id\n\n    this.uniqueCounter++; // Set the local vs global config items\n\n    var showClose = this._checkConfigItem(this.config, toastyOptions, 'showClose'); // If we have a theme set, make sure it's a valid one\n\n\n    var theme;\n\n    if (toastyOptions.theme) {\n      theme = ToastyService.THEMES.indexOf(toastyOptions.theme) > -1 ? toastyOptions.theme : this.config.theme;\n    } else {\n      theme = this.config.theme;\n    }\n\n    var toast = {\n      id: this.uniqueCounter,\n      title: toastyOptions.title,\n      msg: toastyOptions.msg,\n      showClose: showClose,\n      type: 'toasty-type-' + type,\n      theme: 'toasty-theme-' + theme,\n      onAdd: toastyOptions.onAdd && isFunction(toastyOptions.onAdd) ? toastyOptions.onAdd : null,\n      onRemove: toastyOptions.onRemove && isFunction(toastyOptions.onRemove) ? toastyOptions.onRemove : null\n    }; // If there's a timeout individually or globally, set the toast to timeout\n    // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.\n\n    toast.timeout = toastyOptions.hasOwnProperty('timeout') ? toastyOptions.timeout : this.config.timeout; // Push up a new toast item\n    // this.toastsSubscriber.next(toast);\n    // this.toastsEmitter.next(toast);\n\n    this.emitEvent(new ToastyEvent(ToastyEventType.ADD, toast)); // If we have a onAdd function, call it here\n\n    if (toastyOptions.onAdd && isFunction(toastyOptions.onAdd)) {\n      toastyOptions.onAdd.call(this, toast);\n    }\n  }; // Clear all toasts\n\n\n  ToastyService.prototype.clearAll = function () {\n    // this.clearEmitter.next(null);\n    this.emitEvent(new ToastyEvent(ToastyEventType.CLEAR_ALL));\n  }; // Clear the specific one\n\n\n  ToastyService.prototype.clear = function (id) {\n    // this.clearEmitter.next(id);\n    this.emitEvent(new ToastyEvent(ToastyEventType.CLEAR, id));\n  }; // Checks whether the local option is set, if not,\n  // checks the global config\n\n\n  ToastyService.prototype._checkConfigItem = function (config, options, property) {\n    if (options[property] === false) {\n      return false;\n    } else if (!options[property]) {\n      return config[property];\n    } else {\n      return true;\n    }\n  };\n\n  ToastyService.prototype.emitEvent = function (event) {\n    if (this.eventSource) {\n      // Push up a new event\n      this.eventSource.next(event);\n    }\n  }; // Allowed THEMES\n\n\n  ToastyService.THEMES = ['default', 'material', 'bootstrap'];\n  /** @nocollapse */\n\n  ToastyService.ctorParameters = function () {\n    return [{\n      type: ToastyConfig\n    }];\n  };\n\n  ToastyService.ɵfac = function ToastyService_Factory(t) {\n    return new (t || ToastyService)(ɵngcc0.ɵɵinject(ToastyConfig));\n  };\n\n  ToastyService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ToastyService,\n    factory: function factory(t) {\n      return ToastyService.ɵfac(t);\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(ToastyService, [{\n      type: Injectable\n    }], function () {\n      return [{\n        type: ToastyConfig\n      }];\n    }, null);\n  })();\n\n  return ToastyService;\n}();\n\nexport { ToastyService };","map":{"version":3,"sources":["toasty.service.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\nimport { Injectable } from '@angular/core';\nimport { isString, isNumber, isFunction } from './toasty.utils';\nimport { Subject } from 'rxjs/Subject';\n/**\n * Options to configure specific Toast\n */\nvar ToastOptions = (function () {\n    function ToastOptions() {\n    }\n    ToastOptions.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ToastOptions.ctorParameters = function () { return []; };\n    return ToastOptions;\n}());\nexport { ToastOptions };\n/**\n * Structrure of Toast\n */\nvar ToastData = (function () {\n    function ToastData() {\n    }\n    ToastData.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ToastData.ctorParameters = function () { return []; };\n    return ToastData;\n}());\nexport { ToastData };\n/**\n * Default configuration foa all toats and toasty container\n */\nvar ToastyConfig = (function () {\n    function ToastyConfig() {\n        // Maximum number of toasties to show at once\n        this.limit = 5;\n        // Whether to show the 'X' icon to close the toast\n        this.showClose = true;\n        // The window position where the toast pops up\n        this.position = 'bottom-right';\n        // How long (in miliseconds) the toasty shows before it's removed. Set to null/0 to turn off.\n        this.timeout = 5000;\n        // What theme to use\n        this.theme = 'default';\n    }\n    ToastyConfig.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ToastyConfig.ctorParameters = function () { return []; };\n    return ToastyConfig;\n}());\nexport { ToastyConfig };\nexport var ToastyEventType;\n(function (ToastyEventType) {\n    ToastyEventType[ToastyEventType[\"ADD\"] = 0] = \"ADD\";\n    ToastyEventType[ToastyEventType[\"CLEAR\"] = 1] = \"CLEAR\";\n    ToastyEventType[ToastyEventType[\"CLEAR_ALL\"] = 2] = \"CLEAR_ALL\";\n})(ToastyEventType || (ToastyEventType = {}));\nvar ToastyEvent = (function () {\n    function ToastyEvent(type, value) {\n        this.type = type;\n        this.value = value;\n    }\n    return ToastyEvent;\n}());\nexport { ToastyEvent };\nexport function toastyServiceFactory(config) {\n    return new ToastyService(config);\n}\n/**\n * Toasty service helps create different kinds of Toasts\n */\nvar ToastyService = (function () {\n    function ToastyService(config) {\n        this.config = config;\n        // Init the counter\n        this.uniqueCounter = 0;\n        // ToastData event emitter\n        // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();\n        // Clear event emitter\n        // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();\n        this.eventSource = new Subject();\n        this.events = this.eventSource.asObservable();\n    }\n    /**\n     * Get list of toats\n     */\n    // getToasts(): Observable<ToastData> {\n    //   return this.toastsEmitter.asObservable();\n    // }\n    // getClear(): Observable<number> {\n    //   return this.clearEmitter.asObservable();\n    // }\n    /**\n     * Create Toast of a default type\n     */\n    ToastyService.prototype.default = function (options) {\n        this.add(options, 'default');\n    };\n    /**\n     * Create Toast of info type\n     * @param  {object} options Individual toasty config overrides\n     */\n    ToastyService.prototype.info = function (options) {\n        this.add(options, 'info');\n    };\n    /**\n     * Create Toast of success type\n     * @param  {object} options Individual toasty config overrides\n     */\n    ToastyService.prototype.success = function (options) {\n        this.add(options, 'success');\n    };\n    /**\n     * Create Toast of wait type\n     * @param  {object} options Individual toasty config overrides\n     */\n    ToastyService.prototype.wait = function (options) {\n        this.add(options, 'wait');\n    };\n    /**\n     * Create Toast of error type\n     * @param  {object} options Individual toasty config overrides\n     */\n    ToastyService.prototype.error = function (options) {\n        this.add(options, 'error');\n    };\n    /**\n     * Create Toast of warning type\n     * @param  {object} options Individual toasty config overrides\n     */\n    ToastyService.prototype.warning = function (options) {\n        this.add(options, 'warning');\n    };\n    // Add a new toast item\n    ToastyService.prototype.add = function (options, type) {\n        var toastyOptions;\n        if (isString(options) && options !== '' || isNumber(options)) {\n            toastyOptions = {\n                title: options.toString()\n            };\n        }\n        else {\n            toastyOptions = options;\n        }\n        if (!toastyOptions || !toastyOptions.title && !toastyOptions.msg) {\n            throw new Error('ng2-toasty: No toast title or message specified!');\n        }\n        type = type || 'default';\n        // Set a unique counter for an id\n        this.uniqueCounter++;\n        // Set the local vs global config items\n        var showClose = this._checkConfigItem(this.config, toastyOptions, 'showClose');\n        // If we have a theme set, make sure it's a valid one\n        var theme;\n        if (toastyOptions.theme) {\n            theme = ToastyService.THEMES.indexOf(toastyOptions.theme) > -1 ? toastyOptions.theme : this.config.theme;\n        }\n        else {\n            theme = this.config.theme;\n        }\n        var toast = {\n            id: this.uniqueCounter,\n            title: toastyOptions.title,\n            msg: toastyOptions.msg,\n            showClose: showClose,\n            type: 'toasty-type-' + type,\n            theme: 'toasty-theme-' + theme,\n            onAdd: toastyOptions.onAdd && isFunction(toastyOptions.onAdd) ? toastyOptions.onAdd : null,\n            onRemove: toastyOptions.onRemove && isFunction(toastyOptions.onRemove) ? toastyOptions.onRemove : null\n        };\n        // If there's a timeout individually or globally, set the toast to timeout\n        // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.\n        toast.timeout = toastyOptions.hasOwnProperty('timeout') ? toastyOptions.timeout : this.config.timeout;\n        // Push up a new toast item\n        // this.toastsSubscriber.next(toast);\n        // this.toastsEmitter.next(toast);\n        this.emitEvent(new ToastyEvent(ToastyEventType.ADD, toast));\n        // If we have a onAdd function, call it here\n        if (toastyOptions.onAdd && isFunction(toastyOptions.onAdd)) {\n            toastyOptions.onAdd.call(this, toast);\n        }\n    };\n    // Clear all toasts\n    ToastyService.prototype.clearAll = function () {\n        // this.clearEmitter.next(null);\n        this.emitEvent(new ToastyEvent(ToastyEventType.CLEAR_ALL));\n    };\n    // Clear the specific one\n    ToastyService.prototype.clear = function (id) {\n        // this.clearEmitter.next(id);\n        this.emitEvent(new ToastyEvent(ToastyEventType.CLEAR, id));\n    };\n    // Checks whether the local option is set, if not,\n    // checks the global config\n    ToastyService.prototype._checkConfigItem = function (config, options, property) {\n        if (options[property] === false) {\n            return false;\n        }\n        else if (!options[property]) {\n            return config[property];\n        }\n        else {\n            return true;\n        }\n    };\n    ToastyService.prototype.emitEvent = function (event) {\n        if (this.eventSource) {\n            // Push up a new event\n            this.eventSource.next(event);\n        }\n    };\n    // Allowed THEMES\n    ToastyService.THEMES = ['default', 'material', 'bootstrap'];\n    ToastyService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ToastyService.ctorParameters = function () { return [\n        { type: ToastyConfig, },\n    ]; };\n    return ToastyService;\n}());\nexport { ToastyService };\n"]},"metadata":{},"sourceType":"module"}
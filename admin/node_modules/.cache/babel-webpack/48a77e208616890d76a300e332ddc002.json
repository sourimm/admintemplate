{"ast":null,"code":"import _slicedToArray from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __param } from 'tslib';\nimport { InjectionToken, Inject, PLATFORM_ID, Optional, Injectable, EventEmitter, ElementRef, NgZone, Input, HostBinding, Output, Component, NgModule, HostListener, Directive, forwardRef } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\n\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n  window.ng2recaptchaloaded = function () {\n    onLoaded(grecaptcha);\n  };\n\n  var script = document.createElement('script');\n  script.innerHTML = '';\n  var baseUrl = url || 'https://www.google.com/recaptcha/api.js';\n  script.src = \"\".concat(baseUrl, \"?render=\").concat(renderMode, \"&onload=ng2recaptchaloaded\").concat(urlParams);\n\n  if (nonce) {\n    // tslint:disable-next-line:no-any Remove \"any\" cast once we upgrade Angular to 7 and TypeScript along with it\n    script.nonce = nonce;\n  }\n\n  script.async = true;\n  script.defer = true;\n  document.head.appendChild(script);\n}\n\nvar RECAPTCHA_LANGUAGE = new InjectionToken('recaptcha-language');\nvar RECAPTCHA_BASE_URL = new InjectionToken('recaptcha-base-url');\nvar RECAPTCHA_NONCE = new InjectionToken('recaptcha-nonce-tag');\nvar RECAPTCHA_SETTINGS = new InjectionToken('recaptcha-settings');\nvar RECAPTCHA_V3_SITE_KEY = new InjectionToken('recaptcha-v3-site-key');\n\nvar RecaptchaLoaderService = RecaptchaLoaderService_1 = /*#__PURE__*/function () {\n  function RecaptchaLoaderService( // tslint:disable-next-line:no-any\n  platformId, language, baseUrl, nonce, v3SiteKey) {\n    _classCallCheck(this, RecaptchaLoaderService);\n\n    this.platformId = platformId;\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.nonce = nonce;\n    this.v3SiteKey = v3SiteKey;\n    this.init();\n    this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService_1.ready.asObservable() : of();\n  }\n  /** @internal */\n\n\n  _createClass(RecaptchaLoaderService, [{\n    key: \"init\",\n    value: function init() {\n      if (RecaptchaLoaderService_1.ready) {\n        return;\n      }\n\n      if (isPlatformBrowser(this.platformId)) {\n        var subject = new BehaviorSubject(null);\n        RecaptchaLoaderService_1.ready = subject;\n        var langParam = this.language ? '&hl=' + this.language : '';\n        var renderMode = this.v3SiteKey || 'explicit';\n        loadScript(renderMode, function (grecaptcha) {\n          return subject.next(grecaptcha);\n        }, langParam, this.baseUrl, this.nonce);\n      }\n    }\n  }]);\n\n  return RecaptchaLoaderService;\n}();\n\nRecaptchaLoaderService.ɵfac = function RecaptchaLoaderService_Factory(t) {\n  return new (t || RecaptchaLoaderService)(ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(RECAPTCHA_LANGUAGE, 8), ɵngcc0.ɵɵinject(RECAPTCHA_BASE_URL, 8), ɵngcc0.ɵɵinject(RECAPTCHA_NONCE, 8), ɵngcc0.ɵɵinject(RECAPTCHA_V3_SITE_KEY, 8));\n};\n\nRecaptchaLoaderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: RecaptchaLoaderService,\n  factory: function factory(t) {\n    return RecaptchaLoaderService.ɵfac(t);\n  }\n});\n/**\n * @internal\n * @nocollapse\n */\n\nRecaptchaLoaderService.ready = null;\n\nRecaptchaLoaderService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_LANGUAGE]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_BASE_URL]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_NONCE]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_V3_SITE_KEY]\n    }]\n  }];\n};\n\nRecaptchaLoaderService = RecaptchaLoaderService_1 = __decorate([__param(0, Inject(PLATFORM_ID)), __param(1, Optional()), __param(1, Inject(RECAPTCHA_LANGUAGE)), __param(2, Optional()), __param(2, Inject(RECAPTCHA_BASE_URL)), __param(3, Optional()), __param(3, Inject(RECAPTCHA_NONCE)), __param(4, Optional()), __param(4, Inject(RECAPTCHA_V3_SITE_KEY))], RecaptchaLoaderService);\nvar RecaptchaLoaderService_1;\nvar nextId = 0;\n\nvar RecaptchaComponent = /*#__PURE__*/function () {\n  function RecaptchaComponent(elementRef, loader, zone, settings) {\n    _classCallCheck(this, RecaptchaComponent);\n\n    this.elementRef = elementRef;\n    this.loader = loader;\n    this.zone = zone;\n    this.id = \"ngrecaptcha-\".concat(nextId++);\n    this.resolved = new EventEmitter();\n\n    if (settings) {\n      this.siteKey = settings.siteKey;\n      this.theme = settings.theme;\n      this.type = settings.type;\n      this.size = settings.size;\n      this.badge = settings.badge;\n    }\n  }\n\n  _createClass(RecaptchaComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this = this;\n\n      this.subscription = this.loader.ready.subscribe(function (grecaptcha) {\n        if (grecaptcha != null && grecaptcha.render instanceof Function) {\n          _this.grecaptcha = grecaptcha;\n\n          _this.renderRecaptcha();\n        }\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // reset the captcha to ensure it does not leave anything behind\n      // after the component is no longer needed\n      this.grecaptchaReset();\n\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      if (this.size !== 'invisible') {\n        return;\n      }\n\n      if (this.widget != null) {\n        this.grecaptcha.execute(this.widget);\n      } else {\n        // delay execution of recaptcha until it actually renders\n        this.executeRequested = true;\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.widget != null) {\n        if (this.grecaptcha.getResponse(this.widget)) {\n          // Only emit an event in case if something would actually change.\n          // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n          // on a non-resolved captcha.\n          this.resolved.emit(null);\n        }\n\n        this.grecaptchaReset();\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"expired\",\n    value: function expired() {\n      this.resolved.emit(null);\n    }\n    /** @internal */\n\n  }, {\n    key: \"captchaResponseCallback\",\n    value: function captchaResponseCallback(response) {\n      this.resolved.emit(response);\n    }\n    /** @internal */\n\n  }, {\n    key: \"grecaptchaReset\",\n    value: function grecaptchaReset() {\n      var _this2 = this;\n\n      if (this.widget != null) {\n        this.zone.runOutsideAngular(function () {\n          return _this2.grecaptcha.reset(_this2.widget);\n        });\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"renderRecaptcha\",\n    value: function renderRecaptcha() {\n      var _this3 = this;\n\n      this.widget = this.grecaptcha.render(this.elementRef.nativeElement, {\n        badge: this.badge,\n        callback: function callback(response) {\n          _this3.zone.run(function () {\n            return _this3.captchaResponseCallback(response);\n          });\n        },\n        'expired-callback': function expiredCallback() {\n          _this3.zone.run(function () {\n            return _this3.expired();\n          });\n        },\n        sitekey: this.siteKey,\n        size: this.size,\n        tabindex: this.tabIndex,\n        theme: this.theme,\n        type: this.type\n      });\n\n      if (this.executeRequested === true) {\n        this.executeRequested = false;\n        this.execute();\n      }\n    }\n  }]);\n\n  return RecaptchaComponent;\n}();\n\nRecaptchaComponent.ɵfac = function RecaptchaComponent_Factory(t) {\n  return new (t || RecaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(RecaptchaLoaderService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(RECAPTCHA_SETTINGS, 8));\n};\n\nRecaptchaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: RecaptchaComponent,\n  selectors: [[\"re-captcha\"]],\n  hostVars: 1,\n  hostBindings: function RecaptchaComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    siteKey: \"siteKey\",\n    theme: \"theme\",\n    type: \"type\",\n    size: \"size\",\n    badge: \"badge\",\n    tabIndex: \"tabIndex\"\n  },\n  outputs: {\n    resolved: \"resolved\"\n  },\n  exportAs: [\"reCaptcha\"],\n  decls: 0,\n  vars: 0,\n  template: function RecaptchaComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\nRecaptchaComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: RecaptchaLoaderService\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_SETTINGS]\n    }]\n  }];\n};\n\n__decorate([Input(), HostBinding('attr.id')], RecaptchaComponent.prototype, \"id\", void 0);\n\n__decorate([Input()], RecaptchaComponent.prototype, \"siteKey\", void 0);\n\n__decorate([Input()], RecaptchaComponent.prototype, \"theme\", void 0);\n\n__decorate([Input()], RecaptchaComponent.prototype, \"type\", void 0);\n\n__decorate([Input()], RecaptchaComponent.prototype, \"size\", void 0);\n\n__decorate([Input()], RecaptchaComponent.prototype, \"tabIndex\", void 0);\n\n__decorate([Input()], RecaptchaComponent.prototype, \"badge\", void 0);\n\n__decorate([Output()], RecaptchaComponent.prototype, \"resolved\", void 0);\n\nRecaptchaComponent = __decorate([__param(3, Optional()), __param(3, Inject(RECAPTCHA_SETTINGS))], RecaptchaComponent);\n\nvar RecaptchaCommonModule = function RecaptchaCommonModule() {\n  _classCallCheck(this, RecaptchaCommonModule);\n};\n\nRecaptchaCommonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: RecaptchaCommonModule\n});\nRecaptchaCommonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function RecaptchaCommonModule_Factory(t) {\n    return new (t || RecaptchaCommonModule)();\n  }\n});\n\nvar RecaptchaModule = RecaptchaModule_1 = /*#__PURE__*/function () {\n  function RecaptchaModule() {\n    _classCallCheck(this, RecaptchaModule);\n  }\n\n  _createClass(RecaptchaModule, null, [{\n    key: \"forRoot\",\n    // We need this to maintain backwards-compatibility with v4. Removing this will be a breaking change\n    value: function forRoot() {\n      return RecaptchaModule_1;\n    }\n  }]);\n\n  return RecaptchaModule;\n}();\n\nRecaptchaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: RecaptchaModule\n});\nRecaptchaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function RecaptchaModule_Factory(t) {\n    return new (t || RecaptchaModule)();\n  },\n  providers: [RecaptchaLoaderService],\n  imports: [[RecaptchaCommonModule]]\n});\nvar RecaptchaModule_1;\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\n\nvar ReCaptchaV3Service = /*#__PURE__*/function () {\n  function ReCaptchaV3Service(zone, siteKey, // tslint:disable-next-line:no-any\n  platformId, baseUrl, nonce, language) {\n    var _this4 = this;\n\n    _classCallCheck(this, ReCaptchaV3Service);\n\n    /** @internal */\n    this.onLoadComplete = function (grecaptcha) {\n      _this4.grecaptcha = grecaptcha;\n\n      if (_this4.actionBacklog && _this4.actionBacklog.length > 0) {\n        _this4.actionBacklog.forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              action = _ref2[0],\n              subject = _ref2[1];\n\n          return _this4.executeActionWithSubject(action, subject);\n        });\n\n        _this4.actionBacklog = undefined;\n      }\n    };\n\n    this.zone = zone;\n    this.isBrowser = isPlatformBrowser(platformId);\n    this.siteKey = siteKey;\n    this.nonce = nonce;\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.init();\n  }\n\n  _createClass(ReCaptchaV3Service, [{\n    key: \"execute\",\n\n    /**\n     * Executes the provided `action` with reCAPTCHA v3 API.\n     * Use the emitted token value for verification purposes on the backend.\n     *\n     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n     * https://developers.google.com/recaptcha/docs/v3.\n     *\n     * @param {string} action the action to execute\n     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n     * The returned `Observable` completes immediately after emitting a value.\n     */\n    value: function execute(action) {\n      var subject = new Subject();\n\n      if (this.isBrowser) {\n        if (!this.grecaptcha) {\n          // todo: add to array of later executions\n          if (!this.actionBacklog) {\n            this.actionBacklog = [];\n          }\n\n          this.actionBacklog.push([action, subject]);\n        } else {\n          this.executeActionWithSubject(action, subject);\n        }\n      }\n\n      return subject.asObservable();\n    }\n    /** @internal */\n\n  }, {\n    key: \"executeActionWithSubject\",\n    value: function executeActionWithSubject(action, subject) {\n      var _this5 = this;\n\n      this.zone.runOutsideAngular(function () {\n        // tslint:disable-next-line:no-any\n        _this5.grecaptcha.execute(_this5.siteKey, {\n          action: action\n        }).then(function (token) {\n          _this5.zone.run(function () {\n            subject.next(token);\n            subject.complete();\n\n            if (_this5.onExecuteSubject) {\n              _this5.onExecuteSubject.next({\n                action: action,\n                token: token\n              });\n            }\n          }); // tslint:disable-next-line:no-any\n\n        }, function (error) {\n          _this5.zone.run(function () {\n            subject.error(error);\n\n            if (_this5.onExecuteErrorSubject) {\n              _this5.onExecuteErrorSubject.next({\n                action: action,\n                error: error\n              });\n            }\n          });\n        });\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"init\",\n    value: function init() {\n      if (this.isBrowser) {\n        if ('grecaptcha' in window) {\n          this.grecaptcha = grecaptcha;\n        } else {\n          var langParam = this.language ? '&hl=' + this.language : '';\n          loadScript(this.siteKey, this.onLoadComplete, langParam, this.baseUrl, this.nonce);\n        }\n      }\n    }\n  }, {\n    key: \"onExecute\",\n    get: function get() {\n      if (!this.onExecuteSubject) {\n        this.onExecuteSubject = new Subject();\n        this.onExecuteObservable = this.onExecuteSubject.asObservable();\n      }\n\n      return this.onExecuteObservable;\n    }\n  }, {\n    key: \"onExecuteError\",\n    get: function get() {\n      if (!this.onExecuteErrorSubject) {\n        this.onExecuteErrorSubject = new Subject();\n        this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n      }\n\n      return this.onExecuteErrorObservable;\n    }\n  }]);\n\n  return ReCaptchaV3Service;\n}();\n\nReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) {\n  return new (t || ReCaptchaV3Service)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(RECAPTCHA_V3_SITE_KEY), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(RECAPTCHA_BASE_URL, 8), ɵngcc0.ɵɵinject(RECAPTCHA_NONCE, 8), ɵngcc0.ɵɵinject(RECAPTCHA_LANGUAGE, 8));\n};\n\nReCaptchaV3Service.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ReCaptchaV3Service,\n  factory: function factory(t) {\n    return ReCaptchaV3Service.ɵfac(t);\n  }\n});\n\nReCaptchaV3Service.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [RECAPTCHA_V3_SITE_KEY]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_BASE_URL]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_NONCE]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_LANGUAGE]\n    }]\n  }];\n};\n\nReCaptchaV3Service = __decorate([__param(1, Inject(RECAPTCHA_V3_SITE_KEY)), __param(2, Inject(PLATFORM_ID)), __param(3, Optional()), __param(3, Inject(RECAPTCHA_BASE_URL)), __param(4, Optional()), __param(4, Inject(RECAPTCHA_NONCE)), __param(5, Optional()), __param(5, Inject(RECAPTCHA_LANGUAGE))], ReCaptchaV3Service);\n\nvar RecaptchaV3Module = function RecaptchaV3Module() {\n  _classCallCheck(this, RecaptchaV3Module);\n};\n\nRecaptchaV3Module.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: RecaptchaV3Module\n});\nRecaptchaV3Module.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function RecaptchaV3Module_Factory(t) {\n    return new (t || RecaptchaV3Module)();\n  },\n  providers: [ReCaptchaV3Service]\n});\n\nvar RecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = /*#__PURE__*/function () {\n  function RecaptchaValueAccessorDirective(host) {\n    _classCallCheck(this, RecaptchaValueAccessorDirective);\n\n    this.host = host;\n  }\n\n  _createClass(RecaptchaValueAccessorDirective, [{\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      if (!value) {\n        this.host.reset();\n      }\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n  }, {\n    key: \"onResolve\",\n    value: function onResolve($event) {\n      if (this.onChange) {\n        this.onChange($event);\n      }\n\n      if (this.onTouched) {\n        this.onTouched();\n      }\n    }\n  }]);\n\n  return RecaptchaValueAccessorDirective;\n}();\n\nRecaptchaValueAccessorDirective.ɵfac = function RecaptchaValueAccessorDirective_Factory(t) {\n  return new (t || RecaptchaValueAccessorDirective)(ɵngcc0.ɵɵdirectiveInject(RecaptchaComponent));\n};\n\nRecaptchaValueAccessorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: RecaptchaValueAccessorDirective,\n  selectors: [[\"re-captcha\", \"formControlName\", \"\"], [\"re-captcha\", \"formControl\", \"\"], [\"re-captcha\", \"ngModel\", \"\"]],\n  hostBindings: function RecaptchaValueAccessorDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"resolved\", function RecaptchaValueAccessorDirective_resolved_HostBindingHandler($event) {\n        return ctx.onResolve($event);\n      });\n    }\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line:no-forward-ref\n    useExisting: forwardRef(function () {\n      return RecaptchaValueAccessorDirective_1;\n    })\n  }])]\n});\n\nRecaptchaValueAccessorDirective.ctorParameters = function () {\n  return [{\n    type: RecaptchaComponent\n  }];\n};\n\n__decorate([HostListener('resolved', ['$event'])], RecaptchaValueAccessorDirective.prototype, \"onResolve\", null);\n\nvar RecaptchaValueAccessorDirective_1;\n\nvar RecaptchaFormsModule = function RecaptchaFormsModule() {\n  _classCallCheck(this, RecaptchaFormsModule);\n};\n\nRecaptchaFormsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: RecaptchaFormsModule\n});\nRecaptchaFormsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function RecaptchaFormsModule_Factory(t) {\n    return new (t || RecaptchaFormsModule)();\n  },\n  imports: [[FormsModule, RecaptchaCommonModule]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RecaptchaLoaderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_LANGUAGE]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_BASE_URL]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_NONCE]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_V3_SITE_KEY]\n      }]\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RecaptchaComponent, [{\n    type: Component,\n    args: [{\n      exportAs: 'reCaptcha',\n      selector: 're-captcha',\n      template: \"\"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: RecaptchaLoaderService\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_SETTINGS]\n      }]\n    }];\n  }, {\n    id: [{\n      type: Input\n    }, {\n      type: HostBinding,\n      args: ['attr.id']\n    }],\n    resolved: [{\n      type: Output\n    }],\n    siteKey: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    badge: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RecaptchaCommonModule, {\n    declarations: [RecaptchaComponent],\n    exports: [RecaptchaComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RecaptchaCommonModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RecaptchaComponent],\n      exports: [RecaptchaComponent]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RecaptchaModule, {\n    imports: [RecaptchaCommonModule],\n    exports: [RecaptchaComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RecaptchaModule, [{\n    type: NgModule,\n    args: [{\n      exports: [RecaptchaComponent],\n      imports: [RecaptchaCommonModule],\n      providers: [RecaptchaLoaderService]\n    }]\n  }], null, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [RECAPTCHA_V3_SITE_KEY]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_BASE_URL]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_NONCE]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [RECAPTCHA_LANGUAGE]\n      }]\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RecaptchaV3Module, [{\n    type: NgModule,\n    args: [{\n      providers: [ReCaptchaV3Service]\n    }]\n  }], null, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RecaptchaValueAccessorDirective, [{\n    type: Directive,\n    args: [{\n      providers: [{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(function () {\n          return RecaptchaValueAccessorDirective_1;\n        })\n      }],\n      // tslint:disable-next-line:directive-selector\n      selector: 're-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]'\n    }]\n  }], function () {\n    return [{\n      type: RecaptchaComponent\n    }];\n  }, {\n    onResolve: [{\n      type: HostListener,\n      args: ['resolved', ['$event']]\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RecaptchaFormsModule, {\n    declarations: function declarations() {\n      return [RecaptchaValueAccessorDirective];\n    },\n    imports: function imports() {\n      return [FormsModule, RecaptchaCommonModule];\n    },\n    exports: function exports() {\n      return [RecaptchaValueAccessorDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RecaptchaFormsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RecaptchaValueAccessorDirective],\n      exports: [RecaptchaValueAccessorDirective],\n      imports: [FormsModule, RecaptchaCommonModule]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective, RecaptchaCommonModule as ɵa };","map":{"version":3,"sources":["ng-recaptcha/recaptcha/load-script.ts","ng-recaptcha/recaptcha/tokens.ts","ng-recaptcha/recaptcha/recaptcha-loader.service.ts","ng-recaptcha/recaptcha/recaptcha.component.ts","ng-recaptcha/recaptcha/recaptcha-common.module.ts","ng-recaptcha/recaptcha/recaptcha.module.ts","ng-recaptcha/recaptcha/recaptcha-v3.service.ts","ng-recaptcha/recaptcha/recaptcha-v3.module.ts","ng-recaptcha/recaptcha/recaptcha-value-accessor.directive.ts","ng-recaptcha/recaptcha/recaptcha-forms.module.ts","ng-recaptcha/ng-recaptcha.ts"],"names":["tslib_1.__param","tslib_1.__decorate"],"mappings":"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","sourcesContent":["declare global {\n  interface Window {\n    ng2recaptchaloaded: () => void;\n  }\n}\n\nexport function loadScript(\n  renderMode: 'explicit' | string,\n  onLoaded: (grecaptcha: ReCaptchaV2.ReCaptcha) => void,\n  urlParams: string,\n  url?: string,\n  nonce?: string,\n) {\n  window.ng2recaptchaloaded = () => {\n    onLoaded(grecaptcha);\n  };\n  const script = document.createElement('script');\n  script.innerHTML = '';\n  const baseUrl = url || 'https://www.google.com/recaptcha/api.js';\n\n  script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n  if (nonce) {\n    // tslint:disable-next-line:no-any Remove \"any\" cast once we upgrade Angular to 7 and TypeScript along with it\n    (script as any).nonce = nonce;\n  }\n  script.async = true;\n  script.defer = true;\n  document.head.appendChild(script);\n}\n","import {\n  InjectionToken,\n} from '@angular/core';\n\nimport { RecaptchaSettings } from './recaptcha-settings';\n\nexport const RECAPTCHA_LANGUAGE = new InjectionToken<string>('recaptcha-language');\nexport const RECAPTCHA_BASE_URL = new InjectionToken<string>('recaptcha-base-url');\nexport const RECAPTCHA_NONCE = new InjectionToken<string>('recaptcha-nonce-tag');\nexport const RECAPTCHA_SETTINGS = new InjectionToken<RecaptchaSettings>('recaptcha-settings');\nexport const RECAPTCHA_V3_SITE_KEY = new InjectionToken<string>('recaptcha-v3-site-key');\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\n\nimport { loadScript } from './load-script';\nimport {\n  RECAPTCHA_BASE_URL,\n  RECAPTCHA_LANGUAGE,\n  RECAPTCHA_NONCE,\n  RECAPTCHA_V3_SITE_KEY,\n} from './tokens';\n\n@Injectable()\nexport class RecaptchaLoaderService {\n  /**\n   * @internal\n   * @nocollapse\n   */\n  private static ready: BehaviorSubject<ReCaptchaV2.ReCaptcha> = null;\n\n  public ready: Observable<ReCaptchaV2.ReCaptcha>;\n\n  /** @internal */\n  private language: string;\n  /** @internal */\n  private baseUrl: string;\n  /** @internal */\n  private nonce: string;\n  /** @internal */\n  private v3SiteKey: string;\n\n  constructor(\n    // tslint:disable-next-line:no-any\n    @Inject(PLATFORM_ID) private readonly platformId: any,\n    @Optional() @Inject(RECAPTCHA_LANGUAGE) language?: string,\n    @Optional() @Inject(RECAPTCHA_BASE_URL) baseUrl?: string,\n    @Optional() @Inject(RECAPTCHA_NONCE) nonce?: string,\n    @Optional() @Inject(RECAPTCHA_V3_SITE_KEY) v3SiteKey?: string,\n  ) {\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.nonce = nonce;\n    this.v3SiteKey = v3SiteKey;\n    this.init();\n    this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService.ready.asObservable() : of();\n  }\n\n  /** @internal */\n  private init() {\n    if (RecaptchaLoaderService.ready) {\n      return;\n    }\n    if (isPlatformBrowser(this.platformId)) {\n      const subject = new BehaviorSubject<ReCaptchaV2.ReCaptcha>(null);\n      RecaptchaLoaderService.ready = subject;\n      const langParam = this.language ? '&hl=' + this.language : '';\n\n      const renderMode = this.v3SiteKey || 'explicit';\n      loadScript(renderMode, (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { RecaptchaLoaderService } from './recaptcha-loader.service';\nimport { RecaptchaSettings } from './recaptcha-settings';\nimport { RECAPTCHA_SETTINGS } from './tokens';\n\nlet nextId = 0;\n\n@Component({\n  exportAs: 'reCaptcha',\n  selector: 're-captcha',\n  template: ``,\n})\nexport class RecaptchaComponent implements AfterViewInit, OnDestroy {\n  @Input()\n  @HostBinding('attr.id')\n  public id = `ngrecaptcha-${nextId++}`;\n\n  @Input() public siteKey: string;\n  @Input() public theme: ReCaptchaV2.Theme;\n  @Input() public type: ReCaptchaV2.Type;\n  @Input() public size: ReCaptchaV2.Size;\n  @Input() public tabIndex: number;\n  @Input() public badge: ReCaptchaV2.Badge;\n\n  @Output() public resolved = new EventEmitter<string>();\n\n  /** @internal */\n  private subscription: Subscription;\n  /** @internal */\n  private widget: number;\n  /** @internal */\n  private grecaptcha: ReCaptchaV2.ReCaptcha;\n  /** @internal */\n  private executeRequested: boolean;\n\n  constructor(\n    private elementRef: ElementRef,\n    private loader: RecaptchaLoaderService,\n    private zone: NgZone,\n    @Optional() @Inject(RECAPTCHA_SETTINGS) settings?: RecaptchaSettings,\n  ) {\n    if (settings) {\n      this.siteKey = settings.siteKey;\n      this.theme = settings.theme;\n      this.type = settings.type;\n      this.size = settings.size;\n      this.badge = settings.badge;\n    }\n  }\n\n  public ngAfterViewInit() {\n    this.subscription = this.loader.ready.subscribe((grecaptcha: ReCaptchaV2.ReCaptcha) => {\n      if (grecaptcha != null && grecaptcha.render instanceof Function) {\n        this.grecaptcha = grecaptcha;\n        this.renderRecaptcha();\n      }\n    });\n  }\n\n  public ngOnDestroy() {\n    // reset the captcha to ensure it does not leave anything behind\n    // after the component is no longer needed\n    this.grecaptchaReset();\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Executes the invisible recaptcha.\n   * Does nothing if component's size is not set to \"invisible\".\n   */\n  public execute(): void {\n    if (this.size !== 'invisible') {\n      return;\n    }\n\n    if (this.widget != null) {\n      this.grecaptcha.execute(this.widget);\n    } else {\n      // delay execution of recaptcha until it actually renders\n      this.executeRequested = true;\n    }\n  }\n\n  public reset() {\n    if (this.widget != null) {\n      if (this.grecaptcha.getResponse(this.widget)) {\n        // Only emit an event in case if something would actually change.\n        // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n        // on a non-resolved captcha.\n        this.resolved.emit(null);\n      }\n\n      this.grecaptchaReset();\n    }\n  }\n\n  /** @internal */\n  private expired() {\n    this.resolved.emit(null);\n  }\n\n  /** @internal */\n  private captchaResponseCallback(response: string) {\n    this.resolved.emit(response);\n  }\n\n  /** @internal */\n  private grecaptchaReset() {\n    if (this.widget != null) {\n      this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n    }\n  }\n\n  /** @internal */\n  private renderRecaptcha() {\n    this.widget = this.grecaptcha.render(this.elementRef.nativeElement, {\n      badge: this.badge,\n      callback: (response: string) => {\n        this.zone.run(() => this.captchaResponseCallback(response));\n      },\n      'expired-callback': () => {\n        this.zone.run(() => this.expired());\n      },\n      sitekey: this.siteKey,\n      size: this.size,\n      tabindex: this.tabIndex,\n      theme: this.theme,\n      type: this.type,\n    });\n\n    if (this.executeRequested === true) {\n      this.executeRequested = false;\n      this.execute();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { RecaptchaComponent } from './recaptcha.component';\n\n@NgModule({\n  declarations: [\n    RecaptchaComponent,\n  ],\n  exports: [\n    RecaptchaComponent,\n  ],\n})\nexport class RecaptchaCommonModule {\n}\n","import { NgModule } from '@angular/core';\n\nimport { RecaptchaCommonModule } from './recaptcha-common.module';\nimport { RecaptchaLoaderService } from './recaptcha-loader.service';\nimport { RecaptchaComponent } from './recaptcha.component';\n\n@NgModule({\n  exports: [\n    RecaptchaComponent,\n  ],\n  imports: [\n    RecaptchaCommonModule,\n  ],\n  providers: [\n    RecaptchaLoaderService,\n  ],\n})\nexport class RecaptchaModule {\n  // We need this to maintain backwards-compatibility with v4. Removing this will be a breaking change\n  public static forRoot() {\n    return RecaptchaModule;\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { loadScript } from './load-script';\nimport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_V3_SITE_KEY } from './tokens';\n\nexport interface OnExecuteData {\n  /**\n   * The name of the action that has been executed.\n   */\n  action: string;\n  /**\n   * The token that reCAPTCHA v3 provided when executing the action.\n   */\n  token: string;\n}\n\nexport interface OnExecuteErrorData {\n  /**\n   * The name of the action that has been executed.\n   */\n  action: string;\n  /**\n   * The error which was encountered\n   */\n  // tslint:disable-next-line:no-any\n  error: any;\n}\n\ntype ActionBacklogEntry = [string, Subject<string>];\n\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\n@Injectable()\nexport class ReCaptchaV3Service {\n  /** @internal */\n  private readonly isBrowser: boolean;\n  /** @internal */\n  private readonly siteKey: string;\n  /** @internal */\n  private readonly zone: NgZone;\n  /** @internal */\n  private actionBacklog: ActionBacklogEntry[] | undefined;\n  /** @internal */\n  private nonce: string;\n  /** @internal */\n  private language?: string;\n  /** @internal */\n  private baseUrl: string;\n  /** @internal */\n  private grecaptcha: ReCaptchaV2.ReCaptcha;\n\n  /** @internal */\n  private onExecuteSubject: Subject<OnExecuteData>;\n  /** @internal */\n  private onExecuteErrorSubject: Subject<OnExecuteErrorData>;\n  /** @internal */\n  private onExecuteObservable: Observable<OnExecuteData>;\n  /** @internal */\n  private onExecuteErrorObservable: Observable<OnExecuteErrorData>;\n\n  constructor(\n    zone: NgZone,\n    @Inject(RECAPTCHA_V3_SITE_KEY) siteKey: string,\n    // tslint:disable-next-line:no-any\n    @Inject(PLATFORM_ID) platformId: any,\n    @Optional() @Inject(RECAPTCHA_BASE_URL) baseUrl?: string,\n    @Optional() @Inject(RECAPTCHA_NONCE) nonce?: string,\n    @Optional() @Inject(RECAPTCHA_LANGUAGE) language?: string,\n  ) {\n    this.zone = zone;\n    this.isBrowser = isPlatformBrowser(platformId);\n    this.siteKey = siteKey;\n    this.nonce = nonce;\n    this.language = language;\n    this.baseUrl = baseUrl;\n\n    this.init();\n  }\n\n  public get onExecute(): Observable<OnExecuteData> {\n    if (!this.onExecuteSubject) {\n      this.onExecuteSubject = new Subject<OnExecuteData>();\n      this.onExecuteObservable = this.onExecuteSubject.asObservable();\n    }\n\n    return this.onExecuteObservable;\n  }\n\n  public get onExecuteError(): Observable<OnExecuteErrorData> {\n    if (!this.onExecuteErrorSubject) {\n      this.onExecuteErrorSubject = new Subject<OnExecuteErrorData>();\n      this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n    }\n\n    return this.onExecuteErrorObservable;\n  }\n\n  /**\n   * Executes the provided `action` with reCAPTCHA v3 API.\n   * Use the emitted token value for verification purposes on the backend.\n   *\n   * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n   * https://developers.google.com/recaptcha/docs/v3.\n   *\n   * @param {string} action the action to execute\n   * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n   * The returned `Observable` completes immediately after emitting a value.\n   */\n  public execute(action: string): Observable<string> {\n    const subject = new Subject<string>();\n    if (this.isBrowser) {\n      if (!this.grecaptcha) {\n        // todo: add to array of later executions\n        if (!this.actionBacklog) {\n          this.actionBacklog = [];\n        }\n\n        this.actionBacklog.push([action, subject]);\n      } else {\n        this.executeActionWithSubject(action, subject);\n      }\n    }\n\n    return subject.asObservable();\n  }\n\n  /** @internal */\n  private executeActionWithSubject(action: string, subject: Subject<string>): void {\n    this.zone.runOutsideAngular(() => {\n      // tslint:disable-next-line:no-any\n      (this.grecaptcha.execute as any)(\n        this.siteKey,\n        { action },\n      ).then((token: string) => {\n        this.zone.run(() => {\n          subject.next(token);\n          subject.complete();\n          if (this.onExecuteSubject) {\n            this.onExecuteSubject.next({ action, token });\n          }\n        });\n      // tslint:disable-next-line:no-any\n      }, (error: any) => {\n        this.zone.run(() => {\n          subject.error(error);\n          if (this.onExecuteErrorSubject) {\n            this.onExecuteErrorSubject.next({ action, error });\n          }\n        });\n      });\n    });\n  }\n\n  /** @internal */\n  private init() {\n    if (this.isBrowser) {\n      if ('grecaptcha' in window) {\n        this.grecaptcha = grecaptcha;\n      } else {\n        const langParam = this.language ? '&hl=' + this.language : '';\n        loadScript(this.siteKey, this.onLoadComplete, langParam, this.baseUrl, this.nonce);\n      }\n    }\n  }\n\n  /** @internal */\n  private onLoadComplete = (grecaptcha: ReCaptchaV2.ReCaptcha) => {\n    this.grecaptcha = grecaptcha;\n    if (this.actionBacklog && this.actionBacklog.length > 0) {\n      this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n      this.actionBacklog = undefined;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { ReCaptchaV3Service } from './recaptcha-v3.service';\n\n@NgModule({\n  providers: [\n    ReCaptchaV3Service,\n  ],\n})\nexport class RecaptchaV3Module {\n}\n","import {\n  Directive,\n  forwardRef,\n  HostListener,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\n\nimport { RecaptchaComponent } from './recaptcha.component';\n\n@Directive({\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => RecaptchaValueAccessorDirective),\n    },\n  ],\n  // tslint:disable-next-line:directive-selector\n  selector: 're-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]',\n})\nexport class RecaptchaValueAccessorDirective implements ControlValueAccessor {\n  /** @internal */\n  private onChange: (value: string) => void;\n\n  /** @internal */\n  private onTouched: () => void;\n\n  constructor(private host: RecaptchaComponent) { }\n\n  public writeValue(value: string): void {\n    if (!value) {\n      this.host.reset();\n    }\n  }\n\n  public registerOnChange(fn: (value: string) => void): void { this.onChange = fn; }\n  public registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  @HostListener('resolved', ['$event']) public onResolve($event: string) {\n    if (this.onChange) {\n      this.onChange($event);\n    }\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { RecaptchaCommonModule } from './recaptcha-common.module';\nimport { RecaptchaValueAccessorDirective } from './recaptcha-value-accessor.directive';\n\n@NgModule({\n  declarations: [\n    RecaptchaValueAccessorDirective,\n  ],\n  exports: [RecaptchaValueAccessorDirective],\n  imports: [FormsModule, RecaptchaCommonModule],\n})\nexport class RecaptchaFormsModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {RecaptchaCommonModule as Éµa} from './recaptcha/recaptcha-common.module';"]},"metadata":{},"sourceType":"module"}
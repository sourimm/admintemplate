{"ast":null,"code":"import _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n/**\r\n * Represents a push-based event or value that an {@link Observable} can emit.\r\n * This class is particularly useful for operators that manage notifications,\r\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\n * others. Besides wrapping the actual delivered value, it also annotates it\r\n * with metadata of, for instance, what type of push message it is (`next`,\r\n * `error`, or `complete`).\r\n *\r\n * @see {@link materialize}\r\n * @see {@link dematerialize}\r\n * @see {@link observeOn}\r\n *\r\n * @class Notification<T>\r\n */\n\nexport var Notification = /*@__PURE__*/function () {\n  var Notification = /*#__PURE__*/function () {\n    function Notification(kind, value, error) {\n      _classCallCheck(this, Notification);\n\n      this.kind = kind;\n      this.value = value;\n      this.error = error;\n      this.hasValue = kind === 'N';\n    }\n    /**\r\n     * Delivers to the given `observer` the value wrapped by this Notification.\r\n     * @param {Observer} observer\r\n     * @return\r\n     */\n\n\n    _createClass(Notification, [{\n      key: \"observe\",\n      value: function observe(observer) {\n        switch (this.kind) {\n          case 'N':\n            return observer.next && observer.next(this.value);\n\n          case 'E':\n            return observer.error && observer.error(this.error);\n\n          case 'C':\n            return observer.complete && observer.complete();\n        }\n      }\n      /**\r\n       * Given some {@link Observer} callbacks, deliver the value represented by the\r\n       * current Notification to the correctly corresponding callback.\r\n       * @param {function(value: T): void} next An Observer `next` callback.\r\n       * @param {function(err: any): void} [error] An Observer `error` callback.\r\n       * @param {function(): void} [complete] An Observer `complete` callback.\r\n       * @return {any}\r\n       */\n\n    }, {\n      key: \"do\",\n      value: function _do(next, error, complete) {\n        var kind = this.kind;\n\n        switch (kind) {\n          case 'N':\n            return next && next(this.value);\n\n          case 'E':\n            return error && error(this.error);\n\n          case 'C':\n            return complete && complete();\n        }\n      }\n      /**\r\n       * Takes an Observer or its individual callback functions, and calls `observe`\r\n       * or `do` methods accordingly.\r\n       * @param {Observer|function(value: T): void} nextOrObserver An Observer or\r\n       * the `next` callback.\r\n       * @param {function(err: any): void} [error] An Observer `error` callback.\r\n       * @param {function(): void} [complete] An Observer `complete` callback.\r\n       * @return {any}\r\n       */\n\n    }, {\n      key: \"accept\",\n      value: function accept(nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n          return this.observe(nextOrObserver);\n        } else {\n          return this.do(nextOrObserver, error, complete);\n        }\n      }\n      /**\r\n       * Returns a simple Observable that just delivers the notification represented\r\n       * by this Notification instance.\r\n       * @return {any}\r\n       */\n\n    }, {\n      key: \"toObservable\",\n      value: function toObservable() {\n        var kind = this.kind;\n\n        switch (kind) {\n          case 'N':\n            return of(this.value);\n\n          case 'E':\n            return throwError(this.error);\n\n          case 'C':\n            return empty();\n        }\n\n        throw new Error('unexpected notification kind value');\n      }\n      /**\r\n       * A shortcut to create a Notification instance of the type `next` from a\r\n       * given value.\r\n       * @param {T} value The `next` value.\r\n       * @return {Notification<T>} The \"next\" Notification representing the\r\n       * argument.\r\n       * @nocollapse\r\n       */\n\n    }], [{\n      key: \"createNext\",\n      value: function createNext(value) {\n        if (typeof value !== 'undefined') {\n          return new Notification('N', value);\n        }\n\n        return Notification.undefinedValueNotification;\n      }\n      /**\r\n       * A shortcut to create a Notification instance of the type `error` from a\r\n       * given error.\r\n       * @param {any} [err] The `error` error.\r\n       * @return {Notification<T>} The \"error\" Notification representing the\r\n       * argument.\r\n       * @nocollapse\r\n       */\n\n    }, {\n      key: \"createError\",\n      value: function createError(err) {\n        return new Notification('E', undefined, err);\n      }\n      /**\r\n       * A shortcut to create a Notification instance of the type `complete`.\r\n       * @return {Notification<any>} The valueless \"complete\" Notification.\r\n       * @nocollapse\r\n       */\n\n    }, {\n      key: \"createComplete\",\n      value: function createComplete() {\n        return Notification.completeNotification;\n      }\n    }]);\n\n    return Notification;\n  }();\n\n  Notification.completeNotification = new Notification('C');\n  Notification.undefinedValueNotification = new Notification('N', undefined);\n  return Notification;\n}();","map":null,"metadata":{},"sourceType":"module"}
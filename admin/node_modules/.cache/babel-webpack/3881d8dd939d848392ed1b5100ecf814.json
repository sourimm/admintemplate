{"ast":null,"code":"import { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function subscribeTo(result) {\n  if (result instanceof Observable) {\n    return function (subscriber) {\n      if (result._isScalar) {\n        subscriber.next(result.value);\n        subscriber.complete();\n        return undefined;\n      } else {\n        return result.subscribe(subscriber);\n      }\n    };\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result);\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result);\n  } else {\n    var value = isObject(result) ? 'an invalid object' : \"'\".concat(result, \"'\");\n    var msg = \"You provided \".concat(value, \" where a stream was expected.\") + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};","map":{"version":3,"sources":["../../../src/internal/util/subscribeTo.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,mBAAT,QAAoC,uBAApC;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,QAAQ,IAAI,eAArB,QAA4C,oBAA5C;AACA,SAAS,UAAU,IAAI,iBAAvB,QAAgD,sBAAhD;AAGA,OAAO,IAAM,WAAW,GAAG,SAAd,WAAc,CAAI,MAAJ,EAAkC;AAC3D,MAAI,MAAM,YAAY,UAAtB,EAAkC;AAChC,WAAO,UAAC,UAAD,EAA8B;AACjC,UAAI,MAAM,CAAC,SAAX,EAAsB;AACtB,QAAA,UAAU,CAAC,IAAX,CAAiB,MAAc,CAAC,KAAhC;AACA,QAAA,UAAU,CAAC,QAAX;AACA,eAAO,SAAP;AACD,OAJC,MAIK;AACL,eAAO,MAAM,CAAC,SAAP,CAAiB,UAAjB,CAAP;AACD;AACF,KARD;AASD,GAVD,MAUO,IAAI,WAAW,CAAC,MAAD,CAAf,EAAyB;AAC9B,WAAO,gBAAgB,CAAC,MAAD,CAAvB;AACD,GAFM,MAEA,IAAI,SAAS,CAAC,MAAD,CAAb,EAAuB;AAC5B,WAAO,kBAAkB,CAAC,MAAD,CAAzB;AACD,GAFM,MAEA,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,eAAD,CAAb,KAAmC,UAAjD,EAA6D;AAClE,WAAO,mBAAmB,CAAC,MAAD,CAA1B;AACD,GAFM,MAEA,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,iBAAD,CAAb,KAAqC,UAAnD,EAA+D;AACpE,WAAO,qBAAqB,CAAC,MAAD,CAA5B;AACD,GAFM,MAEA;AACL,QAAM,KAAK,GAAG,QAAQ,CAAC,MAAD,CAAR,GAAmB,mBAAnB,cAA6C,MAA7C,MAAd;AACA,QAAM,GAAG,GAAG,uBAAgB,KAAhB,qCACR,8DADJ;AAEA,UAAM,IAAI,SAAJ,CAAc,GAAd,CAAN;AACD;AACF,CAzBM","sourcesContent":["import { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeTo = (result) => {\n    if (result instanceof Observable) {\n        return (subscriber) => {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else {\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n        const msg = `You provided ${value} where a stream was expected.`\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map"]},"metadata":{},"sourceType":"module"}
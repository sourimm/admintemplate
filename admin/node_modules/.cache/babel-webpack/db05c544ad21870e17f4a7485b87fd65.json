{"ast":null,"code":"import _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n/**\r\n * A representation of any set of values over any amount of time. This is the most basic building block\r\n * of RxJS.\r\n *\r\n * @class Observable<T>\r\n */\n\nexport var Observable = /*@__PURE__*/function () {\n  var Observable = /*#__PURE__*/function () {\n    /**\r\n     * @constructor\r\n     * @param {Function} subscribe the function that is called when the Observable is\r\n     * initially subscribed to. This function is given a Subscriber, to which new values\r\n     * can be `next`ed, or an `error` method can be called to raise an error, or\r\n     * `complete` can be called to notify of a successful completion.\r\n     */\n    function Observable(subscribe) {\n      _classCallCheck(this, Observable);\n\n      /** Internal implementation detail, do not use directly. */\n      this._isScalar = false;\n\n      if (subscribe) {\n        this._subscribe = subscribe;\n      }\n    }\n    /**\r\n     * Creates a new Observable, with this Observable as the source, and the passed\r\n     * operator defined as the new observable's operator.\r\n     * @method lift\r\n     * @param {Operator} operator the operator defining the operation to take on the observable\r\n     * @return {Observable} a new observable with the Operator applied\r\n     */\n\n\n    _createClass(Observable, [{\n      key: \"lift\",\n      value: function lift(operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n      }\n      /**\r\n       * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\r\n       *\r\n       * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\r\n       *\r\n       * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\r\n       * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\r\n       * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\r\n       * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\r\n       * thought.\r\n       *\r\n       * Apart from starting the execution of an Observable, this method allows you to listen for values\r\n       * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\r\n       * following ways.\r\n       *\r\n       * The first way is creating an object that implements {@link Observer} interface. It should have methods\r\n       * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\r\n       * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\r\n       * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\r\n       * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\r\n       * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\r\n       * be left uncaught.\r\n       *\r\n       * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\r\n       * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\r\n       * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\r\n       * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\r\n       * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\r\n       * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\r\n       *\r\n       * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\r\n       * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\r\n       * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\r\n       * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\r\n       *\r\n       * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\r\n       * It is an Observable itself that decides when these functions will be called. For example {@link of}\r\n       * by default emits all its values synchronously. Always check documentation for how given Observable\r\n       * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\r\n       *\r\n       * @example <caption>Subscribe with an Observer</caption>\r\n       * const sumObserver = {\r\n       *   sum: 0,\r\n       *   next(value) {\r\n       *     console.log('Adding: ' + value);\r\n       *     this.sum = this.sum + value;\r\n       *   },\r\n       *   error() { // We actually could just remove this method,\r\n       *   },        // since we do not really care about errors right now.\r\n       *   complete() {\r\n       *     console.log('Sum equals: ' + this.sum);\r\n       *   }\r\n       * };\r\n       *\r\n       * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\r\n       * .subscribe(sumObserver);\r\n       *\r\n       * // Logs:\r\n       * // \"Adding: 1\"\r\n       * // \"Adding: 2\"\r\n       * // \"Adding: 3\"\r\n       * // \"Sum equals: 6\"\r\n       *\r\n       *\r\n       * @example <caption>Subscribe with functions</caption>\r\n       * let sum = 0;\r\n       *\r\n       * Rx.Observable.of(1, 2, 3)\r\n       * .subscribe(\r\n       *   function(value) {\r\n       *     console.log('Adding: ' + value);\r\n       *     sum = sum + value;\r\n       *   },\r\n       *   undefined,\r\n       *   function() {\r\n       *     console.log('Sum equals: ' + sum);\r\n       *   }\r\n       * );\r\n       *\r\n       * // Logs:\r\n       * // \"Adding: 1\"\r\n       * // \"Adding: 2\"\r\n       * // \"Adding: 3\"\r\n       * // \"Sum equals: 6\"\r\n       *\r\n       *\r\n       * @example <caption>Cancel a subscription</caption>\r\n       * const subscription = Rx.Observable.interval(1000).subscribe(\r\n       *   num => console.log(num),\r\n       *   undefined,\r\n       *   () => console.log('completed!') // Will not be called, even\r\n       * );                                // when cancelling subscription\r\n       *\r\n       *\r\n       * setTimeout(() => {\r\n       *   subscription.unsubscribe();\r\n       *   console.log('unsubscribed!');\r\n       * }, 2500);\r\n       *\r\n       * // Logs:\r\n       * // 0 after 1s\r\n       * // 1 after 2s\r\n       * // \"unsubscribed!\" after 2.5s\r\n       *\r\n       *\r\n       * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\r\n       *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\r\n       *  Observable.\r\n       * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\r\n       *  the error will be thrown as unhandled.\r\n       * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\r\n       * @return {ISubscription} a subscription reference to the registered handlers\r\n       * @method subscribe\r\n       */\n\n    }, {\n      key: \"subscribe\",\n      value: function subscribe(observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n\n        if (operator) {\n          operator.call(sink, this.source);\n        } else {\n          sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n\n        if (config.useDeprecatedSynchronousErrorHandling) {\n          if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n\n            if (sink.syncErrorThrown) {\n              throw sink.syncErrorValue;\n            }\n          }\n        }\n\n        return sink;\n      }\n      /** @deprecated This is an internal implementation detail, do not use. */\n\n    }, {\n      key: \"_trySubscribe\",\n      value: function _trySubscribe(sink) {\n        try {\n          return this._subscribe(sink);\n        } catch (err) {\n          if (config.useDeprecatedSynchronousErrorHandling) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n          }\n\n          sink.error(err);\n        }\n      }\n      /**\r\n       * @method forEach\r\n       * @param {Function} next a handler for each value emitted by the observable\r\n       * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\r\n       * @return {Promise} a promise that either resolves on observable completion or\r\n       *  rejects with the handled error\r\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(next, promiseCtor) {\n        var _this = this;\n\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n          // Must be declared in a separate statement to avoid a RefernceError when\n          // accessing subscription below in the closure due to Temporal Dead Zone.\n          var subscription;\n          subscription = _this.subscribe(function (value) {\n            try {\n              next(value);\n            } catch (err) {\n              reject(err);\n\n              if (subscription) {\n                subscription.unsubscribe();\n              }\n            }\n          }, reject, resolve);\n        });\n      }\n      /** @deprecated This is an internal implementation detail, do not use. */\n\n    }, {\n      key: \"_subscribe\",\n      value: function _subscribe(subscriber) {\n        var source = this.source;\n        return source && source.subscribe(subscriber);\n      }\n      /**\r\n       * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\r\n       * @method Symbol.observable\r\n       * @return {Observable} this instance of the observable\r\n       */\n\n    }, {\n      key: Symbol_observable,\n      value: function value() {\n        return this;\n      }\n      /* tslint:enable:max-line-length */\n\n      /**\r\n       * Used to stitch together functional operators into a chain.\r\n       * @method pipe\r\n       * @return {Observable} the Observable result of all of the operators having\r\n       * been called in the order they were passed in.\r\n       *\r\n       * @example\r\n       *\r\n       * import { map, filter, scan } from 'rxjs/operators';\r\n       *\r\n       * Rx.Observable.interval(1000)\r\n       *   .pipe(\r\n       *     filter(x => x % 2 === 0),\r\n       *     map(x => x + x),\r\n       *     scan((acc, x) => acc + x)\r\n       *   )\r\n       *   .subscribe(x => console.log(x))\r\n       */\n\n    }, {\n      key: \"pipe\",\n      value: function pipe() {\n        for (var _len = arguments.length, operations = new Array(_len), _key = 0; _key < _len; _key++) {\n          operations[_key] = arguments[_key];\n        }\n\n        if (operations.length === 0) {\n          return this;\n        }\n\n        return pipeFromArray(operations)(this);\n      }\n      /* tslint:enable:max-line-length */\n\n    }, {\n      key: \"toPromise\",\n      value: function toPromise(promiseCtor) {\n        var _this2 = this;\n\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n          var value;\n\n          _this2.subscribe(function (x) {\n            return value = x;\n          }, function (err) {\n            return reject(err);\n          }, function () {\n            return resolve(value);\n          });\n        });\n      }\n    }]);\n\n    return Observable;\n  }(); // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n\n  /**\r\n   * Creates a new cold Observable by calling the Observable constructor\r\n   * @static true\r\n   * @owner Observable\r\n   * @method create\r\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\r\n   * @return {Observable} a new cold observable\r\n   * @nocollapse\r\n   */\n\n\n  Observable.create = function (subscribe) {\n    return new Observable(subscribe);\n  };\n\n  return Observable;\n}();\n/**\r\n * Decides between a passed promise constructor from consuming code,\r\n * A default configured promise constructor, and the native promise\r\n * constructor and returns it. If nothing can be found, it will throw\r\n * an error.\r\n * @param promiseCtor The optional promise constructor to passed by consuming code\r\n */\n\nfunction getPromiseCtor(promiseCtor) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}","map":null,"metadata":{},"sourceType":"module"}
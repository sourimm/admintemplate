{"ast":null,"code":"import _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emiited.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\n\nexport function single(predicate) {\n  return function (source) {\n    return source.lift(new SingleOperator(predicate, source));\n  };\n}\n\nvar SingleOperator = /*#__PURE__*/function () {\n  function SingleOperator(predicate, source) {\n    _classCallCheck(this, SingleOperator);\n\n    this.predicate = predicate;\n    this.source = source;\n  }\n\n  _createClass(SingleOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    }\n  }]);\n\n  return SingleOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SingleSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(SingleSubscriber, _Subscriber);\n\n  var _super = _createSuper(SingleSubscriber);\n\n  function SingleSubscriber(destination, predicate, source) {\n    var _this;\n\n    _classCallCheck(this, SingleSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.predicate = predicate;\n    _this.source = source;\n    _this.seenValue = false;\n    _this.index = 0;\n    return _this;\n  }\n\n  _createClass(SingleSubscriber, [{\n    key: \"applySingleValue\",\n    value: function applySingleValue(value) {\n      if (this.seenValue) {\n        this.destination.error('Sequence contains more than one element');\n      } else {\n        this.seenValue = true;\n        this.singleValue = value;\n      }\n    }\n  }, {\n    key: \"_next\",\n    value: function _next(value) {\n      var index = this.index++;\n\n      if (this.predicate) {\n        this.tryNext(value, index);\n      } else {\n        this.applySingleValue(value);\n      }\n    }\n  }, {\n    key: \"tryNext\",\n    value: function tryNext(value, index) {\n      try {\n        if (this.predicate(value, index, this.source)) {\n          this.applySingleValue(value);\n        }\n      } catch (err) {\n        this.destination.error(err);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var destination = this.destination;\n\n      if (this.index > 0) {\n        destination.next(this.seenValue ? this.singleValue : undefined);\n        destination.complete();\n      } else {\n        destination.error(new EmptyError());\n      }\n    }\n  }]);\n\n  return SingleSubscriber;\n}(Subscriber);","map":null,"metadata":{},"sourceType":"module"}
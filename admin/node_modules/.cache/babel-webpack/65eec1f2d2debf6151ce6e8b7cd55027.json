{"ast":null,"code":"import _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _regeneratorRuntime from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/regenerator\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Directive, Component, Input, Output, EventEmitter, HostBinding, HostListener, Injectable, ViewChild, ContentChildren, Self, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction NgxDropzonePreviewComponent_ngx_dropzone_remove_badge_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"ngx-dropzone-remove-badge\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxDropzonePreviewComponent_ngx_dropzone_remove_badge_1_Template_ngx_dropzone_remove_badge_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1._remove($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c0 = [[[\"ngx-dropzone-label\"]]];\nvar _c1 = [\"ngx-dropzone-label\"];\nvar _c2 = [\"fileInput\"];\n\nfunction NgxDropzoneComponent_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2, [\"*ngIf\", \"!_hasPreviews\"]);\n  }\n}\n\nvar _c3 = [[[\"ngx-dropzone-preview\"]], \"*\", [[\"ngx-dropzone-label\"]]];\nvar _c4 = [\"ngx-dropzone-preview\", \"*\", \"ngx-dropzone-label\"];\n\nfunction NgxDropzoneImagePreviewComponent_ngx_dropzone_remove_badge_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"ngx-dropzone-remove-badge\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxDropzoneImagePreviewComponent_ngx_dropzone_remove_badge_2_Template_ngx_dropzone_remove_badge_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1._remove($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction NgxDropzoneVideoPreviewComponent_video_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"video\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxDropzoneVideoPreviewComponent_video_0_Template_video_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      return $event.stopPropagation();\n    });\n    ɵngcc0.ɵɵelement(1, \"source\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"src\", ctx_r0.sanitizedVideoSrc, ɵngcc0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction NgxDropzoneVideoPreviewComponent_ngx_dropzone_remove_badge_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"ngx-dropzone-remove-badge\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxDropzoneVideoPreviewComponent_ngx_dropzone_remove_badge_2_Template_ngx_dropzone_remove_badge_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4._remove($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar NgxDropzoneLabelDirective = /*@__PURE__*/function () {\n  var NgxDropzoneLabelDirective = function NgxDropzoneLabelDirective() {\n    _classCallCheck(this, NgxDropzoneLabelDirective);\n  };\n\n  NgxDropzoneLabelDirective.ɵfac = function NgxDropzoneLabelDirective_Factory(t) {\n    return new (t || NgxDropzoneLabelDirective)();\n  };\n\n  NgxDropzoneLabelDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NgxDropzoneLabelDirective,\n    selectors: [[\"ngx-dropzone-label\"]]\n  });\n  return NgxDropzoneLabelDirective;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * Taken from https://github.com/angular/components/blob/master/src/cdk/coercion/boolean-property.ts\n * @param {?} value\n * @return {?}\n */\n\n\nfunction coerceBooleanProperty(value) {\n  return value != null && \"\".concat(value) !== 'false';\n}\n/**\n * Whether the provided value is considered a number.\n * Taken from https://github.com/angular/components/blob/master/src/cdk/coercion/number-property.ts\n * @param {?} value\n * @return {?}\n */\n\n\nfunction coerceNumberProperty(value) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(\n  /** @type {?} */\n  value)) && !isNaN(Number(value)) ? Number(value) : null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {number} */\n\n\nvar KEY_CODE = /*@__PURE__*/function () {\n  var KEY_CODE = {\n    BACKSPACE: 8,\n    DELETE: 46\n  };\n  KEY_CODE[KEY_CODE.BACKSPACE] = 'BACKSPACE';\n  KEY_CODE[KEY_CODE.DELETE] = 'DELETE';\n  return KEY_CODE;\n}();\n\nvar NgxDropzonePreviewComponent = /*@__PURE__*/function () {\n  var NgxDropzonePreviewComponent = /*#__PURE__*/function () {\n    /**\n     * @param {?} sanitizer\n     */\n    function NgxDropzonePreviewComponent(sanitizer) {\n      _classCallCheck(this, NgxDropzonePreviewComponent);\n\n      this.sanitizer = sanitizer;\n      this._removable = false;\n      /**\n       * Emitted when the element should be removed.\n       */\n\n      this.removed = new EventEmitter();\n      /**\n       * Make the preview item focusable using the tab key.\n       */\n\n      this.tabIndex = 0;\n    }\n    /**\n     * Allow the user to remove files.\n     * @return {?}\n     */\n\n\n    _createClass(NgxDropzonePreviewComponent, [{\n      key: \"keyEvent\",\n\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n      value: function keyEvent(event) {\n        switch (event.keyCode) {\n          case KEY_CODE.BACKSPACE:\n          case KEY_CODE.DELETE:\n            this.remove();\n            break;\n\n          default:\n            break;\n        }\n      }\n      /**\n       * We use the HostBinding to pass these common styles to child components.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_remove\",\n\n      /**\n       * Remove method to be used from the template.\n       * @param {?} event\n       * @return {?}\n       */\n      value: function _remove(event) {\n        event.stopPropagation();\n        this.remove();\n      }\n      /**\n       * Remove the preview item (use from component code).\n       * @return {?}\n       */\n\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        if (this._removable) {\n          this.removed.next(this.file);\n        }\n      }\n      /**\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"readFile\",\n      value: function readFile() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _this = this;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  return _context.abrupt(\"return\", new Promise(\n                  /**\n                  * @param {?} resolve\n                  * @param {?} reject\n                  * @return {?}\n                  */\n                  function (resolve, reject) {\n                    /** @type {?} */\n                    var reader = new FileReader();\n\n                    reader.onload =\n                    /**\n                    * @param {?} e\n                    * @return {?}\n                    */\n\n                    /**\n                    * @param {?} e\n                    * @return {?}\n                    */\n                    function (e) {\n                      resolve(\n                      /** @type {?} */\n                      e.target.result);\n                    };\n\n                    reader.onerror =\n                    /**\n                    * @param {?} e\n                    * @return {?}\n                    */\n\n                    /**\n                    * @param {?} e\n                    * @return {?}\n                    */\n                    function (e) {\n                      console.error(\"FileReader failed on file \".concat(_this.file.name, \".\"));\n                      reject(e);\n                    };\n\n                    if (!_this.file) {\n                      return reject('No file to read. Please provide a file using the [file] Input property.');\n                    }\n\n                    reader.readAsDataURL(_this.file);\n                  }));\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n      }\n    }, {\n      key: \"removable\",\n      get: function get() {\n        return this._removable;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._removable = coerceBooleanProperty(value);\n      }\n    }, {\n      key: \"hostStyle\",\n      get: function get() {\n        /** @type {?} */\n        var styles = \"\\n\\t\\t\\tdisplay: flex;\\n\\t\\t\\theight: 140px;\\n\\t\\t\\tmin-height: 140px;\\n\\t\\t\\tmin-width: 180px;\\n\\t\\t\\tmax-width: 180px;\\n\\t\\t\\tjustify-content: center;\\n\\t\\t\\talign-items: center;\\n\\t\\t\\tpadding: 0 20px;\\n\\t\\t\\tmargin: 10px;\\n\\t\\t\\tborder-radius: 5px;\\n\\t\\t\\tposition: relative;\\n\\t\\t\";\n        return this.sanitizer.bypassSecurityTrustStyle(styles);\n      }\n    }]);\n\n    return NgxDropzonePreviewComponent;\n  }();\n\n  NgxDropzonePreviewComponent.ɵfac = function NgxDropzonePreviewComponent_Factory(t) {\n    return new (t || NgxDropzonePreviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer));\n  };\n\n  NgxDropzonePreviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NgxDropzonePreviewComponent,\n    selectors: [[\"ngx-dropzone-preview\"]],\n    hostVars: 3,\n    hostBindings: function NgxDropzonePreviewComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keyup\", function NgxDropzonePreviewComponent_keyup_HostBindingHandler($event) {\n          return ctx.keyEvent($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"tabindex\", ctx.tabIndex);\n        ɵngcc0.ɵɵstyleMap(ctx.hostStyle);\n      }\n    },\n    inputs: {\n      removable: \"removable\",\n      file: \"file\"\n    },\n    outputs: {\n      removed: \"removed\"\n    },\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"click\", 4, \"ngIf\"], [3, \"click\"]],\n    template: function NgxDropzonePreviewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, NgxDropzonePreviewComponent_ngx_dropzone_remove_badge_1_Template, 1, 0, \"ngx-dropzone-remove-badge\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.removable);\n      }\n    },\n    directives: function directives() {\n      return [ɵngcc2.NgIf, NgxDropzoneRemoveBadgeComponent];\n    },\n    styles: [\"[_nghost-%COMP%]{background-image:linear-gradient(to top,#ededed,#efefef,#f1f1f1,#f4f4f4,#f6f6f6)}[_nghost-%COMP%]:focus, [_nghost-%COMP%]:hover{background-image:linear-gradient(to top,#e3e3e3,#ebeaea,#e8e7e7,#ebeaea,#f4f4f4);outline:0}[_nghost-%COMP%]:focus   ngx-dropzone-remove-badge[_ngcontent-%COMP%], [_nghost-%COMP%]:hover   ngx-dropzone-remove-badge[_ngcontent-%COMP%]{opacity:1}[_nghost-%COMP%]   ngx-dropzone-remove-badge[_ngcontent-%COMP%]{opacity:0}[_nghost-%COMP%]     ngx-dropzone-label{overflow-wrap:break-word}\"]\n  });\n  return NgxDropzonePreviewComponent;\n}();\n\nvar NgxDropzoneService = /*@__PURE__*/function () {\n  var NgxDropzoneService = /*#__PURE__*/function () {\n    function NgxDropzoneService() {\n      _classCallCheck(this, NgxDropzoneService);\n    }\n\n    _createClass(NgxDropzoneService, [{\n      key: \"parseFileList\",\n\n      /**\n       * @param {?} files\n       * @param {?} accept\n       * @param {?} maxFileSize\n       * @param {?} multiple\n       * @return {?}\n       */\n      value: function parseFileList(files, accept, maxFileSize, multiple) {\n        /** @type {?} */\n        var addedFiles = [];\n        /** @type {?} */\n\n        var rejectedFiles = [];\n\n        for (var i = 0; i < files.length; i++) {\n          /** @type {?} */\n          var file = files.item(i);\n\n          if (!this.isAccepted(file, accept)) {\n            this.rejectFile(rejectedFiles, file, 'type');\n            continue;\n          }\n\n          if (maxFileSize && file.size > maxFileSize) {\n            this.rejectFile(rejectedFiles, file, 'size');\n            continue;\n          }\n\n          if (!multiple && addedFiles.length >= 1) {\n            this.rejectFile(rejectedFiles, file, 'no_multiple');\n            continue;\n          }\n\n          addedFiles.push(file);\n        }\n        /** @type {?} */\n\n\n        var result = {\n          addedFiles: addedFiles,\n          rejectedFiles: rejectedFiles\n        };\n        return result;\n      }\n      /**\n       * @private\n       * @param {?} file\n       * @param {?} accept\n       * @return {?}\n       */\n\n    }, {\n      key: \"isAccepted\",\n      value: function isAccepted(file, accept) {\n        if (accept === '*') {\n          return true;\n        }\n        /** @type {?} */\n\n\n        var acceptFiletypes = accept.split(',').map(\n        /**\n        * @param {?} it\n        * @return {?}\n        */\n\n        /**\n        * @param {?} it\n        * @return {?}\n        */\n        function (it) {\n          return it.toLowerCase().trim();\n        });\n        /** @type {?} */\n\n        var filetype = file.type.toLowerCase();\n        /** @type {?} */\n\n        var filename = file.name.toLowerCase();\n        /** @type {?} */\n\n        var matchedFileType = acceptFiletypes.find(\n        /**\n        * @param {?} acceptFiletype\n        * @return {?}\n        */\n\n        /**\n        * @param {?} acceptFiletype\n        * @return {?}\n        */\n        function (acceptFiletype) {\n          // check for wildcard mimetype (e.g. image/*)\n          if (acceptFiletype.endsWith('/*')) {\n            return filetype.split('/')[0] === acceptFiletype.split('/')[0];\n          } // check for file extension (e.g. .csv)\n\n\n          if (acceptFiletype.startsWith(\".\")) {\n            return filename.endsWith(acceptFiletype);\n          } // check for exact mimetype match (e.g. image/jpeg)\n\n\n          return acceptFiletype == filetype;\n        });\n        return !!matchedFileType;\n      }\n      /**\n       * @private\n       * @param {?} rejectedFiles\n       * @param {?} file\n       * @param {?} reason\n       * @return {?}\n       */\n\n    }, {\n      key: \"rejectFile\",\n      value: function rejectFile(rejectedFiles, file, reason) {\n        /** @type {?} */\n        var rejectedFile =\n        /** @type {?} */\n        file;\n        rejectedFile.reason = reason;\n        rejectedFiles.push(rejectedFile);\n      }\n    }]);\n\n    return NgxDropzoneService;\n  }();\n\n  NgxDropzoneService.ɵfac = function NgxDropzoneService_Factory(t) {\n    return new (t || NgxDropzoneService)();\n  };\n\n  NgxDropzoneService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: NgxDropzoneService,\n    factory: NgxDropzoneService.ɵfac\n  });\n  return NgxDropzoneService;\n}();\n\nvar NgxDropzoneComponent = /*@__PURE__*/function () {\n  var NgxDropzoneComponent = /*#__PURE__*/function () {\n    /**\n     * @param {?} service\n     */\n    function NgxDropzoneComponent(service) {\n      _classCallCheck(this, NgxDropzoneComponent);\n\n      this.service = service;\n      /**\n       * Emitted when any files were added or rejected.\n       */\n\n      this.change = new EventEmitter();\n      /**\n       * Set the accepted file types. Defaults to '*'.\n       */\n\n      this.accept = '*';\n      this._disabled = false;\n      this._multiple = true;\n      this._maxFileSize = undefined;\n      this._expandable = false;\n      this._disableClick = false;\n      this._isHovered = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(NgxDropzoneComponent, [{\n      key: \"_onClick\",\n\n      /**\n       * Show the native OS file explorer to select files.\n       * @return {?}\n       */\n      value: function _onClick() {\n        if (!this.disableClick) {\n          this.showFileSelector();\n        }\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onDragOver\",\n      value: function _onDragOver(event) {\n        if (this.disabled) {\n          return;\n        }\n\n        this.preventDefault(event);\n        this._isHovered = true;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onDragLeave\",\n      value: function _onDragLeave() {\n        this._isHovered = false;\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onDrop\",\n      value: function _onDrop(event) {\n        if (this.disabled) {\n          return;\n        }\n\n        this.preventDefault(event);\n        this._isHovered = false;\n        this.handleFileDrop(event.dataTransfer.files);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"showFileSelector\",\n      value: function showFileSelector() {\n        if (!this.disabled) {\n          /** @type {?} */\n          this._fileInput.nativeElement.click();\n        }\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"_onFilesSelected\",\n      value: function _onFilesSelected(event) {\n        /** @type {?} */\n        var files = event.target.files;\n        this.handleFileDrop(files); // Reset the native file input element to allow selecting the same file again\n\n        this._fileInput.nativeElement.value = ''; // fix(#32): Prevent the default event behaviour which caused the change event to emit twice.\n\n        this.preventDefault(event);\n      }\n      /**\n       * @private\n       * @param {?} files\n       * @return {?}\n       */\n\n    }, {\n      key: \"handleFileDrop\",\n      value: function handleFileDrop(files) {\n        /** @type {?} */\n        var result = this.service.parseFileList(files, this.accept, this.maxFileSize, this.multiple);\n        this.change.next({\n          addedFiles: result.addedFiles,\n          rejectedFiles: result.rejectedFiles,\n          source: this\n        });\n      }\n      /**\n       * @private\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"preventDefault\",\n      value: function preventDefault(event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }, {\n      key: \"_hasPreviews\",\n      get: function get() {\n        return !!this._previewChildren.length;\n      }\n      /**\n       * Disable any user interaction with the component.\n       * @return {?}\n       */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this._isHovered) {\n          this._isHovered = false;\n        }\n      }\n      /**\n       * Allow the selection of multiple files.\n       * @return {?}\n       */\n\n    }, {\n      key: \"multiple\",\n      get: function get() {\n        return this._multiple;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._multiple = coerceBooleanProperty(value);\n      }\n      /**\n       * Set the maximum size a single file may have.\n       * @return {?}\n       */\n\n    }, {\n      key: \"maxFileSize\",\n      get: function get() {\n        return this._maxFileSize;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._maxFileSize = coerceNumberProperty(value);\n      }\n      /**\n       * Allow the dropzone container to expand vertically.\n       * @return {?}\n       */\n\n    }, {\n      key: \"expandable\",\n      get: function get() {\n        return this._expandable;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._expandable = coerceBooleanProperty(value);\n      }\n      /**\n       * Open the file selector on click.\n       * @return {?}\n       */\n\n    }, {\n      key: \"disableClick\",\n      get: function get() {\n        return this._disableClick;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._disableClick = coerceBooleanProperty(value);\n      }\n    }]);\n\n    return NgxDropzoneComponent;\n  }();\n\n  NgxDropzoneComponent.ɵfac = function NgxDropzoneComponent_Factory(t) {\n    return new (t || NgxDropzoneComponent)(ɵngcc0.ɵɵdirectiveInject(NgxDropzoneService, 2));\n  };\n\n  NgxDropzoneComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NgxDropzoneComponent,\n    selectors: [[\"ngx-dropzone\"], [\"\", \"ngx-dropzone\", \"\"]],\n    contentQueries: function NgxDropzoneComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxDropzonePreviewComponent, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewChildren = _t);\n      }\n    },\n    viewQuery: function NgxDropzoneComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._fileInput = _t.first);\n      }\n    },\n    hostVars: 8,\n    hostBindings: function NgxDropzoneComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NgxDropzoneComponent_click_HostBindingHandler() {\n          return ctx._onClick();\n        })(\"dragover\", function NgxDropzoneComponent_dragover_HostBindingHandler($event) {\n          return ctx._onDragOver($event);\n        })(\"dragleave\", function NgxDropzoneComponent_dragleave_HostBindingHandler() {\n          return ctx._onDragLeave();\n        })(\"drop\", function NgxDropzoneComponent_drop_HostBindingHandler($event) {\n          return ctx._onDrop($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ngx-dz-hovered\", ctx._isHovered)(\"ngx-dz-disabled\", ctx.disabled)(\"expandable\", ctx.expandable)(\"unclickable\", ctx.disableClick);\n      }\n    },\n    inputs: {\n      accept: \"accept\",\n      disabled: \"disabled\",\n      multiple: \"multiple\",\n      maxFileSize: \"maxFileSize\",\n      expandable: \"expandable\",\n      disableClick: \"disableClick\",\n      id: \"id\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      ariaDescribedBy: [\"aria-describedby\", \"ariaDescribedBy\"]\n    },\n    outputs: {\n      change: \"change\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([NgxDropzoneService])],\n    ngContentSelectors: _c4,\n    decls: 5,\n    vars: 8,\n    consts: [[\"type\", \"file\", 3, \"id\", \"multiple\", \"accept\", \"disabled\", \"change\"], [\"fileInput\", \"\"], [4, \"ngIf\"]],\n    template: function NgxDropzoneComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵelementStart(0, \"input\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"change\", function NgxDropzoneComponent_Template_input_change_0_listener($event) {\n          return ctx._onFilesSelected($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, NgxDropzoneComponent_ng_content_2_Template, 1, 0, \"ng-content\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵprojection(4, 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx.id)(\"multiple\", ctx.multiple)(\"accept\", ctx.accept)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedBy);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._hasPreviews);\n      }\n    },\n    directives: [ɵngcc2.NgIf],\n    styles: [\"[_nghost-%COMP%]{display:flex;align-items:center;height:180px;background:#fff;cursor:pointer;color:#717386;border:2px dashed #717386;border-radius:5px;font-size:16px;overflow-x:auto}.ngx-dz-hovered[_nghost-%COMP%]{border-style:solid}.ngx-dz-disabled[_nghost-%COMP%]{opacity:.5;cursor:no-drop;pointer-events:none}.expandable[_nghost-%COMP%]{overflow:hidden;height:unset;min-height:180px;flex-wrap:wrap}.unclickable[_nghost-%COMP%]{cursor:default}[_nghost-%COMP%]     ngx-dropzone-label{text-align:center;z-index:10;margin:10px auto}[_nghost-%COMP%]   input[_ngcontent-%COMP%]{width:.1px;height:.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1}[_nghost-%COMP%]   input[_ngcontent-%COMP%]:focus +   ngx-dropzone-label{outline:#000 dotted 1px;outline:-webkit-focus-ring-color auto 5px}\"]\n  });\n  return NgxDropzoneComponent;\n}();\n\nvar NgxDropzoneImagePreviewComponent = /*@__PURE__*/function () {\n  var NgxDropzoneImagePreviewComponent = /*#__PURE__*/function (_NgxDropzonePreviewCo) {\n    _inherits(NgxDropzoneImagePreviewComponent, _NgxDropzonePreviewCo);\n\n    var _super = _createSuper(NgxDropzoneImagePreviewComponent);\n\n    /**\n     * @param {?} sanitizer\n     */\n    function NgxDropzoneImagePreviewComponent(sanitizer) {\n      var _this2;\n\n      _classCallCheck(this, NgxDropzoneImagePreviewComponent);\n\n      _this2 = _super.call(this, sanitizer);\n      /**\n       * The image data source.\n       */\n\n      _this2.imageSrc = '';\n      return _this2;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(NgxDropzoneImagePreviewComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this3 = this;\n\n        this.readFile().then(\n        /**\n        * @param {?} img\n        * @return {?}\n        */\n\n        /**\n        * @param {?} img\n        * @return {?}\n        */\n        function (img) {\n          return setTimeout(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this3.imageSrc = img;\n          });\n        }).catch(\n        /**\n        * @param {?} err\n        * @return {?}\n        */\n\n        /**\n        * @param {?} err\n        * @return {?}\n        */\n        function (err) {\n          return console.error(err);\n        });\n      }\n    }]);\n\n    return NgxDropzoneImagePreviewComponent;\n  }(NgxDropzonePreviewComponent);\n\n  NgxDropzoneImagePreviewComponent.ɵfac = function NgxDropzoneImagePreviewComponent_Factory(t) {\n    return new (t || NgxDropzoneImagePreviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer));\n  };\n\n  NgxDropzoneImagePreviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NgxDropzoneImagePreviewComponent,\n    selectors: [[\"ngx-dropzone-image-preview\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NgxDropzonePreviewComponent,\n      useExisting: NgxDropzoneImagePreviewComponent\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 2,\n    consts: [[3, \"src\"], [3, \"click\", 4, \"ngIf\"], [3, \"click\"]],\n    template: function NgxDropzoneImagePreviewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelement(0, \"img\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtemplate(2, NgxDropzoneImagePreviewComponent_ngx_dropzone_remove_badge_2_Template, 1, 0, \"ngx-dropzone-remove-badge\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"src\", ctx.imageSrc, ɵngcc0.ɵɵsanitizeUrl);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.removable);\n      }\n    },\n    directives: function directives() {\n      return [ɵngcc2.NgIf, NgxDropzoneRemoveBadgeComponent];\n    },\n    styles: [\"[_nghost-%COMP%]{min-width:unset!important;max-width:unset!important;padding:0!important}[_nghost-%COMP%]:focus   img[_ngcontent-%COMP%], [_nghost-%COMP%]:hover   img[_ngcontent-%COMP%]{opacity:.7}[_nghost-%COMP%]:focus   ngx-dropzone-remove-badge[_ngcontent-%COMP%], [_nghost-%COMP%]:hover   ngx-dropzone-remove-badge[_ngcontent-%COMP%]{opacity:1}[_nghost-%COMP%]   ngx-dropzone-remove-badge[_ngcontent-%COMP%]{opacity:0}[_nghost-%COMP%]   img[_ngcontent-%COMP%]{max-height:100%;border-radius:5px;opacity:.8}[_nghost-%COMP%]     ngx-dropzone-label{position:absolute;overflow-wrap:break-word}\"]\n  });\n  return NgxDropzoneImagePreviewComponent;\n}();\n\nvar NgxDropzoneRemoveBadgeComponent = /*@__PURE__*/function () {\n  var NgxDropzoneRemoveBadgeComponent = function NgxDropzoneRemoveBadgeComponent() {\n    _classCallCheck(this, NgxDropzoneRemoveBadgeComponent);\n  };\n\n  NgxDropzoneRemoveBadgeComponent.ɵfac = function NgxDropzoneRemoveBadgeComponent_Factory(t) {\n    return new (t || NgxDropzoneRemoveBadgeComponent)();\n  };\n\n  NgxDropzoneRemoveBadgeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NgxDropzoneRemoveBadgeComponent,\n    selectors: [[\"ngx-dropzone-remove-badge\"]],\n    decls: 3,\n    vars: 0,\n    consts: [[\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"10\", \"y2\", \"10\"], [\"x1\", \"0\", \"y1\", \"10\", \"x2\", \"10\", \"y2\", \"0\"]],\n    template: function NgxDropzoneRemoveBadgeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\");\n        ɵngcc0.ɵɵelement(1, \"line\", 0);\n        ɵngcc0.ɵɵelement(2, \"line\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{display:flex;justify-content:center;align-items:center;height:22px;width:22px;position:absolute;top:5px;right:5px;border-radius:50%;background:#bbb;color:#333;cursor:pointer}[_nghost-%COMP%]:hover{background:#aeaeae}[_nghost-%COMP%] > svg[_ngcontent-%COMP%]{height:10px;width:10px}[_nghost-%COMP%] > svg[_ngcontent-%COMP%] > line[_ngcontent-%COMP%]{stroke-width:2px;stroke:#fff}\"]\n  });\n  return NgxDropzoneRemoveBadgeComponent;\n}();\n\nvar NgxDropzoneVideoPreviewComponent = /*@__PURE__*/function () {\n  var NgxDropzoneVideoPreviewComponent = /*#__PURE__*/function (_NgxDropzonePreviewCo2) {\n    _inherits(NgxDropzoneVideoPreviewComponent, _NgxDropzonePreviewCo2);\n\n    var _super2 = _createSuper(NgxDropzoneVideoPreviewComponent);\n\n    /**\n     * @param {?} sanitizer\n     */\n    function NgxDropzoneVideoPreviewComponent(sanitizer) {\n      _classCallCheck(this, NgxDropzoneVideoPreviewComponent);\n\n      return _super2.call(this, sanitizer);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(NgxDropzoneVideoPreviewComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (!this.file) {\n          console.error('No file to read. Please provide a file using the [file] Input property.');\n          return;\n        }\n        /**\n         * We sanitize the URL here to enable the preview.\n         * Please note that this could cause security issues!\n         **/\n\n\n        this.videoSrc = URL.createObjectURL(this.file);\n        this.sanitizedVideoSrc = this.sanitizer.bypassSecurityTrustUrl(this.videoSrc);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        URL.revokeObjectURL(this.videoSrc);\n      }\n    }]);\n\n    return NgxDropzoneVideoPreviewComponent;\n  }(NgxDropzonePreviewComponent);\n\n  NgxDropzoneVideoPreviewComponent.ɵfac = function NgxDropzoneVideoPreviewComponent_Factory(t) {\n    return new (t || NgxDropzoneVideoPreviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer));\n  };\n\n  NgxDropzoneVideoPreviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NgxDropzoneVideoPreviewComponent,\n    selectors: [[\"ngx-dropzone-video-preview\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NgxDropzonePreviewComponent,\n      useExisting: NgxDropzoneVideoPreviewComponent\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 2,\n    consts: [[\"controls\", \"\", 3, \"click\", 4, \"ngIf\"], [3, \"click\", 4, \"ngIf\"], [\"controls\", \"\", 3, \"click\"], [3, \"src\"], [3, \"click\"]],\n    template: function NgxDropzoneVideoPreviewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵtemplate(0, NgxDropzoneVideoPreviewComponent_video_0_Template, 2, 1, \"video\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtemplate(2, NgxDropzoneVideoPreviewComponent_ngx_dropzone_remove_badge_2_Template, 1, 0, \"ngx-dropzone-remove-badge\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.sanitizedVideoSrc);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.removable);\n      }\n    },\n    directives: [ɵngcc2.NgIf, NgxDropzoneRemoveBadgeComponent],\n    styles: [\"[_nghost-%COMP%]{min-width:unset!important;max-width:unset!important;padding:0!important}[_nghost-%COMP%]:focus   video[_ngcontent-%COMP%], [_nghost-%COMP%]:hover   video[_ngcontent-%COMP%]{opacity:.7}[_nghost-%COMP%]:focus   ngx-dropzone-remove-badge[_ngcontent-%COMP%], [_nghost-%COMP%]:hover   ngx-dropzone-remove-badge[_ngcontent-%COMP%]{opacity:1}[_nghost-%COMP%]   ngx-dropzone-remove-badge[_ngcontent-%COMP%]{opacity:0}[_nghost-%COMP%]   video[_ngcontent-%COMP%]{max-height:100%;border-radius:5px}[_nghost-%COMP%]     ngx-dropzone-label{position:absolute;overflow-wrap:break-word}\"]\n  });\n  return NgxDropzoneVideoPreviewComponent;\n}();\n\nvar NgxDropzoneModule = /*@__PURE__*/function () {\n  var NgxDropzoneModule = function NgxDropzoneModule() {\n    _classCallCheck(this, NgxDropzoneModule);\n  };\n\n  NgxDropzoneModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: NgxDropzoneModule\n  });\n  NgxDropzoneModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function NgxDropzoneModule_Factory(t) {\n      return new (t || NgxDropzoneModule)();\n    },\n    imports: [[CommonModule]]\n  });\n  return NgxDropzoneModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxDropzoneModule, {\n    declarations: function declarations() {\n      return [NgxDropzoneComponent, NgxDropzoneLabelDirective, NgxDropzonePreviewComponent, NgxDropzoneImagePreviewComponent, NgxDropzoneRemoveBadgeComponent, NgxDropzoneVideoPreviewComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NgxDropzoneComponent, NgxDropzoneLabelDirective, NgxDropzonePreviewComponent, NgxDropzoneImagePreviewComponent, NgxDropzoneRemoveBadgeComponent, NgxDropzoneVideoPreviewComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NgxDropzoneModule, NgxDropzoneComponent, NgxDropzonePreviewComponent, NgxDropzoneImagePreviewComponent, NgxDropzoneVideoPreviewComponent, NgxDropzoneRemoveBadgeComponent, NgxDropzoneLabelDirective as ɵb, NgxDropzoneService as ɵa };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\n\nexport var Subscription = /*#__PURE__*/function () {\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  function Subscription(unsubscribe) {\n    _classCallCheck(this, Subscription);\n\n    /**\n     * A flag to indicate whether this Subscription has already been unsubscribed.\n     * @type {boolean}\n     */\n    this.closed = false;\n    /** @internal */\n\n    this._parent = null;\n    /** @internal */\n\n    this._parents = null;\n    /** @internal */\n\n    this._subscriptions = null;\n\n    if (unsubscribe) {\n      this._unsubscribe = unsubscribe;\n    }\n  }\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n\n\n  _createClass(Subscription, [{\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var hasErrors = false;\n      var errors;\n\n      if (this.closed) {\n        return;\n      }\n\n      var _parent = this._parent,\n          _parents = this._parents,\n          _unsubscribe = this._unsubscribe,\n          _subscriptions = this._subscriptions;\n      this.closed = true;\n      this._parent = null;\n      this._parents = null; // null out _subscriptions first so any child subscriptions that attempt\n      // to remove themselves from this subscription will noop\n\n      this._subscriptions = null;\n      var index = -1;\n      var len = _parents ? _parents.length : 0; // if this._parent is null, then so is this._parents, and we\n      // don't have to remove ourselves from any parent subscriptions.\n\n      while (_parent) {\n        _parent.remove(this); // if this._parents is null or index >= len,\n        // then _parent is set to null, and the loop exits\n\n\n        _parent = ++index < len && _parents[index] || null;\n      }\n\n      if (isFunction(_unsubscribe)) {\n        var trial = tryCatch(_unsubscribe).call(this);\n\n        if (trial === errorObject) {\n          hasErrors = true;\n          errors = errors || (errorObject.e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n        }\n      }\n\n      if (isArray(_subscriptions)) {\n        index = -1;\n        len = _subscriptions.length;\n\n        while (++index < len) {\n          var sub = _subscriptions[index];\n\n          if (isObject(sub)) {\n            var _trial = tryCatch(sub.unsubscribe).call(sub);\n\n            if (_trial === errorObject) {\n              hasErrors = true;\n              errors = errors || [];\n              var err = errorObject.e;\n\n              if (err instanceof UnsubscriptionError) {\n                errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n              } else {\n                errors.push(err);\n              }\n            }\n          }\n        }\n      }\n\n      if (hasErrors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(teardown) {\n      if (!teardown || teardown === Subscription.EMPTY) {\n        return Subscription.EMPTY;\n      }\n\n      if (teardown === this) {\n        return this;\n      }\n\n      var subscription = teardown;\n\n      switch (typeof teardown) {\n        case 'function':\n          subscription = new Subscription(teardown);\n\n        case 'object':\n          if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n            return subscription;\n          } else if (this.closed) {\n            subscription.unsubscribe();\n            return subscription;\n          } else if (typeof subscription._addParent !== 'function'\n          /* quack quack */\n          ) {\n              var tmp = subscription;\n              subscription = new Subscription();\n              subscription._subscriptions = [tmp];\n            }\n\n          break;\n\n        default:\n          throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n      }\n\n      var subscriptions = this._subscriptions || (this._subscriptions = []);\n      subscriptions.push(subscription);\n\n      subscription._addParent(this);\n\n      return subscription;\n    }\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(subscription) {\n      var subscriptions = this._subscriptions;\n\n      if (subscriptions) {\n        var subscriptionIndex = subscriptions.indexOf(subscription);\n\n        if (subscriptionIndex !== -1) {\n          subscriptions.splice(subscriptionIndex, 1);\n        }\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"_addParent\",\n    value: function _addParent(parent) {\n      var _parent = this._parent,\n          _parents = this._parents;\n\n      if (!_parent || _parent === parent) {\n        // If we don't have a parent, or the new parent is the same as the\n        // current parent, then set this._parent to the new parent.\n        this._parent = parent;\n      } else if (!_parents) {\n        // If there's already one parent, but not multiple, allocate an Array to\n        // store the rest of the parent Subscriptions.\n        this._parents = [parent];\n      } else if (_parents.indexOf(parent) === -1) {\n        // Only add the new parent to the _parents list if it's not already there.\n        _parents.push(parent);\n      }\n    }\n  }]);\n\n  return Subscription;\n}();\n/** @nocollapse */\n\nSubscription.EMPTY = function (empty) {\n  empty.closed = true;\n  return empty;\n}(new Subscription());\n\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce(function (errs, err) {\n    return errs.concat(err instanceof UnsubscriptionError ? err.errors : err);\n  }, []);\n}","map":{"version":3,"sources":["../../src/internal/Subscription.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    constructor(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        /** @internal */\n        this._parent = null;\n        /** @internal */\n        this._parents = null;\n        /** @internal */\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    unsubscribe() {\n        let hasErrors = false;\n        let errors;\n        if (this.closed) {\n            return;\n        }\n        let { _parent, _parents, _unsubscribe, _subscriptions } = this;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        let index = -1;\n        let len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            let trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                const sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    let trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        let err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    }\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    add(teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        let subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    const tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        const subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    }\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    remove(subscription) {\n        const subscriptions = this._subscriptions;\n        if (subscriptions) {\n            const subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    }\n    /** @internal */\n    _addParent(parent) {\n        let { _parent, _parents } = this;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    }\n}\n/** @nocollapse */\nSubscription.EMPTY = (function (empty) {\n    empty.closed = true;\n    return empty;\n}(new Subscription()));\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n//# sourceMappingURL=Subscription.js.map"]},"metadata":{},"sourceType":"module"}
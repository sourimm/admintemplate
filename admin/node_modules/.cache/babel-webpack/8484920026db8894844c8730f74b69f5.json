{"ast":null,"code":"import _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\n\nexport function takeUntil(notifier) {\n  return function (source) {\n    return source.lift(new TakeUntilOperator(notifier));\n  };\n}\n\nvar TakeUntilOperator = /*#__PURE__*/function () {\n  function TakeUntilOperator(notifier) {\n    _classCallCheck(this, TakeUntilOperator);\n\n    this.notifier = notifier;\n  }\n\n  _createClass(TakeUntilOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n      var notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n\n      if (notifierSubscription && !notifierSubscription.closed) {\n        takeUntilSubscriber.add(notifierSubscription);\n        return source.subscribe(takeUntilSubscriber);\n      }\n\n      return takeUntilSubscriber;\n    }\n  }]);\n\n  return TakeUntilOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar TakeUntilSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(TakeUntilSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(TakeUntilSubscriber);\n\n  function TakeUntilSubscriber(destination) {\n    _classCallCheck(this, TakeUntilSubscriber);\n\n    return _super.call(this, destination);\n  }\n\n  _createClass(TakeUntilSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      this.complete();\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {// noop\n    }\n  }]);\n\n  return TakeUntilSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/takeUntil.ts"],"names":[],"mappings":";;;;AAIA,SAAS,eAAT,QAAgC,oBAAhC;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAM,SAAA,SAAA,CAAuB,QAAvB,EAAgD;AACpD,SAAO,UAAC,MAAD;AAAA,WAA2B,MAAM,CAAC,IAAP,CAAY,IAAI,iBAAJ,CAAsB,QAAtB,CAAZ,CAA3B;AAAA,GAAP;AACD;;IAED,iB;AACE,6BAAoB,QAApB,EAA6C;AAAA;;AAAzB,SAAA,QAAA,GAAA,QAAA;AACnB;;;;yBAEI,U,EAA2B,M,EAAW;AACzC,UAAM,mBAAmB,GAAG,IAAI,mBAAJ,CAAwB,UAAxB,CAA5B;AACA,UAAM,oBAAoB,GAAG,iBAAiB,CAAC,mBAAD,EAAsB,KAAK,QAA3B,CAA9C;;AACA,UAAI,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,MAAlD,EAA0D;AACxD,QAAA,mBAAmB,CAAC,GAApB,CAAwB,oBAAxB;AACA,eAAO,MAAM,CAAC,SAAP,CAAiB,mBAAjB,CAAP;AACD;;AACD,aAAO,mBAAP;AACD;;;;;AAGH;;;;;;;IAKA,mB;;;;;AAEE,+BAAY,WAAZ,EAAwC;AAAA;;AAAA,6BAChC,WADgC;AAEvC;;;;+BAEU,U,EAAe,U,EACf,U,EAAoB,U,EACpB,Q,EAA+B;AACxC,WAAK,QAAL;AACD;;;qCAEa,CACZ;AACD;;;;EAdqC,e","sourcesContent":["import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil(notifier) {\n    return (source) => source.lift(new TakeUntilOperator(notifier));\n}\nclass TakeUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        const notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    }\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber extends OuterSubscriber {\n    constructor(destination) {\n        super(destination);\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    }\n    notifyComplete() {\n        // noop\n    }\n}\n//# sourceMappingURL=takeUntil.js.map"]},"metadata":{},"sourceType":"module"}
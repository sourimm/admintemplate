{"ast":null,"code":"// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\nimport { Injectable } from '@angular/core';\nimport { isString, isNumber, isFunction } from './toasty.utils';\nimport { Subject } from 'rxjs/Subject';\n/**\n * Options to configure specific Toast\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar ToastOptions = /*@__PURE__*/function () {\n  function ToastOptions() {}\n\n  ToastOptions.ɵfac = function ToastOptions_Factory(t) {\n    return new (t || ToastOptions)();\n  };\n\n  ToastOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ToastOptions,\n    factory: function factory(t) {\n      return ToastOptions.ɵfac(t);\n    }\n  });\n  return ToastOptions;\n}();\n\nexport { ToastOptions };\n/**\n * Structrure of Toast\n */\n\nvar ToastData = /*@__PURE__*/function () {\n  function ToastData() {}\n\n  ToastData.ɵfac = function ToastData_Factory(t) {\n    return new (t || ToastData)();\n  };\n\n  ToastData.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ToastData,\n    factory: function factory(t) {\n      return ToastData.ɵfac(t);\n    }\n  });\n  return ToastData;\n}();\n\nexport { ToastData };\n/**\n * Default configuration foa all toats and toasty container\n */\n\nvar ToastyConfig = /*@__PURE__*/function () {\n  function ToastyConfig() {\n    // Maximum number of toasties to show at once\n    this.limit = 5; // Whether to show the 'X' icon to close the toast\n\n    this.showClose = true; // The window position where the toast pops up\n\n    this.position = 'bottom-right'; // How long (in miliseconds) the toasty shows before it's removed. Set to null/0 to turn off.\n\n    this.timeout = 5000; // What theme to use\n\n    this.theme = 'default';\n  }\n\n  ToastyConfig.ɵfac = function ToastyConfig_Factory(t) {\n    return new (t || ToastyConfig)();\n  };\n\n  ToastyConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ToastyConfig,\n    factory: function factory(t) {\n      return ToastyConfig.ɵfac(t);\n    }\n  });\n  return ToastyConfig;\n}();\n\nexport { ToastyConfig };\nexport var ToastyEventType = /*@__PURE__*/function (ToastyEventType) {\n  ToastyEventType[ToastyEventType[\"ADD\"] = 0] = \"ADD\";\n  ToastyEventType[ToastyEventType[\"CLEAR\"] = 1] = \"CLEAR\";\n  ToastyEventType[ToastyEventType[\"CLEAR_ALL\"] = 2] = \"CLEAR_ALL\";\n  return ToastyEventType;\n}({});\n\nvar ToastyEvent = /*@__PURE__*/function () {\n  function ToastyEvent(type, value) {\n    this.type = type;\n    this.value = value;\n  }\n\n  return ToastyEvent;\n}();\n\nexport { ToastyEvent };\nexport function toastyServiceFactory(config) {\n  return new ToastyService(config);\n}\n/**\n * Toasty service helps create different kinds of Toasts\n */\n\nvar ToastyService = /*@__PURE__*/function () {\n  function ToastyService(config) {\n    this.config = config; // Init the counter\n\n    this.uniqueCounter = 0; // ToastData event emitter\n    // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();\n    // Clear event emitter\n    // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();\n\n    this.eventSource = new Subject();\n    this.events = this.eventSource.asObservable();\n  }\n  /**\n   * Get list of toats\n   */\n  // getToasts(): Observable<ToastData> {\n  //   return this.toastsEmitter.asObservable();\n  // }\n  // getClear(): Observable<number> {\n  //   return this.clearEmitter.asObservable();\n  // }\n\n  /**\n   * Create Toast of a default type\n   */\n\n\n  ToastyService.prototype.default = function (options) {\n    this.add(options, 'default');\n  };\n  /**\n   * Create Toast of info type\n   * @param  {object} options Individual toasty config overrides\n   */\n\n\n  ToastyService.prototype.info = function (options) {\n    this.add(options, 'info');\n  };\n  /**\n   * Create Toast of success type\n   * @param  {object} options Individual toasty config overrides\n   */\n\n\n  ToastyService.prototype.success = function (options) {\n    this.add(options, 'success');\n  };\n  /**\n   * Create Toast of wait type\n   * @param  {object} options Individual toasty config overrides\n   */\n\n\n  ToastyService.prototype.wait = function (options) {\n    this.add(options, 'wait');\n  };\n  /**\n   * Create Toast of error type\n   * @param  {object} options Individual toasty config overrides\n   */\n\n\n  ToastyService.prototype.error = function (options) {\n    this.add(options, 'error');\n  };\n  /**\n   * Create Toast of warning type\n   * @param  {object} options Individual toasty config overrides\n   */\n\n\n  ToastyService.prototype.warning = function (options) {\n    this.add(options, 'warning');\n  }; // Add a new toast item\n\n\n  ToastyService.prototype.add = function (options, type) {\n    var toastyOptions;\n\n    if (isString(options) && options !== '' || isNumber(options)) {\n      toastyOptions = {\n        title: options.toString()\n      };\n    } else {\n      toastyOptions = options;\n    }\n\n    if (!toastyOptions || !toastyOptions.title && !toastyOptions.msg) {\n      throw new Error('ng2-toasty: No toast title or message specified!');\n    }\n\n    type = type || 'default'; // Set a unique counter for an id\n\n    this.uniqueCounter++; // Set the local vs global config items\n\n    var showClose = this._checkConfigItem(this.config, toastyOptions, 'showClose'); // If we have a theme set, make sure it's a valid one\n\n\n    var theme;\n\n    if (toastyOptions.theme) {\n      theme = ToastyService.THEMES.indexOf(toastyOptions.theme) > -1 ? toastyOptions.theme : this.config.theme;\n    } else {\n      theme = this.config.theme;\n    }\n\n    var toast = {\n      id: this.uniqueCounter,\n      title: toastyOptions.title,\n      msg: toastyOptions.msg,\n      showClose: showClose,\n      type: 'toasty-type-' + type,\n      theme: 'toasty-theme-' + theme,\n      onAdd: toastyOptions.onAdd && isFunction(toastyOptions.onAdd) ? toastyOptions.onAdd : null,\n      onRemove: toastyOptions.onRemove && isFunction(toastyOptions.onRemove) ? toastyOptions.onRemove : null\n    }; // If there's a timeout individually or globally, set the toast to timeout\n    // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.\n\n    toast.timeout = toastyOptions.hasOwnProperty('timeout') ? toastyOptions.timeout : this.config.timeout; // Push up a new toast item\n    // this.toastsSubscriber.next(toast);\n    // this.toastsEmitter.next(toast);\n\n    this.emitEvent(new ToastyEvent(ToastyEventType.ADD, toast)); // If we have a onAdd function, call it here\n\n    if (toastyOptions.onAdd && isFunction(toastyOptions.onAdd)) {\n      toastyOptions.onAdd.call(this, toast);\n    }\n  }; // Clear all toasts\n\n\n  ToastyService.prototype.clearAll = function () {\n    // this.clearEmitter.next(null);\n    this.emitEvent(new ToastyEvent(ToastyEventType.CLEAR_ALL));\n  }; // Clear the specific one\n\n\n  ToastyService.prototype.clear = function (id) {\n    // this.clearEmitter.next(id);\n    this.emitEvent(new ToastyEvent(ToastyEventType.CLEAR, id));\n  }; // Checks whether the local option is set, if not,\n  // checks the global config\n\n\n  ToastyService.prototype._checkConfigItem = function (config, options, property) {\n    if (options[property] === false) {\n      return false;\n    } else if (!options[property]) {\n      return config[property];\n    } else {\n      return true;\n    }\n  };\n\n  ToastyService.prototype.emitEvent = function (event) {\n    if (this.eventSource) {\n      // Push up a new event\n      this.eventSource.next(event);\n    }\n  }; // Allowed THEMES\n\n\n  ToastyService.THEMES = ['default', 'material', 'bootstrap'];\n\n  ToastyService.ɵfac = function ToastyService_Factory(t) {\n    return new (t || ToastyService)(ɵngcc0.ɵɵinject(ToastyConfig));\n  };\n\n  ToastyService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ToastyService,\n    factory: function factory(t) {\n      return ToastyService.ɵfac(t);\n    }\n  });\n  return ToastyService;\n}();\n\nexport { ToastyService };","map":null,"metadata":{},"sourceType":"module"}
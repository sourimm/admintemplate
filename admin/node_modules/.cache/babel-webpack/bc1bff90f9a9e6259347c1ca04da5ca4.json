{"ast":null,"code":"import _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\n\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport var ArgumentOutOfRangeError = /*#__PURE__*/function (_Error) {\n  _inherits(ArgumentOutOfRangeError, _Error);\n\n  var _super = _createSuper(ArgumentOutOfRangeError);\n\n  function ArgumentOutOfRangeError() {\n    var _this;\n\n    _classCallCheck(this, ArgumentOutOfRangeError);\n\n    _this = _super.call(this, 'argument out of range');\n    _this.name = 'ArgumentOutOfRangeError';\n    Object.setPrototypeOf(_assertThisInitialized(_this), ArgumentOutOfRangeError.prototype);\n    return _this;\n  }\n\n  return ArgumentOutOfRangeError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));","map":{"version":3,"sources":["../../../src/internal/util/ArgumentOutOfRangeError.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;AAUA,WAAM,uBAAN;AAAA;;AAAA;;AACE,qCAAA;AAAA;;AAAA;;AACE,8BAAM,uBAAN;AACA,UAAK,IAAL,GAAY,yBAAZ;AACC,IAAA,MAAc,CAAC,cAAf,gCAAoC,uBAAuB,CAAC,SAA5D;AAHH;AAIC;;AALH;AAAA,iCAA6C,KAA7C","sourcesContent":["/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n    constructor() {\n        super('argument out of range');\n        this.name = 'ArgumentOutOfRangeError';\n        Object.setPrototypeOf(this, ArgumentOutOfRangeError.prototype);\n    }\n}\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map"]},"metadata":{},"sourceType":"module"}
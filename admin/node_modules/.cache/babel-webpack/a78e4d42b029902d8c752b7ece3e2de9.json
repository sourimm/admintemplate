{"ast":null,"code":"import { fromArray } from '../observable/fromArray';\nimport { scalar } from '../observable/scalar';\nimport { empty } from '../observable/empty';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\n\nexport function startWith() {\n  for (var _len = arguments.length, array = new Array(_len), _key = 0; _key < _len; _key++) {\n    array[_key] = arguments[_key];\n  }\n\n  return function (source) {\n    var scheduler = array[array.length - 1];\n\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    var len = array.length;\n\n    if (len === 1 && !scheduler) {\n      return concatStatic(scalar(array[0]), source);\n    } else if (len > 0) {\n      return concatStatic(fromArray(array, scheduler), source);\n    } else {\n      return concatStatic(empty(scheduler), source);\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/startWith.ts"],"names":[],"mappings":"AACA,SAAS,SAAT,QAA0B,yBAA1B;AACA,SAAS,MAAT,QAAuB,sBAAvB;AACA,SAAS,KAAT,QAAsB,qBAAtB;AACA,SAAS,MAAM,IAAI,YAAnB,QAAuC,sBAAvC;AACA,SAAS,WAAT,QAA4B,qBAA5B;AAWA;;AAEA;;;;;;;;;;;;;;;AAcA,OAAM,SAAA,SAAA,GAAyD;AAAA,oCAA/B,KAA+B;AAA/B,IAAA,KAA+B;AAAA;;AAC7D,SAAO,UAAC,MAAD,EAA0B;AAC/B,QAAI,SAAS,GAAkB,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAApC;;AACA,QAAI,WAAW,CAAC,SAAD,CAAf,EAA4B;AAC1B,MAAA,KAAK,CAAC,GAAN;AACD,KAFD,MAEO;AACL,MAAA,SAAS,GAAG,IAAZ;AACD;;AAED,QAAM,GAAG,GAAG,KAAK,CAAC,MAAlB;;AACA,QAAI,GAAG,KAAK,CAAR,IAAa,CAAC,SAAlB,EAA6B;AAC3B,aAAO,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAD,CAAN,CAAP,EAAwB,MAAxB,CAAnB;AACD,KAFD,MAEO,IAAI,GAAG,GAAG,CAAV,EAAa;AAClB,aAAO,YAAY,CAAC,SAAS,CAAC,KAAD,EAAe,SAAf,CAAV,EAAqC,MAArC,CAAnB;AACD,KAFM,MAEA;AACL,aAAO,YAAY,CAAI,KAAK,CAAC,SAAD,CAAT,EAA6B,MAA7B,CAAnB;AACD;AACF,GAhBD;AAiBD","sourcesContent":["import { fromArray } from '../observable/fromArray';\nimport { scalar } from '../observable/scalar';\nimport { empty } from '../observable/empty';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith(...array) {\n    return (source) => {\n        let scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        const len = array.length;\n        if (len === 1 && !scheduler) {\n            return concatStatic(scalar(array[0]), source);\n        }\n        else if (len > 0) {\n            return concatStatic(fromArray(array, scheduler), source);\n        }\n        else {\n            return concatStatic(empty(scheduler), source);\n        }\n    };\n}\n//# sourceMappingURL=startWith.js.map"]},"metadata":{},"sourceType":"module"}
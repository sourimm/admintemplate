{"ast":null,"code":"import _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nexport var AnimationFrameAction = /*#__PURE__*/function (_AsyncAction) {\n  _inherits(AnimationFrameAction, _AsyncAction);\n\n  var _super = _createSuper(AnimationFrameAction);\n\n  function AnimationFrameAction(scheduler, work) {\n    var _this;\n\n    _classCallCheck(this, AnimationFrameAction);\n\n    _this = _super.call(this, scheduler, work);\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  _createClass(AnimationFrameAction, [{\n    key: \"requestAsyncId\",\n    value: function requestAsyncId(scheduler, id) {\n      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      // If delay is greater than 0, request as an async action.\n      if (delay !== null && delay > 0) {\n        return _get(_getPrototypeOf(AnimationFrameAction.prototype), \"requestAsyncId\", this).call(this, scheduler, id, delay);\n      } // Push the action to the end of the scheduler queue.\n\n\n      scheduler.actions.push(this); // If an animation frame has already been requested, don't request another\n      // one. If an animation frame hasn't been requested yet, request one. Return\n      // the current animation frame request id.\n\n      return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () {\n        return scheduler.flush(null);\n      }));\n    }\n  }, {\n    key: \"recycleAsyncId\",\n    value: function recycleAsyncId(scheduler, id) {\n      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      // If delay exists and is greater than 0, or if the delay is null (the\n      // action wasn't rescheduled) but was originally scheduled as an async\n      // action, then recycle as an async action.\n      if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n        return _get(_getPrototypeOf(AnimationFrameAction.prototype), \"recycleAsyncId\", this).call(this, scheduler, id, delay);\n      } // If the scheduler queue is empty, cancel the requested animation frame and\n      // set the scheduled flag to undefined so the next AnimationFrameAction will\n      // request its own.\n\n\n      if (scheduler.actions.length === 0) {\n        cancelAnimationFrame(id);\n        scheduler.scheduled = undefined;\n      } // Return undefined so the action knows to request a new async id if it's rescheduled.\n\n\n      return undefined;\n    }\n  }]);\n\n  return AnimationFrameAction;\n}(AsyncAction);","map":{"version":3,"sources":["../../../src/internal/scheduler/AnimationFrameAction.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,WAAT,QAA4B,eAA5B;AAIA;;;;;;AAKA,WAAM,oBAAN;AAAA;;AAAA;;AAEE,gCAAsB,SAAtB,EACsB,IADtB,EACyE;AAAA;;AAAA;;AACvE,8BAAM,SAAN,EAAiB,IAAjB;AAFoB,UAAA,SAAA,GAAA,SAAA;AACA,UAAA,IAAA,GAAA,IAAA;AAAmD;AAExE;;AALH;AAAA;AAAA,mCAO2B,SAP3B,EAO+D,EAP/D,EAO0F;AAAA,UAAjB,KAAiB,uEAAD,CAAC;;AACtF;AACA,UAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,GAAG,CAA9B,EAAiC;AAC/B,wGAA4B,SAA5B,EAAuC,EAAvC,EAA2C,KAA3C;AACD,OAJqF,CAKtF;;;AACA,MAAA,SAAS,CAAC,OAAV,CAAkB,IAAlB,CAAuB,IAAvB,EANsF,CAOtF;AACA;AACA;;AACA,aAAO,SAAS,CAAC,SAAV,KAAwB,SAAS,CAAC,SAAV,GAAsB,qBAAqB,CACxE;AAAA,eAAM,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAN;AAAA,OADwE,CAAnE,CAAP;AAED;AAnBH;AAAA;AAAA,mCAoB2B,SApB3B,EAoB+D,EApB/D,EAoB0F;AAAA,UAAjB,KAAiB,uEAAD,CAAC;;AACtF;AACA;AACA;AACA,UAAK,KAAK,KAAK,IAAV,IAAkB,KAAK,GAAG,CAA3B,IAAkC,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAL,GAAa,CAArE,EAAyE;AACvE,wGAA4B,SAA5B,EAAuC,EAAvC,EAA2C,KAA3C;AACD,OANqF,CAOtF;AACA;AACA;;;AACA,UAAI,SAAS,CAAC,OAAV,CAAkB,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,QAAA,oBAAoB,CAAC,EAAD,CAApB;AACA,QAAA,SAAS,CAAC,SAAV,GAAsB,SAAtB;AACD,OAbqF,CActF;;;AACA,aAAO,SAAP;AACD;AApCH;;AAAA;AAAA,EAA6C,WAA7C","sourcesContent":["import { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If an animation frame has already been requested, don't request another\n        // one. If an animation frame hasn't been requested yet, request one. Return\n        // the current animation frame request id.\n        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(() => scheduler.flush(null)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested animation frame and\n        // set the scheduled flag to undefined so the next AnimationFrameAction will\n        // request its own.\n        if (scheduler.actions.length === 0) {\n            cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    }\n}\n//# sourceMappingURL=AnimationFrameAction.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _assertThisInitialized from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/xampp/htdocs/admin/admin/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\n\nexport function windowToggle(openings, closingSelector) {\n  return function (source) {\n    return source.lift(new WindowToggleOperator(openings, closingSelector));\n  };\n}\n\nvar WindowToggleOperator = /*#__PURE__*/function () {\n  function WindowToggleOperator(openings, closingSelector) {\n    _classCallCheck(this, WindowToggleOperator);\n\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  _createClass(WindowToggleOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n  }]);\n\n  return WindowToggleOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar WindowToggleSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(WindowToggleSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(WindowToggleSubscriber);\n\n  function WindowToggleSubscriber(destination, openings, closingSelector) {\n    var _this;\n\n    _classCallCheck(this, WindowToggleSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.openings = openings;\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n\n    _this.add(_this.openSubscription = subscribeToResult(_assertThisInitialized(_this), openings, openings));\n\n    return _this;\n  }\n\n  _createClass(WindowToggleSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var contexts = this.contexts;\n\n      if (contexts) {\n        var len = contexts.length;\n\n        for (var i = 0; i < len; i++) {\n          contexts[i].window.next(value);\n        }\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.error(err);\n          context.subscription.unsubscribe();\n        }\n      }\n\n      _get(_getPrototypeOf(WindowToggleSubscriber.prototype), \"_error\", this).call(this, err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.complete();\n          context.subscription.unsubscribe();\n        }\n      }\n\n      _get(_getPrototypeOf(WindowToggleSubscriber.prototype), \"_complete\", this).call(this);\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.unsubscribe();\n          context.subscription.unsubscribe();\n        }\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      if (outerValue === this.openings) {\n        var closingSelector = this.closingSelector;\n        var closingNotifier = tryCatch(closingSelector)(innerValue);\n\n        if (closingNotifier === errorObject) {\n          return this.error(errorObject.e);\n        } else {\n          var window = new Subject();\n          var subscription = new Subscription();\n          var context = {\n            window: window,\n            subscription: subscription\n          };\n          this.contexts.push(context);\n          var innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n          if (innerSubscription.closed) {\n            this.closeWindow(this.contexts.length - 1);\n          } else {\n            innerSubscription.context = context;\n            subscription.add(innerSubscription);\n          }\n\n          this.destination.next(window);\n        }\n      } else {\n        this.closeWindow(this.contexts.indexOf(outerValue));\n      }\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(err) {\n      this.error(err);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(inner) {\n      if (inner !== this.openSubscription) {\n        this.closeWindow(this.contexts.indexOf(inner.context));\n      }\n    }\n  }, {\n    key: \"closeWindow\",\n    value: function closeWindow(index) {\n      if (index === -1) {\n        return;\n      }\n\n      var contexts = this.contexts;\n      var context = contexts[index];\n      var window = context.window,\n          subscription = context.subscription;\n      contexts.splice(index, 1);\n      window.complete();\n      subscription.unsubscribe();\n    }\n  }]);\n\n  return WindowToggleSubscriber;\n}(OuterSubscriber);","map":null,"metadata":{},"sourceType":"module"}